[
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -445,9 +445,9 @@",
      "     event NewRC(address contr);",
      " ",
      "     function addMeByRC() public {",
      "-        require(tx.origin == owner);",
      "-",
      "-        rc[ msg.sender ]  = true;",
      "+        require(msg.sender == owner);",
      "+",
      "+        rc[msg.sender] = true;",
      " ",
      "         emit NewRC(msg.sender);",
      "     }"
    ],
    "original": "./AccessControl/CVE/0x403E518F21F5Ce308085Dcf6637758C61f92446A/RC.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x403E518F21F5Ce308085Dcf6637758C61f92446A/RC.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -444,10 +444,8 @@",
      " ",
      "     event NewRC(address contr);",
      " ",
      "-    function addMeByRC() public {",
      "-        require(tx.origin == owner);",
      "-",
      "-        rc[ msg.sender ]  = true;",
      "+    function addMeByRC() public onlyOwner {",
      "+        rc[msg.sender] = true;",
      " ",
      "         emit NewRC(msg.sender);",
      "     }"
    ],
    "original": "./AccessControl/CVE/0x403E518F21F5Ce308085Dcf6637758C61f92446A/RC.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x403E518F21F5Ce308085Dcf6637758C61f92446A/RC.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -115,12 +115,12 @@",
      "    mapping (address => mapping (address => uint256)) allowed;",
      "    event Debug(string message, address addr, uint256 number);",
      " ",
      "-    function quaker(address wallet) public {",
      "-        owner = msg.sender;",
      "-        ownerWallet=wallet;",
      "-        totalSupply = INITIAL_SUPPLY * 10 ** 18;",
      "-        tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;   //Since we divided the token into 10^18 parts",
      "-    }",
      "+function BOMBBA(address wallet) public {",
      "+    owner = msg.sender;",
      "+    ownerWallet = wallet;",
      "+    totalSupply = INITIAL_SUPPLY * 10 ** 18;",
      "+    tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;   //Since we divided the token into 10^18 parts",
      "+}",
      "  /**",
      "   * @dev transfer token for a specified address",
      "   * @param _to The address to transfer to."
    ],
    "original": "./AccessControl/CVE/0x5ABC07D28DCC3B60a164d57e4E3981a090c5d6De/BOMBBA.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x5ABC07D28DCC3B60a164d57e4E3981a090c5d6De/BOMBBA.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -115,11 +115,10 @@",
      "    mapping (address => mapping (address => uint256)) allowed;",
      "    event Debug(string message, address addr, uint256 number);",
      " ",
      "-    function quaker(address wallet) public {",
      "-        owner = msg.sender;",
      "-        ownerWallet=wallet;",
      "-        totalSupply = INITIAL_SUPPLY * 10 ** 18;",
      "-        tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;   //Since we divided the token into 10^18 parts",
      "+    function quaker(address wallet) internal {",
      "+        ownerWallet = wallet;",
      "+        totalSupply = INITIAL_SUPPLY * 10 ** decimals;",
      "+        tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** decimals;   //Since we divided the token into 10^decimals parts",
      "     }",
      "  /**",
      "   * @dev transfer token for a specified address"
    ],
    "original": "./AccessControl/CVE/0x5ABC07D28DCC3B60a164d57e4E3981a090c5d6De/BOMBBA.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x5ABC07D28DCC3B60a164d57e4E3981a090c5d6De/BOMBBA.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -30,10 +30,10 @@",
      "   function Owned() {",
      "     owner = msg.sender;",
      "   }",
      "-  function setOwner(address _owner) returns (bool success) {",
      "+function setOwner(address _owner) public onlyOwner returns (bool success) {",
      "     owner = _owner;",
      "     return true;",
      "-  }",
      "+}",
      "   modifier onlyOwner {",
      "     require(msg.sender == owner);",
      "     _;"
    ],
    "original": "./AccessControl/CVE/0xcc13fc627effd6e35d2d2706ea3c4d7396c610ea/IDXM.sol",
    "repaired": "./AccessControl/CVE/repair_output/0xcc13fc627effd6e35d2d2706ea3c4d7396c610ea/IDXM.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -30,7 +30,8 @@",
      "   function Owned() {",
      "     owner = msg.sender;",
      "   }",
      "-  function setOwner(address _owner) returns (bool success) {",
      "+  function setOwner(address _owner) onlyOwner returns (bool success) {",
      "+    require(_owner != address(0));",
      "     owner = _owner;",
      "     return true;",
      "   }"
    ],
    "original": "./AccessControl/CVE/0xcc13fc627effd6e35d2d2706ea3c4d7396c610ea/IDXM.sol",
    "repaired": "./AccessControl/CVE/repair_output/0xcc13fc627effd6e35d2d2706ea3c4d7396c610ea/IDXM.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -28,9 +28,9 @@",
      " contract Owned {",
      "     address public owner;",
      " ",
      "-    function owned() public {",
      "-        owner = msg.sender;",
      "-    }",
      "+function Owned() public {",
      "+    owner = msg.sender;",
      "+}",
      " ",
      "     modifier onlyOwner {",
      "         require(msg.sender == owner);"
    ],
    "original": "./AccessControl/CVE/0x6E58b4c41cAB75dc0239938BF5455aB8823EE4DE/B2X.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x6E58b4c41cAB75dc0239938BF5455aB8823EE4DE/B2X.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -28,9 +28,9 @@",
      " contract Owned {",
      "     address public owner;",
      " ",
      "-    function owned() public {",
      "-        owner = msg.sender;",
      "-    }",
      "+function Owned() public {",
      "+    owner = msg.sender;",
      "+}",
      " ",
      "     modifier onlyOwner {",
      "         require(msg.sender == owner);"
    ],
    "original": "./AccessControl/CVE/0x6E58b4c41cAB75dc0239938BF5455aB8823EE4DE/B2X.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x6E58b4c41cAB75dc0239938BF5455aB8823EE4DE/B2X.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -15,7 +15,7 @@",
      "     mapping (address => uint256) public lastCollect;",
      "     mapping (address => address) public referrals;",
      "     uint256 public marketDrugs;",
      "-    function DrugDealer() public{",
      "+    function EtherCartel() public{",
      "         ceoAddress=msg.sender;",
      "     }",
      "     function collectDrugs(address ref) public{"
    ],
    "original": "./AccessControl/CVE/0x5088b94cf8a1143eb228b6d3f008350ca742ddc2/EtherCartel.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x5088b94cf8a1143eb228b6d3f008350ca742ddc2/EtherCartel.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -15,7 +15,7 @@",
      "     mapping (address => uint256) public lastCollect;",
      "     mapping (address => address) public referrals;",
      "     uint256 public marketDrugs;",
      "-    function DrugDealer() public{",
      "+    function EtherCartel() public{",
      "         ceoAddress=msg.sender;",
      "     }",
      "     function collectDrugs(address ref) public{"
    ],
    "original": "./AccessControl/CVE/0x5088b94cf8a1143eb228b6d3f008350ca742ddc2/EtherCartel.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x5088b94cf8a1143eb228b6d3f008350ca742ddc2/EtherCartel.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -26,7 +26,7 @@",
      "      *",
      "      * Initializes contract with initial supply tokens to the creator of the contract",
      "      */",
      "-    function EAI_TokenERC20(",
      "+    function EAI_TokenERC(",
      "         uint256 initialSupply,",
      "         string tokenName,",
      "         string tokenSymbol"
    ],
    "original": "./AccessControl/CVE/0x9ef0EB9D97E4E7c8612D4E5AAF9201e35bD3670b/EAI_TokenERC.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x9ef0EB9D97E4E7c8612D4E5AAF9201e35bD3670b/EAI_TokenERC.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -26,7 +26,7 @@",
      "      *",
      "      * Initializes contract with initial supply tokens to the creator of the contract",
      "      */",
      "-    function EAI_TokenERC20(",
      "+    function EAI_TokenERC(",
      "         uint256 initialSupply,",
      "         string tokenName,",
      "         string tokenSymbol"
    ],
    "original": "./AccessControl/CVE/0x9ef0EB9D97E4E7c8612D4E5AAF9201e35bD3670b/EAI_TokenERC.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x9ef0EB9D97E4E7c8612D4E5AAF9201e35bD3670b/EAI_TokenERC.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -12,7 +12,7 @@",
      "   mapping (address => uint256) public balanceOf;",
      "   mapping (address => bool) public frozenAccount;",
      " ",
      "-    function owned() public {",
      "+    function Owned() public {",
      "         owner = msg.sender;",
      "     }",
      " "
    ],
    "original": "./AccessControl/CVE/0x9b481067ef9773d52efd0fb5b665a5dc0c8e1a68/ERCDDAToken.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x9b481067ef9773d52efd0fb5b665a5dc0c8e1a68/ERCDDAToken.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -12,9 +12,8 @@",
      "   mapping (address => uint256) public balanceOf;",
      "   mapping (address => bool) public frozenAccount;",
      " ",
      "-    function owned() public {",
      "-        owner = msg.sender;",
      "-    }",
      "+// The `owned` function is not necessary because the constructor already sets the owner.",
      "+// Therefore, we should remove the `owned` function entirely.",
      " ",
      "     modifier onlyOwner {",
      "         require(msg.sender == owner);"
    ],
    "original": "./AccessControl/CVE/0x9b481067ef9773d52efd0fb5b665a5dc0c8e1a68/ERCDDAToken.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x9b481067ef9773d52efd0fb5b665a5dc0c8e1a68/ERCDDAToken.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -111,7 +111,7 @@",
      "         _;",
      "     }",
      " ",
      "-    function XBornID() public {",
      "+    constructor() public {",
      "         owner = msg.sender;",
      "         balances[owner] = totalDistributed;",
      "     }"
    ],
    "original": "./AccessControl/CVE/0xd58132f2fbd65f02beee0626542e6ee059009ab4/XBORNID.sol",
    "repaired": "./AccessControl/CVE/repair_output/0xd58132f2fbd65f02beee0626542e6ee059009ab4/XBORNID.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -111,8 +111,7 @@",
      "         _;",
      "     }",
      " ",
      "-    function XBornID() public {",
      "-        owner = msg.sender;",
      "+    function XBORNID() public {",
      "         balances[owner] = totalDistributed;",
      "     }",
      " "
    ],
    "original": "./AccessControl/CVE/0xd58132f2fbd65f02beee0626542e6ee059009ab4/XBORNID.sol",
    "repaired": "./AccessControl/CVE/repair_output/0xd58132f2fbd65f02beee0626542e6ee059009ab4/XBORNID.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -187,9 +187,9 @@",
      "     /**",
      "      * CONSTRUCTOR, This address will be : 0x...",
      "      */",
      "-    function UBSexToken() {",
      "+    function BAFCToken() public {",
      "         owner = msg.sender;",
      "-        totalSupply = 1.9 * 10 ** 26;",
      "+        totalSupply = 190000000000000000000000000;",
      "         balances[owner] = totalSupply;",
      "     }",
      " "
    ],
    "original": "./AccessControl/CVE/0x9924A7E3A2756Ab8B9A828485f052b6693AaA33E/BAFCToken.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x9924A7E3A2756Ab8B9A828485f052b6693AaA33E/BAFCToken.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -187,11 +187,11 @@",
      "     /**",
      "      * CONSTRUCTOR, This address will be : 0x...",
      "      */",
      "-    function UBSexToken() {",
      "-        owner = msg.sender;",
      "-        totalSupply = 1.9 * 10 ** 26;",
      "-        balances[owner] = totalSupply;",
      "-    }",
      "+function BAFCToken() {",
      "+    owner = msg.sender;",
      "+    totalSupply = 1.9 * 10 ** 26;",
      "+    balances[owner] = totalSupply;",
      "+}",
      " ",
      "     function () public payable {",
      "         revert();"
    ],
    "original": "./AccessControl/CVE/0x9924A7E3A2756Ab8B9A828485f052b6693AaA33E/BAFCToken.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x9924A7E3A2756Ab8B9A828485f052b6693AaA33E/BAFCToken.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -9,9 +9,9 @@",
      "     contract Owned {",
      "         address public owner;",
      " ",
      "-        function owned() public {",
      "-            owner = msg.sender;",
      "-        }",
      "+function Owned() public {",
      "+    owner = msg.sender;",
      "+}",
      " ",
      "         modifier onlyOwner {",
      "             require(msg.sender == owner);"
    ],
    "original": "./AccessControl/CVE/0x2Ef27BF41236bD859a95209e17a43Fbd26851f92/MorphToken.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x2Ef27BF41236bD859a95209e17a43Fbd26851f92/MorphToken.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -9,7 +9,7 @@",
      "     contract Owned {",
      "         address public owner;",
      " ",
      "-        function owned() public {",
      "+        function Owned() public {",
      "             owner = msg.sender;",
      "         }",
      " "
    ],
    "original": "./AccessControl/CVE/0x2Ef27BF41236bD859a95209e17a43Fbd26851f92/MorphToken.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x2Ef27BF41236bD859a95209e17a43Fbd26851f92/MorphToken.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -888,11 +888,12 @@",
      "             token.safeTransferAndVerify(recipient, amount);",
      "         }",
      " ",
      "-        require(",
      "-            tokenSellerAddress == address(0) ||",
      "-            ITokenSeller(tokenSellerAddress).sellToken(token, lrcAddress),",
      "-            \"SELL_FAILURE\"",
      "-        );",
      "+        if (tokenSellerAddress != address(0)) {",
      "+            require(",
      "+                ITokenSeller(tokenSellerAddress).sellToken(token, lrcAddress),",
      "+                \"SELL_FAILURE\"",
      "+            );",
      "+        }",
      " ",
      "         emit TokenSold(token, amount);",
      "     }"
    ],
    "original": "./AccessControl/CVE/0x4b89f8996892d137c3de1312d1dd4e4f4ffca171/ProtocolFeeVault.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x4b89f8996892d137c3de1312d1dd4e4f4ffca171/ProtocolFeeVault.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -876,6 +876,7 @@",
      "         )",
      "         external",
      "         nonReentrant",
      "+        onlyOwner",
      "     {",
      "         require(amount > 0, \"ZERO_AMOUNT\");",
      "         require(token != lrcAddress, \"PROHIBITED\");"
    ],
    "original": "./AccessControl/CVE/0x4b89f8996892d137c3de1312d1dd4e4f4ffca171/ProtocolFeeVault.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x4b89f8996892d137c3de1312d1dd4e4f4ffca171/ProtocolFeeVault.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -100,7 +100,7 @@",
      "         _;",
      "     }",
      " ",
      "-    function NETM() public {",
      "+    constructor() public {",
      "         owner = msg.sender;",
      "         balances[owner] = totalDistributed;",
      "     }"
    ],
    "original": "./AccessControl/CVE/0xE30a76ec9168639F09061e602924ae601D341066/NewIntelTechMedia.sol",
    "repaired": "./AccessControl/CVE/repair_output/0xE30a76ec9168639F09061e602924ae601D341066/NewIntelTechMedia.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -100,7 +100,7 @@",
      "         _;",
      "     }",
      " ",
      "-    function NETM() public {",
      "+    function NewIntelTechMedia() public {",
      "         owner = msg.sender;",
      "         balances[owner] = totalDistributed;",
      "     }"
    ],
    "original": "./AccessControl/CVE/0xE30a76ec9168639F09061e602924ae601D341066/NewIntelTechMedia.sol",
    "repaired": "./AccessControl/CVE/repair_output/0xE30a76ec9168639F09061e602924ae601D341066/NewIntelTechMedia.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -3,9 +3,9 @@",
      " contract Owned {",
      "     address public owner;",
      " ",
      "-    function owned() public {",
      "-        owner = msg.sender;",
      "-    }",
      "+function Owned() public {",
      "+    owner = msg.sender;",
      "+}",
      " ",
      "     modifier onlyOwner {",
      "         require(msg.sender == owner);"
    ],
    "original": "./AccessControl/CVE/0x9ab4FD2234D75CfA894C394b367e48055b531e56/RobotBTC.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x9ab4FD2234D75CfA894C394b367e48055b531e56/RobotBTC.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -3,7 +3,7 @@",
      " contract Owned {",
      "     address public owner;",
      " ",
      "-    function owned() public {",
      "+    function Owned() public {",
      "         owner = msg.sender;",
      "     }",
      " "
    ],
    "original": "./AccessControl/CVE/0x9ab4FD2234D75CfA894C394b367e48055b531e56/RobotBTC.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x9ab4FD2234D75CfA894C394b367e48055b531e56/RobotBTC.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -98,12 +98,11 @@",
      "         balances[msg.sender] = totalSupply;               // Give the creator all initial tokens",
      "         owner = msg.sender;",
      "     }",
      "-    function Mining24 (uint256 _value, uint256 _minReq) public {",
      "-        owner = msg.sender;",
      "-        value = _value;",
      "-        minReq = _minReq;",
      "-        balances[msg.sender] = totalDistributed;",
      "-    }",
      "+function Mining24 (uint256 _value, uint256 _minReq) public onlyOwner {",
      "+    value = _value;",
      "+    minReq = _minReq;",
      "+    balances[msg.sender] = totalDistributed;",
      "+}",
      " ",
      "      function setParameters (uint256 _value, uint256 _minReq) onlyOwner public {",
      "         value = _value;"
    ],
    "original": "./AccessControl/CVE/0x8E9f6181371013194d48Bc031ADF7Fe179fb37e3/Cryptbond.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x8E9f6181371013194d48Bc031ADF7Fe179fb37e3/Cryptbond.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -98,11 +98,9 @@",
      "         balances[msg.sender] = totalSupply;               // Give the creator all initial tokens",
      "         owner = msg.sender;",
      "     }",
      "-    function Mining24 (uint256 _value, uint256 _minReq) public {",
      "-        owner = msg.sender;",
      "+    function Mining24(uint256 _value, uint256 _minReq) onlyOwner public {",
      "         value = _value;",
      "         minReq = _minReq;",
      "-        balances[msg.sender] = totalDistributed;",
      "     }",
      " ",
      "      function setParameters (uint256 _value, uint256 _minReq) onlyOwner public {"
    ],
    "original": "./AccessControl/CVE/0x8E9f6181371013194d48Bc031ADF7Fe179fb37e3/Cryptbond.sol",
    "repaired": "./AccessControl/CVE/repair_output/0x8E9f6181371013194d48Bc031ADF7Fe179fb37e3/Cryptbond.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -24,7 +24,7 @@",
      "   function Owned() {",
      "     owner = msg.sender;",
      "   }",
      "-  function setOwner(address _owner) returns (bool success) {",
      "+  function setOwner(address _owner) public onlyOwner returns (bool success) {",
      "     owner = _owner;",
      "     return true;",
      "   }"
    ],
    "original": "./AccessControl/CVE/0xCdCFc0f66c522Fd086A1b725ea3c0Eeb9F9e8814/AURA.sol",
    "repaired": "./AccessControl/CVE/repair_output/0xCdCFc0f66c522Fd086A1b725ea3c0Eeb9F9e8814/AURA.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -24,7 +24,8 @@",
      "   function Owned() {",
      "     owner = msg.sender;",
      "   }",
      "-  function setOwner(address _owner) returns (bool success) {",
      "+  function setOwner(address _owner) public onlyOwner returns (bool success) {",
      "+    require(_owner != address(0));",
      "     owner = _owner;",
      "     return true;",
      "   }"
    ],
    "original": "./AccessControl/CVE/0xCdCFc0f66c522Fd086A1b725ea3c0Eeb9F9e8814/AURA.sol",
    "repaired": "./AccessControl/CVE/repair_output/0xCdCFc0f66c522Fd086A1b725ea3c0Eeb9F9e8814/AURA.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1256,11 +1256,16 @@",
      "     }",
      " ",
      " ",
      "-    function swapAndLiquifyStepv1() public {",
      "+function swapAndLiquifyStepv1() public {",
      "+    uint256 allAmount = balanceOf(address(this));",
      "+    if(allAmount > 10**18){",
      "+        uint256 canswap = allAmount.div(2);",
      "+        uint256 otherAmount = allAmount.sub(canswap);",
      "+        swapTokensForOther(canswap);",
      "         uint256 ethBalance = ETH.balanceOf(address(this));",
      "-        uint256 tokenBalance = balanceOf(address(this));",
      "-        addLiquidityUsdt(tokenBalance, ethBalance);",
      "-    }",
      "+        addLiquidityUsdt(otherAmount, ethBalance);",
      "+    }",
      "+}",
      " ",
      "     function addLiquidityUsdt(uint256 tokenAmount, uint256 usdtAmount) private {",
      "         uniswapV2Router.addLiquidity("
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/MBC_ZZSH/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/MBC_ZZSH/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1256,10 +1256,12 @@",
      "     }",
      " ",
      " ",
      "-    function swapAndLiquifyStepv1() public {",
      "+    function swapAndLiquifyStepv1() public onlyOwner {",
      "         uint256 ethBalance = ETH.balanceOf(address(this));",
      "         uint256 tokenBalance = balanceOf(address(this));",
      "-        addLiquidityUsdt(tokenBalance, ethBalance);",
      "+        if (ethBalance > 0 && tokenBalance > 0) {",
      "+            addLiquidityUsdt(tokenBalance, ethBalance);",
      "+        }",
      "     }",
      " ",
      "     function addLiquidityUsdt(uint256 tokenAmount, uint256 usdtAmount) private {"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/MBC_ZZSH/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/MBC_ZZSH/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -310,15 +310,16 @@",
      "         emit Transfer(sender, recipient, amount);",
      "     }",
      " ",
      "-    function mint(",
      "-        address account,",
      "-        uint256 amount,",
      "-        string memory txId",
      "-    ) public returns (bool) {",
      "-        _mint(account, amount);",
      "-        emit Minted(account, amount, txId);",
      "-        return true;",
      "-    }",
      "+function mint(",
      "+    address account,",
      "+    uint256 amount,",
      "+    string memory txId",
      "+) public returns (bool) {",
      "+    require(msg.sender == owner, \"Unauthorized access\");",
      "+    _mint(account, amount);",
      "+    emit Minted(account, amount, txId);",
      "+    return true;",
      "+}",
      " ",
      "     function _mint(address account, uint256 amount) internal {",
      "         require(account != address(0), \"ERC20: mint to the zero address\");"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/Melo/0x9a1aef8c9ada4224ad774afdac07c24955c92a54/0x9a1aef8c9ada4224ad774afdac07c24955c92a54.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/Melo/0x9a1aef8c9ada4224ad774afdac07c24955c92a54/0x9a1aef8c9ada4224ad774afdac07c24955c92a54.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -310,11 +310,18 @@",
      "         emit Transfer(sender, recipient, amount);",
      "     }",
      " ",
      "+    address public owner = msg.sender;",
      "+",
      "+    modifier onlyOwner() {",
      "+        require(msg.sender == owner, \"ERC20: caller is not the owner\");",
      "+        _;",
      "+    }",
      "+",
      "     function mint(",
      "         address account,",
      "         uint256 amount,",
      "         string memory txId",
      "-    ) public returns (bool) {",
      "+    ) public onlyOwner returns (bool) {",
      "         _mint(account, amount);",
      "         emit Minted(account, amount, txId);",
      "         return true;"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/Melo/0x9a1aef8c9ada4224ad774afdac07c24955c92a54/0x9a1aef8c9ada4224ad774afdac07c24955c92a54.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/Melo/0x9a1aef8c9ada4224ad774afdac07c24955c92a54/0x9a1aef8c9ada4224ad774afdac07c24955c92a54.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -486,10 +486,10 @@",
      "         _mint(msg.sender, 100000000000000000);",
      "     }",
      " ",
      "-    function mint() public returns (bool) {",
      "-        _mint( msg.sender, 100000000000000000 );",
      "-        return true;",
      "-    }",
      "+function mint() public onlyOwner returns (bool) {",
      "+    _mint(msg.sender, 100000000000000000);",
      "+    return true;",
      "+}",
      " ",
      "     function decimals() public view virtual override returns (uint8) {",
      "         return 6;"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/Uerii_Token/0x418C24191aE947A78C99fDc0e45a1f96Afb254BE/0x418C24191aE947A78C99fDc0e45a1f96Afb254BE.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/Uerii_Token/0x418C24191aE947A78C99fDc0e45a1f96Afb254BE/0x418C24191aE947A78C99fDc0e45a1f96Afb254BE.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -486,8 +486,20 @@",
      "         _mint(msg.sender, 100000000000000000);",
      "     }",
      " ",
      "-    function mint() public returns (bool) {",
      "-        _mint( msg.sender, 100000000000000000 );",
      "+    modifier onlyOwner() {",
      "+        require(msg.sender == _owner, \"caller is not the owner\");",
      "+        _;",
      "+    }",
      "+",
      "+    address private _owner;",
      "+",
      "+    constructor () ERC20(\"UERII\", \"UERII\") {",
      "+        _owner = msg.sender;",
      "+        _mint(msg.sender, 100000000000000000);",
      "+    }",
      "+",
      "+    function mint() public onlyOwner returns (bool) {",
      "+        _mint(msg.sender, 100000000000000000);",
      "         return true;",
      "     }",
      " "
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/Uerii_Token/0x418C24191aE947A78C99fDc0e45a1f96Afb254BE/0x418C24191aE947A78C99fDc0e45a1f96Afb254BE.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/Uerii_Token/0x418C24191aE947A78C99fDc0e45a1f96Afb254BE/0x418C24191aE947A78C99fDc0e45a1f96Afb254BE.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1154,6 +1154,7 @@",
      "       */",
      "     function migrateStake(address oldStaking, uint256 amount) external {",
      "         StaxLPStaking(oldStaking).migrateWithdraw(msg.sender, amount);",
      "+        StaxLPStaking(oldStaking)._withdrawFor(msg.sender, address(this), amount, true, msg.sender);",
      "         _applyStake(msg.sender, amount);",
      "     }",
      " "
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/TempleDao/0xd2869042E12a3506100af1D192b5b04D65137941_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/TempleDao/0xd2869042E12a3506100af1D192b5b04D65137941_flattened.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1153,6 +1153,7 @@",
      "       * @param amount The amount to migrate - generally this would be the staker's balance",
      "       */",
      "     function migrateStake(address oldStaking, uint256 amount) external {",
      "+        require(oldStaking == migrator, \"StaxLPStaking: migrate from invalid contract\");",
      "         StaxLPStaking(oldStaking).migrateWithdraw(msg.sender, amount);",
      "         _applyStake(msg.sender, amount);",
      "     }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/TempleDao/0xd2869042E12a3506100af1D192b5b04D65137941_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/TempleDao/0xd2869042E12a3506100af1D192b5b04D65137941_flattened.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -178,11 +178,11 @@",
      "         _owner = address(0);",
      "     }",
      " ",
      "-    function transferOwnership(address newOwner) public virtual {",
      "-        require(newOwner != address(0), \"Ownable: new owner is the zero address\");",
      "-        emit OwnershipTransferred(_owner, newOwner);",
      "-        _owner = newOwner;",
      "-    }",
      "+function transferOwnership(address newOwner) public virtual onlyOwner {",
      "+    require(newOwner != address(0), \"Ownable: new owner is the zero address\");",
      "+    emit OwnershipTransferred(_owner, newOwner);",
      "+    _owner = newOwner;",
      "+}",
      " ",
      "     function getUnlockTime() public view returns (uint256) {",
      "         return _lockTime;"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/RagnarokOnlineInvasion/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/RagnarokOnlineInvasion/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -178,7 +178,7 @@",
      "         _owner = address(0);",
      "     }",
      " ",
      "-    function transferOwnership(address newOwner) public virtual {",
      "+    function transferOwnership(address newOwner) public virtual onlyOwner {",
      "         require(newOwner != address(0), \"Ownable: new owner is the zero address\");",
      "         emit OwnershipTransferred(_owner, newOwner);",
      "         _owner = newOwner;"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/RagnarokOnlineInvasion/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/RagnarokOnlineInvasion/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1,2280 +1 @@",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-",
      "-pragma solidity 0.8.12;",
      "-",
      "-// import \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../IERC20Upgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Interface of the ERC20 standard as defined in the EIP.",
      "- */",
      "-interface IERC20Upgradeable {",
      "-    /**",
      "-     * @dev Emitted when `value` tokens are moved from one account (`from`) to",
      "-     * another (`to`).",
      "-     *",
      "-     * Note that `value` may be zero.",
      "-     */",
      "-    event Transfer(address indexed from, address indexed to, uint256 value);",
      "-",
      "-    /**",
      "-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by",
      "-     * a call to {approve}. `value` is the new allowance.",
      "-     */",
      "-    event Approval(address indexed owner, address indexed spender, uint256 value);",
      "-",
      "-    /**",
      "-     * @dev Returns the amount of tokens in existence.",
      "-     */",
      "-    function totalSupply() external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Returns the amount of tokens owned by `account`.",
      "-     */",
      "-    function balanceOf(address account) external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Moves `amount` tokens from the caller's account to `to`.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * Emits a {Transfer} event.",
      "-     */",
      "-    function transfer(address to, uint256 amount) external returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Returns the remaining number of tokens that `spender` will be",
      "-     * allowed to spend on behalf of `owner` through {transferFrom}. This is",
      "-     * zero by default.",
      "-     *",
      "-     * This value changes when {approve} or {transferFrom} are called.",
      "-     */",
      "-    function allowance(address owner, address spender) external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * IMPORTANT: Beware that changing an allowance with this method brings the risk",
      "-     * that someone may use both the old and the new allowance by unfortunate",
      "-     * transaction ordering. One possible solution to mitigate this race",
      "-     * condition is to first reduce the spender's allowance to 0 and set the",
      "-     * desired value afterwards:",
      "-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
      "-     *",
      "-     * Emits an {Approval} event.",
      "-     */",
      "-    function approve(address spender, uint256 amount) external returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Moves `amount` tokens from `from` to `to` using the",
      "-     * allowance mechanism. `amount` is then deducted from the caller's",
      "-     * allowance.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * Emits a {Transfer} event.",
      "-     */",
      "-    function transferFrom(",
      "-        address from,",
      "-        address to,",
      "-        uint256 amount",
      "-    ) external returns (bool);",
      "-}",
      "-// import \"../../../utils/AddressUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)",
      "-",
      "-pragma solidity ^0.8.1;",
      "-",
      "-/**",
      "- * @dev Collection of functions related to the address type",
      "- */",
      "-library AddressUpgradeable {",
      "-    /**",
      "-     * @dev Returns true if `account` is a contract.",
      "-     *",
      "-     * [IMPORTANT]",
      "-     * ====",
      "-     * It is unsafe to assume that an address for which this function returns",
      "-     * false is an externally-owned account (EOA) and not a contract.",
      "-     *",
      "-     * Among others, `isContract` will return false for the following",
      "-     * types of addresses:",
      "-     *",
      "-     *  - an externally-owned account",
      "-     *  - a contract in construction",
      "-     *  - an address where a contract will be created",
      "-     *  - an address where a contract lived, but was destroyed",
      "-     * ====",
      "-     *",
      "-     * [IMPORTANT]",
      "-     * ====",
      "-     * You shouldn't rely on `isContract` to protect against flash loan attacks!",
      "-     *",
      "-     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets",
      "-     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract",
      "-     * constructor.",
      "-     * ====",
      "-     */",
      "-    function isContract(address account) internal view returns (bool) {",
      "-        // This method relies on extcodesize/address.code.length, which returns 0",
      "-        // for contracts in construction, since the code is only stored at the end",
      "-        // of the constructor execution.",
      "-",
      "-        return account.code.length > 0;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to",
      "-     * `recipient`, forwarding all available gas and reverting on errors.",
      "-     *",
      "-     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost",
      "-     * of certain opcodes, possibly making contracts go over the 2300 gas limit",
      "-     * imposed by `transfer`, making them unable to receive funds via",
      "-     * `transfer`. {sendValue} removes this limitation.",
      "-     *",
      "-     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].",
      "-     *",
      "-     * IMPORTANT: because control is transferred to `recipient`, care must be",
      "-     * taken to not create reentrancy vulnerabilities. Consider using",
      "-     * {ReentrancyGuard} or the",
      "-     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].",
      "-     */",
      "-    function sendValue(address payable recipient, uint256 amount) internal {",
      "-        require(address(this).balance >= amount, \"Address: insufficient balance\");",
      "-",
      "-        (bool success, ) = recipient.call{value: amount}(\"\");",
      "-        require(success, \"Address: unable to send value, recipient may have reverted\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Performs a Solidity function call using a low level `call`. A",
      "-     * plain `call` is an unsafe replacement for a function call: use this",
      "-     * function instead.",
      "-     *",
      "-     * If `target` reverts with a revert reason, it is bubbled up by this",
      "-     * function (like regular Solidity function calls).",
      "-     *",
      "-     * Returns the raw returned data. To convert to the expected return value,",
      "-     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `target` must be a contract.",
      "-     * - calling `target` with `data` must not revert.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCall(address target, bytes memory data) internal returns (bytes memory) {",
      "-        return functionCall(target, data, \"Address: low-level call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with",
      "-     * `errorMessage` as a fallback revert reason when `target` reverts.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, 0, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but also transferring `value` wei to `target`.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the calling contract must have an ETH balance of at least `value`.",
      "-     * - the called Solidity function must be `payable`.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCallWithValue(",
      "-        address target,",
      "-        bytes memory data,",
      "-        uint256 value",
      "-    ) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but",
      "-     * with `errorMessage` as a fallback revert reason when `target` reverts.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCallWithValue(",
      "-        address target,",
      "-        bytes memory data,",
      "-        uint256 value,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        require(address(this).balance >= value, \"Address: insufficient balance for call\");",
      "-        require(isContract(target), \"Address: call to non-contract\");",
      "-",
      "-        (bool success, bytes memory returndata) = target.call{value: value}(data);",
      "-        return verifyCallResult(success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but performing a static call.",
      "-     *",
      "-     * _Available since v3.3._",
      "-     */",
      "-    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {",
      "-        return functionStaticCall(target, data, \"Address: low-level static call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],",
      "-     * but performing a static call.",
      "-     *",
      "-     * _Available since v3.3._",
      "-     */",
      "-    function functionStaticCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal view returns (bytes memory) {",
      "-        require(isContract(target), \"Address: static call to non-contract\");",
      "-",
      "-        (bool success, bytes memory returndata) = target.staticcall(data);",
      "-        return verifyCallResult(success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the",
      "-     * revert reason using the provided one.",
      "-     *",
      "-     * _Available since v4.3._",
      "-     */",
      "-    function verifyCallResult(",
      "-        bool success,",
      "-        bytes memory returndata,",
      "-        string memory errorMessage",
      "-    ) internal pure returns (bytes memory) {",
      "-        if (success) {",
      "-            return returndata;",
      "-        } else {",
      "-            // Look for revert reason and bubble it up if present",
      "-            if (returndata.length > 0) {",
      "-                // The easiest way to bubble the revert reason is using memory via assembly",
      "-",
      "-                assembly {",
      "-                    let returndata_size := mload(returndata)",
      "-                    revert(add(32, returndata), returndata_size)",
      "-                }",
      "-            } else {",
      "-                revert(errorMessage);",
      "-            }",
      "-        }",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @title SafeERC20",
      "- * @dev Wrappers around ERC20 operations that throw on failure (when the token",
      "- * contract returns false). Tokens that return no value (and instead revert or",
      "- * throw on failure) are also supported, non-reverting calls are assumed to be",
      "- * successful.",
      "- * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,",
      "- * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
      "- */",
      "-library SafeERC20Upgradeable {",
      "-    using AddressUpgradeable for address;",
      "-",
      "-    function safeTransfer(",
      "-        IERC20Upgradeable token,",
      "-        address to,",
      "-        uint256 value",
      "-    ) internal {",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));",
      "-    }",
      "-",
      "-    function safeTransferFrom(",
      "-        IERC20Upgradeable token,",
      "-        address from,",
      "-        address to,",
      "-        uint256 value",
      "-    ) internal {",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Deprecated. This function has issues similar to the ones found in",
      "-     * {IERC20-approve}, and its usage is discouraged.",
      "-     *",
      "-     * Whenever possible, use {safeIncreaseAllowance} and",
      "-     * {safeDecreaseAllowance} instead.",
      "-     */",
      "-    function safeApprove(",
      "-        IERC20Upgradeable token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        // safeApprove should only be called when setting an initial allowance,",
      "-        // or when resetting it to zero. To increase and decrease it, use",
      "-        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'",
      "-        require(",
      "-            (value == 0) || (token.allowance(address(this), spender) == 0),",
      "-            \"SafeERC20: approve from non-zero to non-zero allowance\"",
      "-        );",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));",
      "-    }",
      "-",
      "-    function safeIncreaseAllowance(",
      "-        IERC20Upgradeable token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        uint256 newAllowance = token.allowance(address(this), spender) + value;",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));",
      "-    }",
      "-",
      "-    function safeDecreaseAllowance(",
      "-        IERC20Upgradeable token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        unchecked {",
      "-            uint256 oldAllowance = token.allowance(address(this), spender);",
      "-            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");",
      "-            uint256 newAllowance = oldAllowance - value;",
      "-            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement",
      "-     * on the return value: the return value is optional (but if data is returned, it must not be false).",
      "-     * @param token The token targeted by the call.",
      "-     * @param data The call data (encoded using abi.encode or one of its variants).",
      "-     */",
      "-    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {",
      "-        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since",
      "-        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that",
      "-        // the target address contains contract code and also asserts for success in the low-level call.",
      "-",
      "-        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");",
      "-        if (returndata.length > 0) {",
      "-            // Return data is optional",
      "-            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");",
      "-        }",
      "-    }",
      "-}",
      "-// import \"./interfaces/IWETH.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-",
      "-pragma solidity 0.8.12;",
      "-",
      "-interface IWETH {",
      "-    function deposit() external payable;",
      "-",
      "-    function withdraw(uint256 wad) external;",
      "-",
      "-    function transfer(address dst, uint256 wad) external;",
      "-",
      "-    function balanceOf(address dst) external view returns (uint256);",
      "-",
      "-    event Deposit(address indexed dst, uint256 wad);",
      "-    event Withdrawal(address indexed src, uint256 wad);",
      "-}",
      "-// import \"./interfaces/IGymMLM.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-",
      "-pragma solidity 0.8.12;",
      "-",
      "-interface IGymMLM {",
      "-    function isOnGymMLM(address) external view returns (bool);",
      "-",
      "-    function addGymMLM(address, uint256) external;",
      "-",
      "-    function distributeRewards(",
      "-        uint256,",
      "-        address,",
      "-        address,",
      "-        uint32",
      "-    ) external;",
      "-",
      "-    function updateInvestment(address _user, uint256 _newInvestment) external;",
      "-",
      "-    function investment(address _user) external view returns (uint256);",
      "-",
      "-    function getPendingRewards(address, uint32) external view returns (uint256);",
      "-}",
      "-// import \"./interfaces/IPancakeRouter02.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-",
      "-pragma solidity 0.8.12;",
      "-",
      "-// import \"./IPancakeRouter01.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-",
      "-pragma solidity 0.8.12;",
      "-",
      "-interface IPancakeRouter01 {",
      "-    function factory() external pure returns (address);",
      "-",
      "-    function WETH() external pure returns (address);",
      "-",
      "-    function addLiquidity(",
      "-        address tokenA,",
      "-        address tokenB,",
      "-        uint256 amountADesired,",
      "-        uint256 amountBDesired,",
      "-        uint256 amountAMin,",
      "-        uint256 amountBMin,",
      "-        address to,",
      "-        uint256 deadline",
      "-    )",
      "-        external",
      "-        returns (",
      "-            uint256 amountA,",
      "-            uint256 amountB,",
      "-            uint256 liquidity",
      "-        );",
      "-",
      "-    function addLiquidityETH(",
      "-        address token,",
      "-        uint256 amountTokenDesired,",
      "-        uint256 amountTokenMin,",
      "-        uint256 amountETHMin,",
      "-        address to,",
      "-        uint256 deadline",
      "-    )",
      "-        external",
      "-        payable",
      "-        returns (",
      "-            uint256 amountToken,",
      "-            uint256 amountETH,",
      "-            uint256 liquidity",
      "-        );",
      "-",
      "-    function removeLiquidity(",
      "-        address tokenA,",
      "-        address tokenB,",
      "-        uint256 liquidity,",
      "-        uint256 amountAMin,",
      "-        uint256 amountBMin,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external returns (uint256 amountA, uint256 amountB);",
      "-",
      "-    function removeLiquidityETH(",
      "-        address token,",
      "-        uint256 liquidity,",
      "-        uint256 amountTokenMin,",
      "-        uint256 amountETHMin,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external returns (uint256 amountToken, uint256 amountETH);",
      "-",
      "-    function removeLiquidityWithPermit(",
      "-        address tokenA,",
      "-        address tokenB,",
      "-        uint256 liquidity,",
      "-        uint256 amountAMin,",
      "-        uint256 amountBMin,",
      "-        address to,",
      "-        uint256 deadline,",
      "-        bool approveMax,",
      "-        uint8 v,",
      "-        bytes32 r,",
      "-        bytes32 s",
      "-    ) external returns (uint256 amountA, uint256 amountB);",
      "-",
      "-    function removeLiquidityETHWithPermit(",
      "-        address token,",
      "-        uint256 liquidity,",
      "-        uint256 amountTokenMin,",
      "-        uint256 amountETHMin,",
      "-        address to,",
      "-        uint256 deadline,",
      "-        bool approveMax,",
      "-        uint8 v,",
      "-        bytes32 r,",
      "-        bytes32 s",
      "-    ) external returns (uint256 amountToken, uint256 amountETH);",
      "-",
      "-    function swapExactTokensForTokens(",
      "-        uint256 amountIn,",
      "-        uint256 amountOutMin,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external returns (uint256[] memory amounts);",
      "-",
      "-    function swapTokensForExactTokens(",
      "-        uint256 amountOut,",
      "-        uint256 amountInMax,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external returns (uint256[] memory amounts);",
      "-",
      "-    function swapExactETHForTokens(",
      "-        uint256 amountOutMin,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external payable returns (uint256[] memory amounts);",
      "-",
      "-    function swapTokensForExactETH(",
      "-        uint256 amountOut,",
      "-        uint256 amountInMax,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external returns (uint256[] memory amounts);",
      "-",
      "-    function swapExactTokensForETH(",
      "-        uint256 amountIn,",
      "-        uint256 amountOutMin,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external returns (uint256[] memory amounts);",
      "-",
      "-    function swapETHForExactTokens(",
      "-        uint256 amountOut,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external payable returns (uint256[] memory amounts);",
      "-",
      "-    function quote(",
      "-        uint256 amountA,",
      "-        uint256 reserveA,",
      "-        uint256 reserveB",
      "-    ) external pure returns (uint256 amountB);",
      "-",
      "-    function getAmountOut(",
      "-        uint256 amountIn,",
      "-        uint256 reserveIn,",
      "-        uint256 reserveOut",
      "-    ) external pure returns (uint256 amountOut);",
      "-",
      "-    function getAmountIn(",
      "-        uint256 amountOut,",
      "-        uint256 reserveIn,",
      "-        uint256 reserveOut",
      "-    ) external pure returns (uint256 amountIn);",
      "-",
      "-    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);",
      "-",
      "-    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);",
      "-}",
      "-",
      "-interface IPancakeRouter02 is IPancakeRouter01 {",
      "-    function swapExactTokensForTokensSupportingFeeOnTransferTokens(",
      "-        uint256 amountIn,",
      "-        uint256 amountOutMin,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external;",
      "-",
      "-    function swapExactETHForTokensSupportingFeeOnTransferTokens(",
      "-        uint256 amountOutMin,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external payable;",
      "-",
      "-    function swapExactTokensForETHSupportingFeeOnTransferTokens(",
      "-        uint256 amountIn,",
      "-        uint256 amountOutMin,",
      "-        address[] calldata path,",
      "-        address to,",
      "-        uint256 deadline",
      "-    ) external;",
      "-}",
      "-// import \"./interfaces/IERC20Burnable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-pragma solidity 0.8.12;",
      "-",
      "-// import \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";",
      "-",
      "-interface IERC20Burnable is IERC20Upgradeable {",
      "-    function burn(uint256 _amount) external;",
      "-",
      "-    function burnFrom(address _account, uint256 _amount) external;",
      "-}",
      "-// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../utils/ContextUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-// import \"../proxy/utils/Initializable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)",
      "-",
      "-pragma solidity ^0.8.2;",
      "-",
      "-// import \"../../utils/AddressUpgradeable.sol\";",
      "-",
      "-/**",
      "- * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed",
      "- * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an",
      "- * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer",
      "- * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.",
      "- *",
      "- * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be",
      "- * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in",
      "- * case an upgrade adds a module that needs to be initialized.",
      "- *",
      "- * For example:",
      "- *",
      "- * [.hljs-theme-light.nopadding]",
      "- * ```",
      "- * contract MyToken is ERC20Upgradeable {",
      "- *     function initialize() initializer public {",
      "- *         __ERC20_init(\"MyToken\", \"MTK\");",
      "- *     }",
      "- * }",
      "- * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {",
      "- *     function initializeV2() reinitializer(2) public {",
      "- *         __ERC20Permit_init(\"MyToken\");",
      "- *     }",
      "- * }",
      "- * ```",
      "- *",
      "- * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as",
      "- * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.",
      "- *",
      "- * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure",
      "- * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.",
      "- *",
      "- * [CAUTION]",
      "- * ====",
      "- * Avoid leaving a contract uninitialized.",
      "- *",
      "- * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation",
      "- * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke",
      "- * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:",
      "- *",
      "- * [.hljs-theme-light.nopadding]",
      "- * ```",
      "- * /// @custom:oz-upgrades-unsafe-allow constructor",
      "- * constructor() {",
      "- *     _disableInitializers();",
      "- * }",
      "- * ```",
      "- * ====",
      "- */",
      "-abstract contract Initializable {",
      "-    /**",
      "-     * @dev Indicates that the contract has been initialized.",
      "-     * @custom:oz-retyped-from bool",
      "-     */",
      "-    uint8 private _initialized;",
      "-",
      "-    /**",
      "-     * @dev Indicates that the contract is in the process of being initialized.",
      "-     */",
      "-    bool private _initializing;",
      "-",
      "-    /**",
      "-     * @dev Triggered when the contract has been initialized or reinitialized.",
      "-     */",
      "-    event Initialized(uint8 version);",
      "-",
      "-    /**",
      "-     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,",
      "-     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.",
      "-     */",
      "-    modifier initializer() {",
      "-        bool isTopLevelCall = _setInitializedVersion(1);",
      "-        if (isTopLevelCall) {",
      "-            _initializing = true;",
      "-        }",
      "-        _;",
      "-        if (isTopLevelCall) {",
      "-            _initializing = false;",
      "-            emit Initialized(1);",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the",
      "-     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be",
      "-     * used to initialize parent contracts.",
      "-     *",
      "-     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original",
      "-     * initialization step. This is essential to configure modules that are added through upgrades and that require",
      "-     * initialization.",
      "-     *",
      "-     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in",
      "-     * a contract, executing them in the right order is up to the developer or operator.",
      "-     */",
      "-    modifier reinitializer(uint8 version) {",
      "-        bool isTopLevelCall = _setInitializedVersion(version);",
      "-        if (isTopLevelCall) {",
      "-            _initializing = true;",
      "-        }",
      "-        _;",
      "-        if (isTopLevelCall) {",
      "-            _initializing = false;",
      "-            emit Initialized(version);",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the",
      "-     * {initializer} and {reinitializer} modifiers, directly or indirectly.",
      "-     */",
      "-    modifier onlyInitializing() {",
      "-        require(_initializing, \"Initializable: contract is not initializing\");",
      "-        _;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.",
      "-     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized",
      "-     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called",
      "-     * through proxies.",
      "-     */",
      "-    function _disableInitializers() internal virtual {",
      "-        _setInitializedVersion(type(uint8).max);",
      "-    }",
      "-",
      "-    function _setInitializedVersion(uint8 version) private returns (bool) {",
      "-        // If the contract is initializing we ignore whether _initialized is set in order to support multiple",
      "-        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level",
      "-        // of initializers, because in other contexts the contract may have been reentered.",
      "-        if (_initializing) {",
      "-            require(",
      "-                version == 1 && !AddressUpgradeable.isContract(address(this)),",
      "-                \"Initializable: contract is already initialized\"",
      "-            );",
      "-            return false;",
      "-        } else {",
      "-            require(_initialized < version, \"Initializable: contract is already initialized\");",
      "-            _initialized = version;",
      "-            return true;",
      "-        }",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @dev Provides information about the current execution context, including the",
      "- * sender of the transaction and its data. While these are generally available",
      "- * via msg.sender and msg.data, they should not be accessed in such a direct",
      "- * manner, since when dealing with meta-transactions the account sending and",
      "- * paying for execution may not be the actual sender (as far as an application",
      "- * is concerned).",
      "- *",
      "- * This contract is only required for intermediate, library-like contracts.",
      "- */",
      "-abstract contract ContextUpgradeable is Initializable {",
      "-    function __Context_init() internal onlyInitializing {",
      "-    }",
      "-",
      "-    function __Context_init_unchained() internal onlyInitializing {",
      "-    }",
      "-    function _msgSender() internal view virtual returns (address) {",
      "-        return msg.sender;",
      "-    }",
      "-",
      "-    function _msgData() internal view virtual returns (bytes calldata) {",
      "-        return msg.data;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev This empty reserved space is put in place to allow future versions to add new",
      "-     * variables without shifting down storage in the inheritance chain.",
      "-     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps",
      "-     */",
      "-    uint256[50] private __gap;",
      "-}",
      "-// import \"../proxy/utils/Initializable.sol\";",
      "-",
      "-/**",
      "- * @dev Contract module which provides a basic access control mechanism, where",
      "- * there is an account (an owner) that can be granted exclusive access to",
      "- * specific functions.",
      "- *",
      "- * By default, the owner account will be the one that deploys the contract. This",
      "- * can later be changed with {transferOwnership}.",
      "- *",
      "- * This module is used through inheritance. It will make available the modifier",
      "- * `onlyOwner`, which can be applied to your functions to restrict their use to",
      "- * the owner.",
      "- */",
      "-abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {",
      "-    address private _owner;",
      "-",
      "-    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);",
      "-",
      "-    /**",
      "-     * @dev Initializes the contract setting the deployer as the initial owner.",
      "-     */",
      "-    function __Ownable_init() internal onlyInitializing {",
      "-        __Ownable_init_unchained();",
      "-    }",
      "-",
      "-    function __Ownable_init_unchained() internal onlyInitializing {",
      "-        _transferOwnership(_msgSender());",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the address of the current owner.",
      "-     */",
      "-    function owner() public view virtual returns (address) {",
      "-        return _owner;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Throws if called by any account other than the owner.",
      "-     */",
      "-    modifier onlyOwner() {",
      "-        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");",
      "-        _;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Leaves the contract without owner. It will not be possible to call",
      "-     * `onlyOwner` functions anymore. Can only be called by the current owner.",
      "-     *",
      "-     * NOTE: Renouncing ownership will leave the contract without an owner,",
      "-     * thereby removing any functionality that is only available to the owner.",
      "-     */",
      "-    function renounceOwnership() public virtual onlyOwner {",
      "-        _transferOwnership(address(0));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
      "-     * Can only be called by the current owner.",
      "-     */",
      "-    function transferOwnership(address newOwner) public virtual onlyOwner {",
      "-        require(newOwner != address(0), \"Ownable: new owner is the zero address\");",
      "-        _transferOwnership(newOwner);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
      "-     * Internal function without access restriction.",
      "-     */",
      "-    function _transferOwnership(address newOwner) internal virtual {",
      "-        address oldOwner = _owner;",
      "-        _owner = newOwner;",
      "-        emit OwnershipTransferred(oldOwner, newOwner);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev This empty reserved space is put in place to allow future versions to add new",
      "-     * variables without shifting down storage in the inheritance chain.",
      "-     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps",
      "-     */",
      "-    uint256[49] private __gap;",
      "-}",
      "-// import \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-// import \"../proxy/utils/Initializable.sol\";",
      "-",
      "-/**",
      "- * @dev Contract module that helps prevent reentrant calls to a function.",
      "- *",
      "- * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier",
      "- * available, which can be applied to functions to make sure there are no nested",
      "- * (reentrant) calls to them.",
      "- *",
      "- * Note that because there is a single `nonReentrant` guard, functions marked as",
      "- * `nonReentrant` may not call one another. This can be worked around by making",
      "- * those functions `private`, and then adding `external` `nonReentrant` entry",
      "- * points to them.",
      "- *",
      "- * TIP: If you would like to learn more about reentrancy and alternative ways",
      "- * to protect against it, check out our blog post",
      "- * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
      "- */",
      "-abstract contract ReentrancyGuardUpgradeable is Initializable {",
      "-    // Booleans are more expensive than uint256 or any type that takes up a full",
      "-    // word because each write operation emits an extra SLOAD to first read the",
      "-    // slot's contents, replace the bits taken up by the boolean, and then write",
      "-    // back. This is the compiler's defense against contract upgrades and",
      "-    // pointer aliasing, and it cannot be disabled.",
      "-",
      "-    // The values being non-zero value makes deployment a bit more expensive,",
      "-    // but in exchange the refund on every call to nonReentrant will be lower in",
      "-    // amount. Since refunds are capped to a percentage of the total",
      "-    // transaction's gas, it is best to keep them low in cases like this one, to",
      "-    // increase the likelihood of the full refund coming into effect.",
      "-    uint256 private constant _NOT_ENTERED = 1;",
      "-    uint256 private constant _ENTERED = 2;",
      "-",
      "-    uint256 private _status;",
      "-",
      "-    function __ReentrancyGuard_init() internal onlyInitializing {",
      "-        __ReentrancyGuard_init_unchained();",
      "-    }",
      "-",
      "-    function __ReentrancyGuard_init_unchained() internal onlyInitializing {",
      "-        _status = _NOT_ENTERED;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Prevents a contract from calling itself, directly or indirectly.",
      "-     * Calling a `nonReentrant` function from another `nonReentrant`",
      "-     * function is not supported. It is possible to prevent this from happening",
      "-     * by making the `nonReentrant` function external, and making it call a",
      "-     * `private` function that does the actual work.",
      "-     */",
      "-    modifier nonReentrant() {",
      "-        // On the first call to nonReentrant, _notEntered will be true",
      "-        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");",
      "-",
      "-        // Any calls to nonReentrant after this point will fail",
      "-        _status = _ENTERED;",
      "-",
      "-        _;",
      "-",
      "-        // By storing the original value once again, a refund is triggered (see",
      "-        // https://eips.ethereum.org/EIPS/eip-2200)",
      "-        _status = _NOT_ENTERED;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev This empty reserved space is put in place to allow future versions to add new",
      "-     * variables without shifting down storage in the inheritance chain.",
      "-     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps",
      "-     */",
      "-    uint256[49] private __gap;",
      "-}",
      "-// import \"./interfaces/IPancakePair.sol\";",
      "-pragma solidity 0.8.12;",
      "-",
      "-interface IPancakePair {",
      "-    event Approval(address indexed owner, address indexed spender, uint value);",
      "-    event Transfer(address indexed from, address indexed to, uint value);",
      "-",
      "-    function name() external pure returns (string memory);",
      "-    function symbol() external pure returns (string memory);",
      "-    function decimals() external pure returns (uint8);",
      "-    function totalSupply() external view returns (uint);",
      "-    function balanceOf(address owner) external view returns (uint);",
      "-    function allowance(address owner, address spender) external view returns (uint);",
      "-",
      "-    function approve(address spender, uint value) external returns (bool);",
      "-    function transfer(address to, uint value) external returns (bool);",
      "-    function transferFrom(address from, address to, uint value) external returns (bool);",
      "-",
      "-    function DOMAIN_SEPARATOR() external view returns (bytes32);",
      "-    function PERMIT_TYPEHASH() external pure returns (bytes32);",
      "-    function nonces(address owner) external view returns (uint);",
      "-",
      "-    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;",
      "-",
      "-    event Mint(address indexed sender, uint amount0, uint amount1);",
      "-    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);",
      "-    event Swap(",
      "-        address indexed sender,",
      "-        uint amount0In,",
      "-        uint amount1In,",
      "-        uint amount0Out,",
      "-        uint amount1Out,",
      "-        address indexed to",
      "-    );",
      "-    event Sync(uint112 reserve0, uint112 reserve1);",
      "-",
      "-    function MINIMUM_LIQUIDITY() external pure returns (uint);",
      "-    function factory() external view returns (address);",
      "-    function token0() external view returns (address);",
      "-    function token1() external view returns (address);",
      "-    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);",
      "-    function price0CumulativeLast() external view returns (uint);",
      "-    function price1CumulativeLast() external view returns (uint);",
      "-    function kLast() external view returns (uint);",
      "-",
      "-    function mint(address to) external returns (uint liquidity);",
      "-    function burn(address to) external returns (uint amount0, uint amount1);",
      "-    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;",
      "-    function skim(address to) external;",
      "-    function sync() external;",
      "-",
      "-    function initialize(address, address) external;",
      "-}",
      "-// import \"./interfaces/IPancakeFactory.sol\";",
      "-pragma solidity 0.8.12;",
      "-",
      "-interface IPancakeFactory {",
      "-    event PairCreated(address indexed token0, address indexed token1, address pair, uint);",
      "-",
      "-    function feeTo() external view returns (address);",
      "-    function feeToSetter() external view returns (address);",
      "-",
      "-    function getPair(address tokenA, address tokenB) external view returns (address pair);",
      "-    function allPairs(uint) external view returns (address pair);",
      "-    function allPairsLength() external view returns (uint);",
      "-",
      "-    function createPair(address tokenA, address tokenB) external returns (address pair);",
      "-",
      "-    function setFeeTo(address) external;",
      "-    function setFeeToSetter(address) external;",
      "-}",
      "-// import \"@quant-finance/solidity-datetime/contracts/DateTime.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// ----------------------------------------------------------------------------",
      "-// DateTime Library v2.0",
      "-//",
      "-// A gas-efficient Solidity date and time library",
      "-//",
      "-// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary",
      "-//",
      "-// Tested date range 1970/01/01 to 2345/12/31",
      "-//",
      "-// Conventions:",
      "-// Unit      | Range         | Notes",
      "-// :-------- |:-------------:|:-----",
      "-// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC",
      "-// year      | 1970 ... 2345 |",
      "-// month     | 1 ... 12      |",
      "-// day       | 1 ... 31      |",
      "-// hour      | 0 ... 23      |",
      "-// minute    | 0 ... 59      |",
      "-// second    | 0 ... 59      |",
      "-// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday",
      "-//",
      "-//",
      "-// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.",
      "-// ----------------------------------------------------------------------------",
      "-",
      "-library DateTime {",
      "-    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;",
      "-    uint256 constant SECONDS_PER_HOUR = 60 * 60;",
      "-    uint256 constant SECONDS_PER_MINUTE = 60;",
      "-    int256 constant OFFSET19700101 = 2440588;",
      "-",
      "-    uint256 constant DOW_MON = 1;",
      "-    uint256 constant DOW_TUE = 2;",
      "-    uint256 constant DOW_WED = 3;",
      "-    uint256 constant DOW_THU = 4;",
      "-    uint256 constant DOW_FRI = 5;",
      "-    uint256 constant DOW_SAT = 6;",
      "-    uint256 constant DOW_SUN = 7;",
      "-",
      "-    // ------------------------------------------------------------------------",
      "-    // Calculate the number of days from 1970/01/01 to year/month/day using",
      "-    // the date conversion algorithm from",
      "-    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php",
      "-    // and subtracting the offset 2440588 so that 1970/01/01 is day 0",
      "-    //",
      "-    // days = day",
      "-    //      - 32075",
      "-    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4",
      "-    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12",
      "-    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4",
      "-    //      - offset",
      "-    // ------------------------------------------------------------------------",
      "-    function _daysFromDate(",
      "-        uint256 year,",
      "-        uint256 month,",
      "-        uint256 day",
      "-    ) internal pure returns (uint256 _days) {",
      "-        require(year >= 1970);",
      "-        int256 _year = int256(year);",
      "-        int256 _month = int256(month);",
      "-        int256 _day = int256(day);",
      "-",
      "-        int256 __days =",
      "-            _day -",
      "-                32075 +",
      "-                (1461 * (_year + 4800 + (_month - 14) / 12)) /",
      "-                4 +",
      "-                (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /",
      "-                12 -",
      "-                (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /",
      "-                4 -",
      "-                OFFSET19700101;",
      "-",
      "-        _days = uint256(__days);",
      "-    }",
      "-",
      "-    // ------------------------------------------------------------------------",
      "-    // Calculate year/month/day from the number of days since 1970/01/01 using",
      "-    // the date conversion algorithm from",
      "-    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php",
      "-    // and adding the offset 2440588 so that 1970/01/01 is day 0",
      "-    //",
      "-    // int L = days + 68569 + offset",
      "-    // int N = 4 * L / 146097",
      "-    // L = L - (146097 * N + 3) / 4",
      "-    // year = 4000 * (L + 1) / 1461001",
      "-    // L = L - 1461 * year / 4 + 31",
      "-    // month = 80 * L / 2447",
      "-    // dd = L - 2447 * month / 80",
      "-    // L = month / 11",
      "-    // month = month + 2 - 12 * L",
      "-    // year = 100 * (N - 49) + year + L",
      "-    // ------------------------------------------------------------------------",
      "-    function _daysToDate(uint256 _days)",
      "-        internal",
      "-        pure",
      "-        returns (",
      "-            uint256 year,",
      "-            uint256 month,",
      "-            uint256 day",
      "-        )",
      "-    {",
      "-        int256 __days = int256(_days);",
      "-",
      "-        int256 L = __days + 68569 + OFFSET19700101;",
      "-        int256 N = (4 * L) / 146097;",
      "-        L = L - (146097 * N + 3) / 4;",
      "-        int256 _year = (4000 * (L + 1)) / 1461001;",
      "-        L = L - (1461 * _year) / 4 + 31;",
      "-        int256 _month = (80 * L) / 2447;",
      "-        int256 _day = L - (2447 * _month) / 80;",
      "-        L = _month / 11;",
      "-        _month = _month + 2 - 12 * L;",
      "-        _year = 100 * (N - 49) + _year + L;",
      "-",
      "-        year = uint256(_year);",
      "-        month = uint256(_month);",
      "-        day = uint256(_day);",
      "-    }",
      "-",
      "-    function timestampFromDate(",
      "-        uint256 year,",
      "-        uint256 month,",
      "-        uint256 day",
      "-    ) internal pure returns (uint256 timestamp) {",
      "-        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;",
      "-    }",
      "-",
      "-    function timestampFromDateTime(",
      "-        uint256 year,",
      "-        uint256 month,",
      "-        uint256 day,",
      "-        uint256 hour,",
      "-        uint256 minute,",
      "-        uint256 second",
      "-    ) internal pure returns (uint256 timestamp) {",
      "-        timestamp =",
      "-            _daysFromDate(year, month, day) *",
      "-            SECONDS_PER_DAY +",
      "-            hour *",
      "-            SECONDS_PER_HOUR +",
      "-            minute *",
      "-            SECONDS_PER_MINUTE +",
      "-            second;",
      "-    }",
      "-",
      "-    function timestampToDate(uint256 timestamp)",
      "-        internal",
      "-        pure",
      "-        returns (",
      "-            uint256 year,",
      "-            uint256 month,",
      "-            uint256 day",
      "-        )",
      "-    {",
      "-        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-    }",
      "-",
      "-    function timestampToDateTime(uint256 timestamp)",
      "-        internal",
      "-        pure",
      "-        returns (",
      "-            uint256 year,",
      "-            uint256 month,",
      "-            uint256 day,",
      "-            uint256 hour,",
      "-            uint256 minute,",
      "-            uint256 second",
      "-        )",
      "-    {",
      "-        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-        uint256 secs = timestamp % SECONDS_PER_DAY;",
      "-        hour = secs / SECONDS_PER_HOUR;",
      "-        secs = secs % SECONDS_PER_HOUR;",
      "-        minute = secs / SECONDS_PER_MINUTE;",
      "-        second = secs % SECONDS_PER_MINUTE;",
      "-    }",
      "-",
      "-    function isValidDate(",
      "-        uint256 year,",
      "-        uint256 month,",
      "-        uint256 day",
      "-    ) internal pure returns (bool valid) {",
      "-        if (year >= 1970 && month > 0 && month <= 12) {",
      "-            uint256 daysInMonth = _getDaysInMonth(year, month);",
      "-            if (day > 0 && day <= daysInMonth) {",
      "-                valid = true;",
      "-            }",
      "-        }",
      "-    }",
      "-",
      "-    function isValidDateTime(",
      "-        uint256 year,",
      "-        uint256 month,",
      "-        uint256 day,",
      "-        uint256 hour,",
      "-        uint256 minute,",
      "-        uint256 second",
      "-    ) internal pure returns (bool valid) {",
      "-        if (isValidDate(year, month, day)) {",
      "-            if (hour < 24 && minute < 60 && second < 60) {",
      "-                valid = true;",
      "-            }",
      "-        }",
      "-    }",
      "-",
      "-    function isLeapYear(uint256 timestamp)",
      "-        internal",
      "-        pure",
      "-        returns (bool leapYear)",
      "-    {",
      "-        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-        leapYear = _isLeapYear(year);",
      "-    }",
      "-",
      "-    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {",
      "-        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);",
      "-    }",
      "-",
      "-    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {",
      "-        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;",
      "-    }",
      "-",
      "-    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {",
      "-        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;",
      "-    }",
      "-",
      "-    function getDaysInMonth(uint256 timestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 daysInMonth)",
      "-    {",
      "-        (uint256 year, uint256 month, ) =",
      "-            _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-        daysInMonth = _getDaysInMonth(year, month);",
      "-    }",
      "-",
      "-    function _getDaysInMonth(uint256 year, uint256 month)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 daysInMonth)",
      "-    {",
      "-        if (",
      "-            month == 1 ||",
      "-            month == 3 ||",
      "-            month == 5 ||",
      "-            month == 7 ||",
      "-            month == 8 ||",
      "-            month == 10 ||",
      "-            month == 12",
      "-        ) {",
      "-            daysInMonth = 31;",
      "-        } else if (month != 2) {",
      "-            daysInMonth = 30;",
      "-        } else {",
      "-            daysInMonth = _isLeapYear(year) ? 29 : 28;",
      "-        }",
      "-    }",
      "-",
      "-    // 1 = Monday, 7 = Sunday",
      "-    function getDayOfWeek(uint256 timestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 dayOfWeek)",
      "-    {",
      "-        uint256 _days = timestamp / SECONDS_PER_DAY;",
      "-        dayOfWeek = ((_days + 3) % 7) + 1;",
      "-    }",
      "-",
      "-    function getYear(uint256 timestamp) internal pure returns (uint256 year) {",
      "-        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-    }",
      "-",
      "-    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {",
      "-        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-    }",
      "-",
      "-    function getDay(uint256 timestamp) internal pure returns (uint256 day) {",
      "-        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-    }",
      "-",
      "-    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {",
      "-        uint256 secs = timestamp % SECONDS_PER_DAY;",
      "-        hour = secs / SECONDS_PER_HOUR;",
      "-    }",
      "-",
      "-    function getMinute(uint256 timestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 minute)",
      "-    {",
      "-        uint256 secs = timestamp % SECONDS_PER_HOUR;",
      "-        minute = secs / SECONDS_PER_MINUTE;",
      "-    }",
      "-",
      "-    function getSecond(uint256 timestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 second)",
      "-    {",
      "-        second = timestamp % SECONDS_PER_MINUTE;",
      "-    }",
      "-",
      "-    function addYears(uint256 timestamp, uint256 _years)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        (uint256 year, uint256 month, uint256 day) =",
      "-            _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-        year += _years;",
      "-        uint256 daysInMonth = _getDaysInMonth(year, month);",
      "-        if (day > daysInMonth) {",
      "-            day = daysInMonth;",
      "-        }",
      "-        newTimestamp =",
      "-            _daysFromDate(year, month, day) *",
      "-            SECONDS_PER_DAY +",
      "-            (timestamp % SECONDS_PER_DAY);",
      "-        require(newTimestamp >= timestamp);",
      "-    }",
      "-",
      "-    function addMonths(uint256 timestamp, uint256 _months)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        (uint256 year, uint256 month, uint256 day) =",
      "-            _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-        month += _months;",
      "-        year += (month - 1) / 12;",
      "-        month = ((month - 1) % 12) + 1;",
      "-        uint256 daysInMonth = _getDaysInMonth(year, month);",
      "-        if (day > daysInMonth) {",
      "-            day = daysInMonth;",
      "-        }",
      "-        newTimestamp =",
      "-            _daysFromDate(year, month, day) *",
      "-            SECONDS_PER_DAY +",
      "-            (timestamp % SECONDS_PER_DAY);",
      "-        require(newTimestamp >= timestamp);",
      "-    }",
      "-",
      "-    function addDays(uint256 timestamp, uint256 _days)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        newTimestamp = timestamp + _days * SECONDS_PER_DAY;",
      "-        require(newTimestamp >= timestamp);",
      "-    }",
      "-",
      "-    function addHours(uint256 timestamp, uint256 _hours)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;",
      "-        require(newTimestamp >= timestamp);",
      "-    }",
      "-",
      "-    function addMinutes(uint256 timestamp, uint256 _minutes)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;",
      "-        require(newTimestamp >= timestamp);",
      "-    }",
      "-",
      "-    function addSeconds(uint256 timestamp, uint256 _seconds)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        newTimestamp = timestamp + _seconds;",
      "-        require(newTimestamp >= timestamp);",
      "-    }",
      "-",
      "-    function subYears(uint256 timestamp, uint256 _years)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        (uint256 year, uint256 month, uint256 day) =",
      "-            _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-        year -= _years;",
      "-        uint256 daysInMonth = _getDaysInMonth(year, month);",
      "-        if (day > daysInMonth) {",
      "-            day = daysInMonth;",
      "-        }",
      "-        newTimestamp =",
      "-            _daysFromDate(year, month, day) *",
      "-            SECONDS_PER_DAY +",
      "-            (timestamp % SECONDS_PER_DAY);",
      "-        require(newTimestamp <= timestamp);",
      "-    }",
      "-",
      "-    function subMonths(uint256 timestamp, uint256 _months)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        (uint256 year, uint256 month, uint256 day) =",
      "-            _daysToDate(timestamp / SECONDS_PER_DAY);",
      "-        uint256 yearMonth = year * 12 + (month - 1) - _months;",
      "-        year = yearMonth / 12;",
      "-        month = (yearMonth % 12) + 1;",
      "-        uint256 daysInMonth = _getDaysInMonth(year, month);",
      "-        if (day > daysInMonth) {",
      "-            day = daysInMonth;",
      "-        }",
      "-        newTimestamp =",
      "-            _daysFromDate(year, month, day) *",
      "-            SECONDS_PER_DAY +",
      "-            (timestamp % SECONDS_PER_DAY);",
      "-        require(newTimestamp <= timestamp);",
      "-    }",
      "-",
      "-    function subDays(uint256 timestamp, uint256 _days)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        newTimestamp = timestamp - _days * SECONDS_PER_DAY;",
      "-        require(newTimestamp <= timestamp);",
      "-    }",
      "-",
      "-    function subHours(uint256 timestamp, uint256 _hours)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;",
      "-        require(newTimestamp <= timestamp);",
      "-    }",
      "-",
      "-    function subMinutes(uint256 timestamp, uint256 _minutes)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;",
      "-        require(newTimestamp <= timestamp);",
      "-    }",
      "-",
      "-    function subSeconds(uint256 timestamp, uint256 _seconds)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 newTimestamp)",
      "-    {",
      "-        newTimestamp = timestamp - _seconds;",
      "-        require(newTimestamp <= timestamp);",
      "-    }",
      "-",
      "-    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 _years)",
      "-    {",
      "-        require(fromTimestamp <= toTimestamp);",
      "-        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);",
      "-        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);",
      "-        _years = toYear - fromYear;",
      "-    }",
      "-",
      "-    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 _months)",
      "-    {",
      "-        require(fromTimestamp <= toTimestamp);",
      "-        (uint256 fromYear, uint256 fromMonth, ) =",
      "-            _daysToDate(fromTimestamp / SECONDS_PER_DAY);",
      "-        (uint256 toYear, uint256 toMonth, ) =",
      "-            _daysToDate(toTimestamp / SECONDS_PER_DAY);",
      "-        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;",
      "-    }",
      "-",
      "-    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 _days)",
      "-    {",
      "-        require(fromTimestamp <= toTimestamp);",
      "-        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;",
      "-    }",
      "-",
      "-    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 _hours)",
      "-    {",
      "-        require(fromTimestamp <= toTimestamp);",
      "-        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;",
      "-    }",
      "-",
      "-    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 _minutes)",
      "-    {",
      "-        require(fromTimestamp <= toTimestamp);",
      "-        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;",
      "-    }",
      "-",
      "-    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)",
      "-        internal",
      "-        pure",
      "-        returns (uint256 _seconds)",
      "-    {",
      "-        require(fromTimestamp <= toTimestamp);",
      "-        _seconds = toTimestamp - fromTimestamp;",
      "-    }",
      "-}",
      "-/* preserved Line */",
      "-/* preserved Line */",
      "-/* preserved Line */",
      "-/* preserved Line */",
      "-/* preserved Line */",
      "-",
      "-/**",
      "- * @notice GymSinglePool contract:",
      "- * - Users can:",
      "- *   # Deposit GYMNET",
      "- *   # Withdraw assets",
      "- */",
      "-",
      "-contract GymSinglePool is ReentrancyGuardUpgradeable, OwnableUpgradeable {",
      "-    using SafeERC20Upgradeable for IERC20Upgradeable;",
      "-",
      "-   /**",
      "-     * @notice Info of each user",
      "-     * One Address can have many Deposits with different periods. Unlimited Amount.",
      "-     * Total Depsit Tokens = Total amount of user active stake in all.",
      "-     * Total Depsit Dollar Value = Total Dollar Value over all staking single pools. Calculated when user deposits tokens, and dollar value is for that exact moment rate.",
      "-     * level = level qualification for this pool. Used internally, for global qualification please check MLM Contract.",
      "-     * depositId = incremental ID of deposits, eg. if user has 3 stakings then this value will be 2;",
      "-     * totalClaimt = Total amount of tokens user claimt.",
      "-     */",
      "-    struct UserInfo {",
      "-        uint256 totalDepositTokens;",
      "-        uint256 totalDepositDollarValue;",
      "-        uint256 level;",
      "-        uint256 depositId;",
      "-        uint256 totalClaimt;",
      "-    }",
      "-",
      "-   /**",
      "-     * @notice Info for each staking by ID",
      "-     * One Address can have many Deposits with different periods. Unlimited Amount.",
      "-     * depositTokens = amount of tokens for exact deposit.",
      "-     * depositDollarValue = Dollar value of deposit.",
      "-     * stakePeriod = Locking Period - from 3 months to 30 months. value is integer",
      "-     * depositTimestamp = timestamp of deposit",
      "-     * withdrawalTimestamp = Timestamp when user can withdraw his locked tokens",
      "-     * rewardsGained = amount of rewards user has gained during the process",
      "-     * is_finished = checks if user has already withdrawn tokens",
      "-     */",
      "-    struct UserDeposits {",
      "-        uint256 depositTokens;",
      "-        uint256 depositDollarValue;",
      "-        uint256 stakePeriod;",
      "-        uint256 depositTimestamp;",
      "-        uint256 withdrawalTimestamp;",
      "-        uint256 rewardsGained;",
      "-        uint256 rewardsClaimt;",
      "-        uint256 rewardDebt;",
      "-        bool is_finished;",
      "-    }",
      "-    /**",
      "-     * @notice Info of Pool",
      "-     * @param lastRewardBlock: Last block number that reward distribution occurs",
      "-     * @param accUTacoPerShare: Accumulated rewardPool per share, times 1e18",
      "-     * @param rewardPerBlock: How many reward tokens will user get per block",
      "-     */",
      "-    struct PoolInfo {",
      "-        uint256 lastRewardBlock;",
      "-        uint256 accRewardPerShare;",
      "-        uint256 rewardPerBlock;",
      "-    }",
      "-",
      "-    /// Startblock number",
      "-    uint256 public startBlock;",
      "-    uint256 public withdrawFee;",
      "-",
      "-     // MLM Contract - RelationShip address",
      "-    address public relationship;",
      "-    /// Treasury address where will be sent all unused assets",
      "-    address public treasuryAddress;",
      "-    /// Info of pool.",
      "-    PoolInfo public poolInfo;",
      "-    /// Info of each user that staked tokens.",
      "-    mapping(address => UserInfo) public userInfo;",
      "-",
      "-    /// accepts user address and id of element to select - returns information about selected staking by id",
      "-    mapping (address=>UserDeposits[]) public user_deposits;",
      "-",
      "-    uint256 private lastChangeBlock;",
      "-",
      "-    /// GYMNET token contract address",
      "-    address public tokenAddress;",
      "-",
      "-    /// address of pancake Router",
      "-    address public pancakeRouterAddress;",
      "-    /// WBNB and BUSD Token Pair address, element 0 = Address of WBNB Token, element 1= Address of GYMNET",
      "-    address[] public wbnbAndUSDTTokenArray;",
      "-    /// GYMNET and WBNB Token Pair address, element 0 = Address of GYMNET, element 1 = Address of WBNB Token,",
      "-    address[] public GymWBNBPair;",
      "-",
      "-    /// Level Qualifications for the pool",
      "-    uint256[16] public levels;",
      "-    /// Locking Periods",
      "-    uint256[6] public months;",
      "-",
      "-    /// Amount of Total GYMNET Locked in the pool",
      "-    uint256 public totalGymnetLocked;",
      "-",
      "-    /// Amount of GYMNET all users has claimt over time.",
      "-    uint256 public totalClaimtInPool;",
      "-",
      "-    /// Percent that will be sent to MLM Contract for comission distribution",
      "-    uint256 public RELATIONSHIP_REWARD;",
      "-",
      "-    /// 6% comissions",
      "-    uint256 public poolRewardsAmount;",
      "-",
      "-    address public holderRewardContractAddress;",
      "-",
      "-    address public runnerScriptAddress;",
      "-    uint256 public totalBurntInSinglePool;",
      "-    bool public isPoolActive;",
      "-    bool public isInMigrationToVTwo;",
      "-    uint256 public totalGymnetUnlocked;",
      "-    uint256 public unlockedTimestampQualification;",
      "-    address public vaultContractAddress;",
      "-    address public farmingContractAddress;",
      "-    /* ========== EVENTS ========== */",
      "-",
      "-    event Initialized(address indexed executor, uint256 at);",
      "-    event Deposit(address indexed user, uint256 amount,uint indexed period);",
      "-    event Withdraw(address indexed user, uint256 amount,uint indexed period);",
      "-    event RewardPaid(address indexed token, address indexed user, uint256 amount);",
      "-    event ClaimUserReward(address indexed user, uint256 amount);",
      "-",
      "-",
      "-    modifier onlyRunnerScript() {",
      "-        require(msg.sender == runnerScriptAddress || msg.sender == owner(), \"Only Runner Script\");",
      "-        _;",
      "-    }",
      "-    modifier onlyBank() {",
      "-        require(msg.sender == vaultContractAddress, \"GymFarming:: Only bank\");",
      "-        _;",
      "-    }",
      "-    receive() external payable {}",
      "-",
      "-    fallback() external payable {}",
      "-",
      "-// all initialize parameters are mandatory",
      "-    function initialize(",
      "-        uint256 _startBlock,",
      "-        address _gym,",
      "-        address _mlm,",
      "-        uint256 _gymRewardRate,",
      "-        address _pancakeRouterAddress,",
      "-        address[] memory _wbnbAndUSDTTokenArray,",
      "-        address[] memory _GymWBNBPair",
      "-    ) external initializer {",
      "-        require(block.number < _startBlock, \"SinglePool: Start block must have a bigger value\");",
      "-",
      "-        startBlock = _startBlock; // Number of Upcoming Block",
      "-        relationship = _mlm;  // address of MLM contract",
      "-        tokenAddress = _gym; // address of GYMNET Contract",
      "-        pancakeRouterAddress = _pancakeRouterAddress; // Address of Pancake Router",
      "-        wbnbAndUSDTTokenArray = _wbnbAndUSDTTokenArray; // WBNB And USDT Token Addresses [WBNB,USDT]",
      "-        GymWBNBPair = _GymWBNBPair; // GYMNET And WBNB Token Addresses [GYMNET,WBNB]",
      "-        runnerScriptAddress = msg.sender;",
      "-        isPoolActive = false;",
      "-        isInMigrationToVTwo = false;",
      "-        RELATIONSHIP_REWARD = 39; // Relationship commission amount",
      "-        levels = [0, 0, 200, 200, 2000, 4000, 10000, 20000, 40000, 45000, 50000, 60000, 65000, 70000, 75000, 80000]; // Internal Pool Levels",
      "-        months = [3, 6, 12, 18, 24, 30]; // Locking Periods",
      "-",
      "-        poolInfo = PoolInfo({",
      "-                lastRewardBlock: _startBlock,",
      "-                rewardPerBlock: _gymRewardRate,",
      "-                accRewardPerShare: 0",
      "-            });",
      "-",
      "-        lastChangeBlock = _startBlock;",
      "-",
      "-        __Ownable_init();",
      "-        __ReentrancyGuard_init();",
      "-",
      "-        emit Initialized(msg.sender, block.number);",
      "-    }",
      "-",
      "-",
      "-    function setPoolInfo(uint256 lastRewardBlock,uint256 accRewardPerShare, uint256 rewardPerBlock) external onlyOwner {",
      "-        poolInfo = PoolInfo({",
      "-                lastRewardBlock: lastRewardBlock,",
      "-                accRewardPerShare: accRewardPerShare,",
      "-                rewardPerBlock: rewardPerBlock",
      "-            });",
      "-    }",
      "-",
      "-    function updateStartBlock(uint256 _startBlock) external onlyOwner {",
      "-        startBlock = _startBlock;",
      "-    }",
      "-",
      "-    function setMLMAddress(address _relationship) external onlyOwner {",
      "-        relationship = _relationship;",
      "-    }",
      "-",
      "-    function setTokenAddress(address _tokenAddress) external onlyOwner {",
      "-        tokenAddress = _tokenAddress;",
      "-    }",
      "-    function setVaultContractAddress(address _vaultContractAddress) external onlyOwner {",
      "-        vaultContractAddress = _vaultContractAddress;",
      "-    }",
      "-    function setFarmingContractAddress(address _farmingContractAddress) external onlyOwner {",
      "-        farmingContractAddress = _farmingContractAddress;",
      "-    }",
      "-",
      "-    function setRelationshipReward(uint256 _amount) external onlyOwner {",
      "-        RELATIONSHIP_REWARD = _amount;",
      "-    }",
      "-    function setOnlyRunnerScript(address _onlyRunnerScript) external onlyOwner {",
      "-        runnerScriptAddress = _onlyRunnerScript;",
      "-    }",
      "-",
      "-    function setGymWBNBPair(address[] memory  _GymWBNBPair) external onlyOwner {",
      "-        GymWBNBPair = _GymWBNBPair;",
      "-    }",
      "-    function setPancakeRouterAddress(address _pancakeRouterAddress) external onlyOwner {",
      "-        pancakeRouterAddress = _pancakeRouterAddress;",
      "-    }",
      "-",
      "-    function setIsPoolActive(bool _isPoolActive) external onlyOwner {",
      "-        isPoolActive = _isPoolActive;",
      "-    }",
      "-    function setIsInMigrationToVTwo(bool _isInMigrationToVTwo) external onlyOwner {",
      "-        isInMigrationToVTwo = _isInMigrationToVTwo;",
      "-    }",
      "-",
      "-    function setHolderRewardContractAddress(address _holderRewardContractAddress) external onlyOwner {",
      "-        holderRewardContractAddress = _holderRewardContractAddress;",
      "-    }",
      "-",
      "-",
      "-    function setWbnbAndUSDTTokenArray(address[] memory _wbnbAndUSDTTokenArray) external onlyOwner {",
      "-        wbnbAndUSDTTokenArray = _wbnbAndUSDTTokenArray;",
      "-    }",
      "-    function setUnlockedTimestampQualification(uint256 _unlockedTimestampQualification) external onlyOwner {",
      "-        unlockedTimestampQualification = _unlockedTimestampQualification;",
      "-    }",
      "-    function setLevels(uint256[16] calldata _levels) external onlyOwner {",
      "-        levels = _levels;",
      "-    }",
      "-",
      "-     /**",
      "-     * @notice  Function to set Treasury address",
      "-     * @param _treasuryAddress Address of treasury address",
      "-     */",
      "-    function setTreasuryAddress(address _treasuryAddress) external nonReentrant onlyOwner {",
      "-        treasuryAddress = _treasuryAddress;",
      "-    }",
      "-",
      "-    /**",
      "-     * @notice Deposit in given pool",
      "-     * @param _depositAmount: Amount of want token that user wants to deposit",
      "-     */",
      "-    function deposit(",
      "-        uint256 _depositAmount,",
      "-        uint8 _periodId,",
      "-        uint256 _referrerId,",
      "-        bool isUnlocked",
      "-    ) external  {",
      "-        require(isPoolActive,'Contract is not running yet');",
      "-        IGymMLM(relationship).addGymMLM(msg.sender, _referrerId);",
      "-        _deposit(_depositAmount,_periodId,isUnlocked);",
      "-    }",
      "-    /**",
      "-     * @notice Deposit in given pool",
      "-     * @param _depositAmount: Amount of want token that user wants to deposit",
      "-     */",
      "-    function depositFromOtherContract(",
      "-        uint256 _depositAmount,",
      "-        uint8 _periodId,",
      "-        bool isUnlocked,",
      "-        address _from",
      "-    ) external  {",
      "-        require(isPoolActive,'Contract is not running yet');",
      "-        _autoDeposit(_depositAmount,_periodId,isUnlocked,_from);",
      "-    }",
      "-",
      "-    /**",
      "-     * @notice To get User level in other contract for single pool.",
      "-     * @param _user: User address",
      "-     */",
      "-    function getUserLevelInSinglePool(address _user) external view returns (uint32) {",
      "-        uint256 _totalDepositDollarValue = userInfo[_user].totalDepositDollarValue;",
      "-        uint32 level = 0;",
      "-        for (uint32 i = 0; i<levels.length ; i++) {",
      "-            if(_totalDepositDollarValue >= levels[i]) {",
      "-                level=i;",
      "-            }",
      "-        }",
      "-        return level;",
      "-    }",
      "-",
      "-    /**",
      "-    Should approve allowance before initiating",
      "-    accepts depositAmount in WEI",
      "-    periodID - id of months array accordingly",
      "-    */",
      "-    function _deposit(",
      "-        uint256 _depositAmount,",
      "-        uint8 _periodId,",
      "-        bool _isUnlocked",
      "-    ) private {",
      "-        UserInfo storage user = userInfo[msg.sender];",
      "-        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);",
      "-        PoolInfo storage pool = poolInfo;",
      "-        updatePool();",
      "-",
      "-        uint256 period = months[_periodId];",
      "-        uint256 lockTimesamp = DateTime.addMonths(block.timestamp,months[_periodId]);",
      "-        uint256 burnTokensAmount = 0;",
      "-",
      "-        if(!_isUnlocked) {",
      "-            burnTokensAmount = (_depositAmount * 4) / 100;",
      "-            totalBurntInSinglePool += burnTokensAmount;",
      "-            IERC20Burnable(tokenAddress).burnFrom(msg.sender,burnTokensAmount);",
      "-        }",
      "-",
      "-",
      "-        uint256 amountToDeposit = _depositAmount - burnTokensAmount;",
      "-",
      "-        token.safeTransferFrom(msg.sender, address(this), amountToDeposit);",
      "-        uint256 UsdValueOfGym = ((amountToDeposit * getPrice())/1e18) / 1e18;",
      "-",
      "-        user.totalDepositTokens += amountToDeposit;",
      "-        user.totalDepositDollarValue += UsdValueOfGym;",
      "-        totalGymnetLocked += amountToDeposit;",
      "-        if(_isUnlocked) {",
      "-            totalGymnetUnlocked += amountToDeposit;",
      "-            period = 0;",
      "-            lockTimesamp = DateTime.addSeconds(block.timestamp,months[_periodId]);",
      "-        }",
      "-",
      "-        uint256 rewardDebt = (amountToDeposit * (pool.accRewardPerShare)) / (1e18);",
      "-        UserDeposits memory depositDetails = UserDeposits(",
      "-            {",
      "-                depositTokens: amountToDeposit,",
      "-                depositDollarValue: UsdValueOfGym,",
      "-                stakePeriod: period,",
      "-                depositTimestamp: block.timestamp,",
      "-                withdrawalTimestamp: lockTimesamp,",
      "-                rewardsGained: 0,",
      "-                is_finished: false,",
      "-                rewardsClaimt: 0,",
      "-                rewardDebt: rewardDebt",
      "-            }",
      "-        );",
      "-",
      "-        user_deposits[msg.sender].push(depositDetails);",
      "-        user.depositId = user_deposits[msg.sender].length;",
      "-",
      "-",
      "-       for (uint i = 0; i<levels.length ; i++) {",
      "-            if(user.totalDepositDollarValue >= levels[i]) {",
      "-                user.level=i;",
      "-            }",
      "-        }",
      "-",
      "-        emit Deposit(msg.sender, _depositAmount,_periodId);",
      "-    }",
      "-",
      "-     /**",
      "-    Should approve allowance before initiating",
      "-    accepts depositAmount in WEI",
      "-    periodID - id of months array accordingly",
      "-    */",
      "-    function _autoDeposit(",
      "-        uint256 _depositAmount,",
      "-        uint8 _periodId,",
      "-        bool _isUnlocked,",
      "-        address _from",
      "-    ) private {",
      "-        UserInfo storage user = userInfo[_from];",
      "-        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);",
      "-        PoolInfo storage pool = poolInfo;",
      "-        token.approve(address(this), _depositAmount);",
      "-        updatePool();",
      "-        uint256 period = months[_periodId];",
      "-        uint256 lockTimesamp = DateTime.addMonths(block.timestamp,months[_periodId]);",
      "-        uint256 burnTokensAmount = 0;",
      "-        // if(!_isUnlocked) {",
      "-        //     uint256 burnTokensAmount = (_depositAmount * 4) / 100;",
      "-        //     totalBurntInSinglePool += burnTokensAmount;",
      "-        //     IERC20Burnable(tokenAddress).burnFrom(msg.sender,burnTokensAmount);",
      "-        // }",
      "-        uint256 amountToDeposit = _depositAmount - burnTokensAmount;",
      "-        uint256 UsdValueOfGym = ((amountToDeposit * getPrice())/1e18) / 1e18;",
      "-",
      "-        user.totalDepositTokens += amountToDeposit;",
      "-        user.totalDepositDollarValue += UsdValueOfGym;",
      "-        totalGymnetLocked += amountToDeposit;",
      "-        if(_isUnlocked) {",
      "-            totalGymnetUnlocked += amountToDeposit;",
      "-            period = 0;",
      "-            lockTimesamp = DateTime.addSeconds(block.timestamp,months[_periodId]);",
      "-        }",
      "-",
      "-        uint256 rewardDebt = (amountToDeposit * (pool.accRewardPerShare)) / (1e18);",
      "-        UserDeposits memory depositDetails = UserDeposits(",
      "-            {",
      "-                depositTokens: amountToDeposit,",
      "-                depositDollarValue: UsdValueOfGym,",
      "-                stakePeriod: period,",
      "-                depositTimestamp: block.timestamp,",
      "-                withdrawalTimestamp: lockTimesamp,",
      "-                rewardsGained: 0,",
      "-                is_finished: false,",
      "-                rewardsClaimt: 0,",
      "-                rewardDebt: rewardDebt",
      "-            }",
      "-        );",
      "-        user_deposits[_from].push(depositDetails);",
      "-        user.depositId = user_deposits[_from].length;",
      "-",
      "-        emit Deposit(_from, amountToDeposit,_periodId);",
      "-    }",
      "-",
      "-     /**",
      "-     * Returns the latest price",
      "-     */",
      "-    function getPrice () public view returns (uint) {",
      "-        uint256[] memory gymPriceInUSD = IPancakeRouter02(pancakeRouterAddress).getAmountsOut(1000000000000000000,GymWBNBPair);",
      "-        uint256[] memory BNBPriceInUSD = IPancakeRouter02(pancakeRouterAddress).getAmountsOut(1, wbnbAndUSDTTokenArray);",
      "-        return gymPriceInUSD[1] * BNBPriceInUSD[1];",
      "-    }",
      "-",
      "-",
      "-    /**",
      "-     * @notice withdraw one claim",
      "-     * @param _depositId: is the id of user element.",
      "-     */",
      "-    function withdraw(",
      "-        uint256 _depositId",
      "-    ) external  {",
      "-        require(_depositId >= 0, \"Value is not specified\");",
      "-        updatePool();",
      "-        _withdraw(_depositId);",
      "-    }",
      "-",
      "-    /**",
      "-    Should approve allowance before initiating",
      "-    accepts _depositId - is the id of user element.",
      "-    */",
      "-    function _withdraw(",
      "-            uint256 _depositId",
      "-        ) private {",
      "-            UserInfo storage user = userInfo[msg.sender];",
      "-            IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);",
      "-            PoolInfo storage pool = poolInfo;",
      "-            UserDeposits storage depositDetails = user_deposits[msg.sender][_depositId];",
      "-            if(!isInMigrationToVTwo) {",
      "-                require(block.timestamp > depositDetails.withdrawalTimestamp,\"Locking Period isn't over yet.\");",
      "-            }",
      "-            require(!depositDetails.is_finished,\"You already withdrawn your deposit.\");",
      "-",
      "-            _claim(_depositId,1);",
      "-            depositDetails.rewardDebt = (depositDetails.depositTokens * (pool.accRewardPerShare)) / (1e18);",
      "-",
      "-            user.totalDepositTokens -=  depositDetails.depositTokens;",
      "-            user.totalDepositDollarValue -=  depositDetails.depositDollarValue;",
      "-            totalGymnetLocked -= depositDetails.depositTokens;",
      "-            if(depositDetails.stakePeriod == 0) {",
      "-                totalGymnetUnlocked -= depositDetails.depositTokens;",
      "-            }",
      "-",
      "-            token.safeTransferFrom(address(this),msg.sender, depositDetails.depositTokens);",
      "-",
      "-            for (uint i = 0; i<levels.length ; i++) {",
      "-                if(user.totalDepositDollarValue >= levels[i]) {",
      "-                    user.level=i;",
      "-                }",
      "-            }",
      "-            depositDetails.is_finished = true;",
      "-            emit Withdraw(msg.sender,  depositDetails.depositTokens,depositDetails.stakePeriod);",
      "-",
      "-",
      "-        }",
      "-",
      "-",
      "-    /**",
      "-     * @notice Claim rewards you gained over period",
      "-     * @param _depositId: is the id of user element.",
      "-     */",
      "-    function claim(",
      "-        uint256 _depositId",
      "-    ) external  {",
      "-        require(_depositId >= 0, \"Value is not specified\");",
      "-        updatePool();",
      "-        refreshMyLevel(msg.sender);",
      "-        _claim(_depositId,0);",
      "-    }",
      "-",
      "-   /*",
      "-    Should approve allowance before initiating",
      "-    accepts _depositId - is the id of user element.",
      "-    */",
      "-    function _claim(",
      "-            uint256 _depositId,",
      "-            uint256 fromWithdraw",
      "-        ) private {",
      "-            UserInfo storage user = userInfo[msg.sender];",
      "-            IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);",
      "-            UserDeposits storage depositDetails = user_deposits[msg.sender][_depositId];",
      "-            PoolInfo storage pool = poolInfo;",
      "-",
      "-            uint256 pending = pendingReward(_depositId,msg.sender);",
      "-",
      "-            if(fromWithdraw == 0) {",
      "-                require(pending > 0 ,\"No rewards to claim.\");",
      "-            }",
      "-",
      "-",
      "-            if (pending > 0) {",
      "-                uint256 distributeRewardTokenAmt = (pending * RELATIONSHIP_REWARD) / 100;",
      "-                token.safeTransfer(relationship, distributeRewardTokenAmt);",
      "-                IGymMLM(relationship).distributeRewards(pending, address(tokenAddress), msg.sender, 3);",
      "-",
      "-                // 6% distribution",
      "-                uint256 calculateDistrubutionReward = (pending * 6) / 100;",
      "-                poolRewardsAmount += calculateDistrubutionReward;",
      "-",
      "-                uint256 calcUserRewards = (pending-distributeRewardTokenAmt-calculateDistrubutionReward);",
      "-                safeRewardTransfer(tokenAddress, msg.sender, calcUserRewards);",
      "-",
      "-                user.totalClaimt += calcUserRewards;",
      "-                totalClaimtInPool += pending;",
      "-                depositDetails.rewardsClaimt += pending;",
      "-                depositDetails.rewardDebt = (depositDetails.depositTokens * (pool.accRewardPerShare)) / (1e18);",
      "-                emit ClaimUserReward(msg.sender,  calcUserRewards);",
      "-                 depositDetails.rewardsGained = 0;",
      "-            }",
      "-",
      "-            // token.safeTransferFrom(address(this),msg.sender, depositDetails.rewardsGained);",
      "-",
      "-        }",
      "-",
      "-",
      "-",
      "-   /*",
      "-    transfers pool commisions to management",
      "-    */",
      "-    function transferPoolRewards() public onlyRunnerScript {",
      "-            require(address(holderRewardContractAddress) != address(0x0),\"Holder Reward Address::SET_ZERO_ADDRESS\");",
      "-            IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);",
      "-            token.safeTransfer(holderRewardContractAddress, poolRewardsAmount);",
      "-            // token.safeTransfer(relationship, poolRewardsAmount/2);",
      "-            poolRewardsAmount = 0;",
      "-        }",
      "-",
      "-",
      "-    /**",
      "-     * @notice  Safe transfer function for reward tokens",
      "-     * @param _rewardToken Address of reward token contract",
      "-     * @param _to Address of reciever",
      "-     * @param _amount Amount of reward tokens to transfer",
      "-     */",
      "-    function safeRewardTransfer(",
      "-        address _rewardToken,",
      "-        address _to,",
      "-        uint256 _amount",
      "-    ) internal {",
      "-        uint256 _bal = IERC20Upgradeable(_rewardToken).balanceOf(address(this));",
      "-        if (_amount > _bal) {",
      "-            require(IERC20Upgradeable(_rewardToken).transfer(_to, _bal), \"GymSinglePool:: Transfer failed\");",
      "-        } else {",
      "-            require(IERC20Upgradeable(_rewardToken).transfer(_to, _amount), \"GymSinglePool:: Transfer failed\");",
      "-        }",
      "-    }",
      "-    /**",
      "-     * @notice To get User Info in other contract.",
      "-     */",
      "-    function getUserInfo(address _user) external view returns (UserInfo memory) {",
      "-        return userInfo[_user];",
      "-    }",
      "-",
      "-        /**",
      "-     * @notice View function to see pending reward on frontend.",
      "-     * @param _depositId: Staking pool id",
      "-     * @param _user: User address",
      "-     */",
      "-    function pendingReward(uint256 _depositId, address _user) public view returns (uint256) {",
      "-        UserDeposits storage depositDetails = user_deposits[_user][_depositId];",
      "-        UserInfo storage user = userInfo[_user];",
      "-        PoolInfo storage pool = poolInfo;",
      "-        if(depositDetails.is_finished == true || depositDetails.stakePeriod == 0){",
      "-            return 0;",
      "-        }",
      "-",
      "-        uint256 _accRewardPerShare = pool.accRewardPerShare;",
      "-        uint256 sharesTotal = totalGymnetLocked-totalGymnetUnlocked;",
      "-",
      "-        if (block.number > pool.lastRewardBlock && sharesTotal != 0) {",
      "-            uint256 _multiplier = block.number - pool.lastRewardBlock;",
      "-            uint256 _reward = (_multiplier * pool.rewardPerBlock);",
      "-             _accRewardPerShare = _accRewardPerShare + ((_reward * 1e18) / sharesTotal);",
      "-        }",
      "-",
      "-        return (depositDetails.depositTokens * _accRewardPerShare) / (1e18) - (depositDetails.rewardDebt);",
      "-    }",
      "-",
      "-",
      "-    /**",
      "-     * @notice Update reward variables of the given pool to be up-to-date.",
      "-     */",
      "-    function updatePool() public {",
      "-        PoolInfo storage pool = poolInfo;",
      "-        if (block.number <= pool.lastRewardBlock) {",
      "-            return;",
      "-        }",
      "-        uint256 sharesTotal = totalGymnetLocked-totalGymnetUnlocked;",
      "-        if (sharesTotal == 0) {",
      "-            pool.lastRewardBlock = block.number;",
      "-            return;",
      "-        }",
      "-        uint256 multiplier = block.number - pool.lastRewardBlock;",
      "-        if (multiplier <= 0) {",
      "-            return;",
      "-        }",
      "-        uint256 _rewardPerBlock = pool.rewardPerBlock;",
      "-        uint256 _reward = (multiplier * _rewardPerBlock);",
      "-        pool.accRewardPerShare = pool.accRewardPerShare + ((_reward * 1e18) / sharesTotal);",
      "-        pool.lastRewardBlock = block.number;",
      "-    }",
      "-    /**",
      "-     * @notice Claim All Rewards in one Transaction Internat Function.",
      "-     * If reinvest = true, Rewards will be reinvested as a new Staking",
      "-     * Reinvest Period Id is the id of months element",
      "-     */",
      "-    function _claimAll(bool reinvest,uint8 reinvestPeriodId) private {",
      "-        UserInfo storage user = userInfo[msg.sender];",
      "-        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);",
      "-        PoolInfo storage pool = poolInfo;",
      "-         updatePool();",
      "-         uint256 distributeRewardTokenAmtTotal = 0;",
      "-         uint256 calcUserRewardsTotal = 0;",
      "-         uint256 totalDistribute = 0;",
      "-        for (uint256 i = 0; i<user.depositId ; i++) {",
      "-            UserDeposits storage depositDetails = user_deposits[msg.sender][i];",
      "-            uint256 pending = pendingReward(i,msg.sender);",
      "-            totalDistribute += pending;",
      "-            if (pending > 0) {",
      "-                uint256 distributeRewardTokenAmt = (pending * RELATIONSHIP_REWARD) / 100;",
      "-                 distributeRewardTokenAmtTotal += distributeRewardTokenAmt;",
      "-                // 6% distribution",
      "-                uint256 calculateDistrubutionReward = (pending * 6) / 100;",
      "-                poolRewardsAmount += calculateDistrubutionReward;",
      "-",
      "-                uint256 calcUserRewards = (pending-distributeRewardTokenAmt-calculateDistrubutionReward);",
      "-                calcUserRewardsTotal += calcUserRewards;",
      "-",
      "-                user.totalClaimt += calcUserRewards;",
      "-                totalClaimtInPool += pending;",
      "-                depositDetails.rewardsClaimt += pending;",
      "-                depositDetails.rewardDebt = (depositDetails.depositTokens * (pool.accRewardPerShare)) / (1e18);",
      "-                emit ClaimUserReward(msg.sender,  calcUserRewards);",
      "-                 depositDetails.rewardsGained = 0;",
      "-            }",
      "-",
      "-        }",
      "-        token.safeTransfer(relationship, distributeRewardTokenAmtTotal);",
      "-        IGymMLM(relationship).distributeRewards(totalDistribute, address(tokenAddress), msg.sender, 3);",
      "-        safeRewardTransfer(tokenAddress, msg.sender, calcUserRewardsTotal);",
      "-        if(reinvest == true) {",
      "-          _deposit(calcUserRewardsTotal,reinvestPeriodId,false);",
      "-        }",
      "-    }",
      "-    /**",
      "-     * @notice Claim All Rewards in one Transaction.",
      "-     */",
      "-    function claimAll() public {",
      "-         refreshMyLevel(msg.sender);",
      "-        _claimAll(false,0);",
      "-    }",
      "-    /**",
      "-     * @notice Claim and Reinvest all rewards public function to trigger internal _claimAll function.",
      "-     */",
      "-    function claimAndReinvest(bool reinvest,uint8 periodId) public {",
      "-        require(isPoolActive,'Contract is not running yet');",
      "-        _claimAll(reinvest,periodId);",
      "-    }",
      "-",
      "-    function refreshMyLevel(address _user) public {",
      "-        UserInfo storage user = userInfo[_user];",
      "-        for (uint i = 0; i<levels.length ; i++) {",
      "-            if(user.totalDepositDollarValue >= levels[i]) {",
      "-                user.level=i;",
      "-            }",
      "-        }",
      "-    }",
      "-    function totalLockedTokens(address _user) public view returns (uint256) {",
      "-        UserInfo storage user = userInfo[_user];",
      "-        uint256 totalDepositLocked = 0;",
      "-        for (uint256 i = 0; i<user.depositId ; i++) {",
      "-            UserDeposits storage depositDetails = user_deposits[_user][i];",
      "-            if(depositDetails.stakePeriod != 0 && !depositDetails.is_finished) {",
      "-                totalDepositLocked += depositDetails.depositTokens;",
      "-            }",
      "-        }",
      "-        return totalDepositLocked;",
      "-    }",
      "-",
      "-    function switchToUnlocked(uint256 _depositId) public {",
      "-        UserInfo storage user = userInfo[msg.sender];",
      "-        UserDeposits storage depositDetails = user_deposits[msg.sender][_depositId];",
      "-        require(depositDetails.depositTimestamp <= unlockedTimestampQualification,'Function is only for Users that deposited before Unlocked Staking Upgrade');",
      "-        _claim(_depositId,1);",
      "-        uint256 lockTimesamp = DateTime.addSeconds(block.timestamp,1);",
      "-",
      "-        depositDetails.stakePeriod = 0;",
      "-        depositDetails.withdrawalTimestamp = lockTimesamp;",
      "-        totalGymnetUnlocked += depositDetails.depositTokens;",
      "-",
      "-    }",
      "-",
      "-",
      "-",
      "-}",
      "+code length is too long"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/GYMNetwork/0x0288FBA0BF19072d30490A0F3C81cD9B0634258a_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/GYMNetwork/0x0288FBA0BF19072d30490A0F3C81cD9B0634258a_flattened.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1834,7 +1834,7 @@",
      "         uint8 _periodId,",
      "         bool isUnlocked,",
      "         address _from",
      "-    ) external  {",
      "+    ) external onlyBank {",
      "         require(isPoolActive,'Contract is not running yet');",
      "         _autoDeposit(_depositAmount,_periodId,isUnlocked,_from);",
      "     }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/GYMNetwork/0x0288FBA0BF19072d30490A0F3C81cD9B0634258a_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/GYMNetwork/0x0288FBA0BF19072d30490A0F3C81cD9B0634258a_flattened.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -497,10 +497,9 @@",
      "     }",
      " ",
      "     // <bug ACCESS_CONTROL>",
      "-    function _burn(address from, address owner, uint256 id) public {",
      "-        // </bug>",
      "+    function _burn(address from, address owner, uint256 id) internal {",
      "         require(from == owner, \"not owner\");",
      "-        _owners[id] = 2**160; // cannot mint it again",
      "+        _owners[id] = 0; // clear ownership",
      "         _numNFTPerAddress[from]--;",
      "         emit Transfer(from, address(0), id);",
      "     }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/SandboxLAND/0x50f5474724e0Ee42D9a4e711ccFB275809Fd6d4a/SandboxLAN.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/SandboxLAND/0x50f5474724e0Ee42D9a4e711ccFB275809Fd6d4a/SandboxLAN.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -497,9 +497,9 @@",
      "     }",
      " ",
      "     // <bug ACCESS_CONTROL>",
      "-    function _burn(address from, address owner, uint256 id) public {",
      "-        // </bug>",
      "+    function _burn(address from, address owner, uint256 id) internal {",
      "         require(from == owner, \"not owner\");",
      "+        require(_ownerOf(id) == owner, \"not owner\");",
      "         _owners[id] = 2**160; // cannot mint it again",
      "         _numNFTPerAddress[from]--;",
      "         emit Transfer(from, address(0), id);"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/SandboxLAND/0x50f5474724e0Ee42D9a4e711ccFB275809Fd6d4a/SandboxLAN.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/SandboxLAND/0x50f5474724e0Ee42D9a4e711ccFB275809Fd6d4a/SandboxLAN.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1,3682 +1 @@",
      "-// IGNORE_LICENSE-Identifier: ISC",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (token/ERC20/presets/ERC20PresetMinterPauser.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../ERC20.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"./IERC20.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Interface of the ERC20 standard as defined in the EIP.",
      "- */",
      "-interface IERC20 {",
      "-    /**",
      "-     * @dev Returns the amount of tokens in existence.",
      "-     */",
      "-    function totalSupply() external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Returns the amount of tokens owned by `account`.",
      "-     */",
      "-    function balanceOf(address account) external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Moves `amount` tokens from the caller's account to `recipient`.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * Emits a {Transfer} event.",
      "-     */",
      "-    function transfer(address recipient, uint256 amount) external returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Returns the remaining number of tokens that `spender` will be",
      "-     * allowed to spend on behalf of `owner` through {transferFrom}. This is",
      "-     * zero by default.",
      "-     *",
      "-     * This value changes when {approve} or {transferFrom} are called.",
      "-     */",
      "-    function allowance(address owner, address spender) external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * IMPORTANT: Beware that changing an allowance with this method brings the risk",
      "-     * that someone may use both the old and the new allowance by unfortunate",
      "-     * transaction ordering. One possible solution to mitigate this race",
      "-     * condition is to first reduce the spender's allowance to 0 and set the",
      "-     * desired value afterwards:",
      "-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
      "-     *",
      "-     * Emits an {Approval} event.",
      "-     */",
      "-    function approve(address spender, uint256 amount) external returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Moves `amount` tokens from `sender` to `recipient` using the",
      "-     * allowance mechanism. `amount` is then deducted from the caller's",
      "-     * allowance.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * Emits a {Transfer} event.",
      "-     */",
      "-    function transferFrom(",
      "-        address sender,",
      "-        address recipient,",
      "-        uint256 amount",
      "-    ) external returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Emitted when `value` tokens are moved from one account (`from`) to",
      "-     * another (`to`).",
      "-     *",
      "-     * Note that `value` may be zero.",
      "-     */",
      "-    event Transfer(address indexed from, address indexed to, uint256 value);",
      "-",
      "-    /**",
      "-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by",
      "-     * a call to {approve}. `value` is the new allowance.",
      "-     */",
      "-    event Approval(address indexed owner, address indexed spender, uint256 value);",
      "-}",
      "-// import \"./extensions/IERC20Metadata.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../IERC20.sol\";",
      "-",
      "-/**",
      "- * @dev Interface for the optional metadata functions from the ERC20 standard.",
      "- *",
      "- * _Available since v4.1._",
      "- */",
      "-interface IERC20Metadata is IERC20 {",
      "-    /**",
      "-     * @dev Returns the name of the token.",
      "-     */",
      "-    function name() external view returns (string memory);",
      "-",
      "-    /**",
      "-     * @dev Returns the symbol of the token.",
      "-     */",
      "-    function symbol() external view returns (string memory);",
      "-",
      "-    /**",
      "-     * @dev Returns the decimals places of the token.",
      "-     */",
      "-    function decimals() external view returns (uint8);",
      "-}",
      "-// import \"../../utils/Context.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Provides information about the current execution context, including the",
      "- * sender of the transaction and its data. While these are generally available",
      "- * via msg.sender and msg.data, they should not be accessed in such a direct",
      "- * manner, since when dealing with meta-transactions the account sending and",
      "- * paying for execution may not be the actual sender (as far as an application",
      "- * is concerned).",
      "- *",
      "- * This contract is only required for intermediate, library-like contracts.",
      "- */",
      "-abstract contract Context {",
      "-    function _msgSender() internal view virtual returns (address) {",
      "-        return msg.sender;",
      "-    }",
      "-",
      "-    function _msgData() internal view virtual returns (bytes calldata) {",
      "-        return msg.data;",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @dev Implementation of the {IERC20} interface.",
      "- *",
      "- * This implementation is agnostic to the way tokens are created. This means",
      "- * that a supply mechanism has to be added in a derived contract using {_mint}.",
      "- * For a generic mechanism see {ERC20PresetMinterPauser}.",
      "- *",
      "- * TIP: For a detailed writeup see our guide",
      "- * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How",
      "- * to implement supply mechanisms].",
      "- *",
      "- * We have followed general OpenZeppelin Contracts guidelines: functions revert",
      "- * instead returning `false` on failure. This behavior is nonetheless",
      "- * conventional and does not conflict with the expectations of ERC20",
      "- * applications.",
      "- *",
      "- * Additionally, an {Approval} event is emitted on calls to {transferFrom}.",
      "- * This allows applications to reconstruct the allowance for all accounts just",
      "- * by listening to said events. Other implementations of the EIP may not emit",
      "- * these events, as it isn't required by the specification.",
      "- *",
      "- * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}",
      "- * functions have been added to mitigate the well-known issues around setting",
      "- * allowances. See {IERC20-approve}.",
      "- */",
      "-contract ERC20 is Context, IERC20, IERC20Metadata {",
      "-    mapping(address => uint256) private _balances;",
      "-",
      "-    mapping(address => mapping(address => uint256)) private _allowances;",
      "-",
      "-    uint256 private _totalSupply;",
      "-",
      "-    string private _name;",
      "-    string private _symbol;",
      "-",
      "-    /**",
      "-     * @dev Sets the values for {name} and {symbol}.",
      "-     *",
      "-     * The default value of {decimals} is 18. To select a different value for",
      "-     * {decimals} you should overload it.",
      "-     *",
      "-     * All two of these values are immutable: they can only be set once during",
      "-     * construction.",
      "-     */",
      "-    constructor(string memory name_, string memory symbol_) {",
      "-        _name = name_;",
      "-        _symbol = symbol_;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the name of the token.",
      "-     */",
      "-    function name() public view virtual override returns (string memory) {",
      "-        return _name;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the symbol of the token, usually a shorter version of the",
      "-     * name.",
      "-     */",
      "-    function symbol() public view virtual override returns (string memory) {",
      "-        return _symbol;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the number of decimals used to get its user representation.",
      "-     * For example, if `decimals` equals `2`, a balance of `505` tokens should",
      "-     * be displayed to a user as `5.05` (`505 / 10 ** 2`).",
      "-     *",
      "-     * Tokens usually opt for a value of 18, imitating the relationship between",
      "-     * Ether and Wei. This is the value {ERC20} uses, unless this function is",
      "-     * overridden;",
      "-     *",
      "-     * NOTE: This information is only used for _display_ purposes: it in",
      "-     * no way affects any of the arithmetic of the contract, including",
      "-     * {IERC20-balanceOf} and {IERC20-transfer}.",
      "-     */",
      "-    function decimals() public view virtual override returns (uint8) {",
      "-        return 18;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev See {IERC20-totalSupply}.",
      "-     */",
      "-    function totalSupply() public view virtual override returns (uint256) {",
      "-        return _totalSupply;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev See {IERC20-balanceOf}.",
      "-     */",
      "-    function balanceOf(address account) public view virtual override returns (uint256) {",
      "-        return _balances[account];",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev See {IERC20-transfer}.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `recipient` cannot be the zero address.",
      "-     * - the caller must have a balance of at least `amount`.",
      "-     */",
      "-    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {",
      "-        _transfer(_msgSender(), recipient, amount);",
      "-        return true;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev See {IERC20-allowance}.",
      "-     */",
      "-    function allowance(address owner, address spender) public view virtual override returns (uint256) {",
      "-        return _allowances[owner][spender];",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev See {IERC20-approve}.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `spender` cannot be the zero address.",
      "-     */",
      "-    function approve(address spender, uint256 amount) public virtual override returns (bool) {",
      "-        _approve(_msgSender(), spender, amount);",
      "-        return true;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev See {IERC20-transferFrom}.",
      "-     *",
      "-     * Emits an {Approval} event indicating the updated allowance. This is not",
      "-     * required by the EIP. See the note at the beginning of {ERC20}.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `sender` and `recipient` cannot be the zero address.",
      "-     * - `sender` must have a balance of at least `amount`.",
      "-     * - the caller must have allowance for ``sender``'s tokens of at least",
      "-     * `amount`.",
      "-     */",
      "-    function transferFrom(",
      "-        address sender,",
      "-        address recipient,",
      "-        uint256 amount",
      "-    ) public virtual override returns (bool) {",
      "-        _transfer(sender, recipient, amount);",
      "-",
      "-        uint256 currentAllowance = _allowances[sender][_msgSender()];",
      "-        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");",
      "-        unchecked {",
      "-            _approve(sender, _msgSender(), currentAllowance - amount);",
      "-        }",
      "-",
      "-        return true;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Atomically increases the allowance granted to `spender` by the caller.",
      "-     *",
      "-     * This is an alternative to {approve} that can be used as a mitigation for",
      "-     * problems described in {IERC20-approve}.",
      "-     *",
      "-     * Emits an {Approval} event indicating the updated allowance.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `spender` cannot be the zero address.",
      "-     */",
      "-    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {",
      "-        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);",
      "-        return true;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Atomically decreases the allowance granted to `spender` by the caller.",
      "-     *",
      "-     * This is an alternative to {approve} that can be used as a mitigation for",
      "-     * problems described in {IERC20-approve}.",
      "-     *",
      "-     * Emits an {Approval} event indicating the updated allowance.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `spender` cannot be the zero address.",
      "-     * - `spender` must have allowance for the caller of at least",
      "-     * `subtractedValue`.",
      "-     */",
      "-    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {",
      "-        uint256 currentAllowance = _allowances[_msgSender()][spender];",
      "-        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");",
      "-        unchecked {",
      "-            _approve(_msgSender(), spender, currentAllowance - subtractedValue);",
      "-        }",
      "-",
      "-        return true;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Moves `amount` of tokens from `sender` to `recipient`.",
      "-     *",
      "-     * This internal function is equivalent to {transfer}, and can be used to",
      "-     * e.g. implement automatic token fees, slashing mechanisms, etc.",
      "-     *",
      "-     * Emits a {Transfer} event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `sender` cannot be the zero address.",
      "-     * - `recipient` cannot be the zero address.",
      "-     * - `sender` must have a balance of at least `amount`.",
      "-     */",
      "-    function _transfer(",
      "-        address sender,",
      "-        address recipient,",
      "-        uint256 amount",
      "-    ) internal virtual {",
      "-        require(sender != address(0), \"ERC20: transfer from the zero address\");",
      "-        require(recipient != address(0), \"ERC20: transfer to the zero address\");",
      "-",
      "-        _beforeTokenTransfer(sender, recipient, amount);",
      "-",
      "-        uint256 senderBalance = _balances[sender];",
      "-        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");",
      "-        unchecked {",
      "-            _balances[sender] = senderBalance - amount;",
      "-        }",
      "-        _balances[recipient] += amount;",
      "-",
      "-        emit Transfer(sender, recipient, amount);",
      "-",
      "-        _afterTokenTransfer(sender, recipient, amount);",
      "-    }",
      "-",
      "-    /** @dev Creates `amount` tokens and assigns them to `account`, increasing",
      "-     * the total supply.",
      "-     *",
      "-     * Emits a {Transfer} event with `from` set to the zero address.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `account` cannot be the zero address.",
      "-     */",
      "-    function _mint(address account, uint256 amount) internal virtual {",
      "-        require(account != address(0), \"ERC20: mint to the zero address\");",
      "-",
      "-        _beforeTokenTransfer(address(0), account, amount);",
      "-",
      "-        _totalSupply += amount;",
      "-        _balances[account] += amount;",
      "-        emit Transfer(address(0), account, amount);",
      "-",
      "-        _afterTokenTransfer(address(0), account, amount);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Destroys `amount` tokens from `account`, reducing the",
      "-     * total supply.",
      "-     *",
      "-     * Emits a {Transfer} event with `to` set to the zero address.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `account` cannot be the zero address.",
      "-     * - `account` must have at least `amount` tokens.",
      "-     */",
      "-    function _burn(address account, uint256 amount) internal virtual {",
      "-        require(account != address(0), \"ERC20: burn from the zero address\");",
      "-",
      "-        _beforeTokenTransfer(account, address(0), amount);",
      "-",
      "-        uint256 accountBalance = _balances[account];",
      "-        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");",
      "-        unchecked {",
      "-            _balances[account] = accountBalance - amount;",
      "-        }",
      "-        _totalSupply -= amount;",
      "-",
      "-        emit Transfer(account, address(0), amount);",
      "-",
      "-        _afterTokenTransfer(account, address(0), amount);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.",
      "-     *",
      "-     * This internal function is equivalent to `approve`, and can be used to",
      "-     * e.g. set automatic allowances for certain subsystems, etc.",
      "-     *",
      "-     * Emits an {Approval} event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `owner` cannot be the zero address.",
      "-     * - `spender` cannot be the zero address.",
      "-     */",
      "-    function _approve(",
      "-        address owner,",
      "-        address spender,",
      "-        uint256 amount",
      "-    ) internal virtual {",
      "-        require(owner != address(0), \"ERC20: approve from the zero address\");",
      "-        require(spender != address(0), \"ERC20: approve to the zero address\");",
      "-",
      "-        _allowances[owner][spender] = amount;",
      "-        emit Approval(owner, spender, amount);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Hook that is called before any transfer of tokens. This includes",
      "-     * minting and burning.",
      "-     *",
      "-     * Calling conditions:",
      "-     *",
      "-     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens",
      "-     * will be transferred to `to`.",
      "-     * - when `from` is zero, `amount` tokens will be minted for `to`.",
      "-     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.",
      "-     * - `from` and `to` are never both zero.",
      "-     *",
      "-     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].",
      "-     */",
      "-    function _beforeTokenTransfer(",
      "-        address from,",
      "-        address to,",
      "-        uint256 amount",
      "-    ) internal virtual {}",
      "-",
      "-    /**",
      "-     * @dev Hook that is called after any transfer of tokens. This includes",
      "-     * minting and burning.",
      "-     *",
      "-     * Calling conditions:",
      "-     *",
      "-     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens",
      "-     * has been transferred to `to`.",
      "-     * - when `from` is zero, `amount` tokens have been minted for `to`.",
      "-     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.",
      "-     * - `from` and `to` are never both zero.",
      "-     *",
      "-     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].",
      "-     */",
      "-    function _afterTokenTransfer(",
      "-        address from,",
      "-        address to,",
      "-        uint256 amount",
      "-    ) internal virtual {}",
      "-}",
      "-// import \"../extensions/ERC20Burnable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../ERC20.sol\";",
      "-// import \"../../../utils/Context.sol\";",
      "-",
      "-/**",
      "- * @dev Extension of {ERC20} that allows token holders to destroy both their own",
      "- * tokens and those that they have an allowance for, in a way that can be",
      "- * recognized off-chain (via event analysis).",
      "- */",
      "-abstract contract ERC20Burnable is Context, ERC20 {",
      "-    /**",
      "-     * @dev Destroys `amount` tokens from the caller.",
      "-     *",
      "-     * See {ERC20-_burn}.",
      "-     */",
      "-    function burn(uint256 amount) public virtual {",
      "-        _burn(_msgSender(), amount);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Destroys `amount` tokens from `account`, deducting from the caller's",
      "-     * allowance.",
      "-     *",
      "-     * See {ERC20-_burn} and {ERC20-allowance}.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have allowance for ``accounts``'s tokens of at least",
      "-     * `amount`.",
      "-     */",
      "-    function burnFrom(address account, uint256 amount) public virtual {",
      "-        uint256 currentAllowance = allowance(account, _msgSender());",
      "-        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");",
      "-        unchecked {",
      "-            _approve(account, _msgSender(), currentAllowance - amount);",
      "-        }",
      "-        _burn(account, amount);",
      "-    }",
      "-}",
      "-// import \"../extensions/ERC20Pausable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../ERC20.sol\";",
      "-// import \"../../../security/Pausable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../utils/Context.sol\";",
      "-",
      "-/**",
      "- * @dev Contract module which allows children to implement an emergency stop",
      "- * mechanism that can be triggered by an authorized account.",
      "- *",
      "- * This module is used through inheritance. It will make available the",
      "- * modifiers `whenNotPaused` and `whenPaused`, which can be applied to",
      "- * the functions of your contract. Note that they will not be pausable by",
      "- * simply including this module, only once the modifiers are put in place.",
      "- */",
      "-abstract contract Pausable is Context {",
      "-    /**",
      "-     * @dev Emitted when the pause is triggered by `account`.",
      "-     */",
      "-    event Paused(address account);",
      "-",
      "-    /**",
      "-     * @dev Emitted when the pause is lifted by `account`.",
      "-     */",
      "-    event Unpaused(address account);",
      "-",
      "-    bool private _paused;",
      "-",
      "-    /**",
      "-     * @dev Initializes the contract in unpaused state.",
      "-     */",
      "-    constructor() {",
      "-        _paused = false;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns true if the contract is paused, and false otherwise.",
      "-     */",
      "-    function paused() public view virtual returns (bool) {",
      "-        return _paused;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Modifier to make a function callable only when the contract is not paused.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - The contract must not be paused.",
      "-     */",
      "-    modifier whenNotPaused() {",
      "-        require(!paused(), \"Pausable: paused\");",
      "-        _;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Modifier to make a function callable only when the contract is paused.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - The contract must be paused.",
      "-     */",
      "-    modifier whenPaused() {",
      "-        require(paused(), \"Pausable: not paused\");",
      "-        _;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Triggers stopped state.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - The contract must not be paused.",
      "-     */",
      "-    function _pause() internal virtual whenNotPaused {",
      "-        _paused = true;",
      "-        emit Paused(_msgSender());",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns to normal state.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - The contract must be paused.",
      "-     */",
      "-    function _unpause() internal virtual whenPaused {",
      "-        _paused = false;",
      "-        emit Unpaused(_msgSender());",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @dev ERC20 token with pausable token transfers, minting and burning.",
      "- *",
      "- * Useful for scenarios such as preventing trades until the end of an evaluation",
      "- * period, or having an emergency switch for freezing all token transfers in the",
      "- * event of a large bug.",
      "- */",
      "-abstract contract ERC20Pausable is ERC20, Pausable {",
      "-    /**",
      "-     * @dev See {ERC20-_beforeTokenTransfer}.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the contract must not be paused.",
      "-     */",
      "-    function _beforeTokenTransfer(",
      "-        address from,",
      "-        address to,",
      "-        uint256 amount",
      "-    ) internal virtual override {",
      "-        super._beforeTokenTransfer(from, to, amount);",
      "-",
      "-        require(!paused(), \"ERC20Pausable: token transfer while paused\");",
      "-    }",
      "-}",
      "-// import \"../../../access/AccessControlEnumerable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"./IAccessControlEnumerable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"./IAccessControl.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev External interface of AccessControl declared to support ERC165 detection.",
      "- */",
      "-interface IAccessControl {",
      "-    /**",
      "-     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`",
      "-     *",
      "-     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite",
      "-     * {RoleAdminChanged} not being emitted signaling this.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);",
      "-",
      "-    /**",
      "-     * @dev Emitted when `account` is granted `role`.",
      "-     *",
      "-     * `sender` is the account that originated the contract call, an admin role",
      "-     * bearer except when using {AccessControl-_setupRole}.",
      "-     */",
      "-    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);",
      "-",
      "-    /**",
      "-     * @dev Emitted when `account` is revoked `role`.",
      "-     *",
      "-     * `sender` is the account that originated the contract call:",
      "-     *   - if using `revokeRole`, it is the admin role bearer",
      "-     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)",
      "-     */",
      "-    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);",
      "-",
      "-    /**",
      "-     * @dev Returns `true` if `account` has been granted `role`.",
      "-     */",
      "-    function hasRole(bytes32 role, address account) external view returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Returns the admin role that controls `role`. See {grantRole} and",
      "-     * {revokeRole}.",
      "-     *",
      "-     * To change a role's admin, use {AccessControl-_setRoleAdmin}.",
      "-     */",
      "-    function getRoleAdmin(bytes32 role) external view returns (bytes32);",
      "-",
      "-    /**",
      "-     * @dev Grants `role` to `account`.",
      "-     *",
      "-     * If `account` had not been already granted `role`, emits a {RoleGranted}",
      "-     * event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have ``role``'s admin role.",
      "-     */",
      "-    function grantRole(bytes32 role, address account) external;",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from `account`.",
      "-     *",
      "-     * If `account` had been granted `role`, emits a {RoleRevoked} event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have ``role``'s admin role.",
      "-     */",
      "-    function revokeRole(bytes32 role, address account) external;",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from the calling account.",
      "-     *",
      "-     * Roles are often managed via {grantRole} and {revokeRole}: this function's",
      "-     * purpose is to provide a mechanism for accounts to lose their privileges",
      "-     * if they are compromised (such as when a trusted device is misplaced).",
      "-     *",
      "-     * If the calling account had been granted `role`, emits a {RoleRevoked}",
      "-     * event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must be `account`.",
      "-     */",
      "-    function renounceRole(bytes32 role, address account) external;",
      "-}",
      "-",
      "-/**",
      "- * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.",
      "- */",
      "-interface IAccessControlEnumerable is IAccessControl {",
      "-    /**",
      "-     * @dev Returns one of the accounts that have `role`. `index` must be a",
      "-     * value between 0 and {getRoleMemberCount}, non-inclusive.",
      "-     *",
      "-     * Role bearers are not sorted in any particular way, and their ordering may",
      "-     * change at any point.",
      "-     *",
      "-     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure",
      "-     * you perform all queries on the same block. See the following",
      "-     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]",
      "-     * for more information.",
      "-     */",
      "-    function getRoleMember(bytes32 role, uint256 index) external view returns (address);",
      "-",
      "-    /**",
      "-     * @dev Returns the number of accounts that have `role`. Can be used",
      "-     * together with {getRoleMember} to enumerate all bearers of a role.",
      "-     */",
      "-    function getRoleMemberCount(bytes32 role) external view returns (uint256);",
      "-}",
      "-// import \"./AccessControl.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"./IAccessControl.sol\";",
      "-// import \"../utils/Context.sol\";",
      "-// import \"../utils/Strings.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev String operations.",
      "- */",
      "-library Strings {",
      "-    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";",
      "-",
      "-    /**",
      "-     * @dev Converts a `uint256` to its ASCII `string` decimal representation.",
      "-     */",
      "-    function toString(uint256 value) internal pure returns (string memory) {",
      "-        // Inspired by OraclizeAPI's implementation - MIT licence",
      "-        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol",
      "-",
      "-        if (value == 0) {",
      "-            return \"0\";",
      "-        }",
      "-        uint256 temp = value;",
      "-        uint256 digits;",
      "-        while (temp != 0) {",
      "-            digits++;",
      "-            temp /= 10;",
      "-        }",
      "-        bytes memory buffer = new bytes(digits);",
      "-        while (value != 0) {",
      "-            digits -= 1;",
      "-            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));",
      "-            value /= 10;",
      "-        }",
      "-        return string(buffer);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.",
      "-     */",
      "-    function toHexString(uint256 value) internal pure returns (string memory) {",
      "-        if (value == 0) {",
      "-            return \"0x00\";",
      "-        }",
      "-        uint256 temp = value;",
      "-        uint256 length = 0;",
      "-        while (temp != 0) {",
      "-            length++;",
      "-            temp >>= 8;",
      "-        }",
      "-        return toHexString(value, length);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.",
      "-     */",
      "-    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {",
      "-        bytes memory buffer = new bytes(2 * length + 2);",
      "-        buffer[0] = \"0\";",
      "-        buffer[1] = \"x\";",
      "-        for (uint256 i = 2 * length + 1; i > 1; --i) {",
      "-            buffer[i] = _HEX_SYMBOLS[value & 0xf];",
      "-            value >>= 4;",
      "-        }",
      "-        require(value == 0, \"Strings: hex length insufficient\");",
      "-        return string(buffer);",
      "-    }",
      "-}",
      "-// import \"../utils/introspection/ERC165.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"./IERC165.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Interface of the ERC165 standard, as defined in the",
      "- * https://eips.ethereum.org/EIPS/eip-165[EIP].",
      "- *",
      "- * Implementers can declare support of contract interfaces, which can then be",
      "- * queried by others ({ERC165Checker}).",
      "- *",
      "- * For an implementation, see {ERC165}.",
      "- */",
      "-interface IERC165 {",
      "-    /**",
      "-     * @dev Returns true if this contract implements the interface defined by",
      "-     * `interfaceId`. See the corresponding",
      "-     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]",
      "-     * to learn more about how these ids are created.",
      "-     *",
      "-     * This function call must use less than 30 000 gas.",
      "-     */",
      "-    function supportsInterface(bytes4 interfaceId) external view returns (bool);",
      "-}",
      "-",
      "-/**",
      "- * @dev Implementation of the {IERC165} interface.",
      "- *",
      "- * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check",
      "- * for the additional interface id that will be supported. For example:",
      "- *",
      "- * ```solidity",
      "- * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {",
      "- *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);",
      "- * }",
      "- * ```",
      "- *",
      "- * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
      "- */",
      "-abstract contract ERC165 is IERC165 {",
      "-    /**",
      "-     * @dev See {IERC165-supportsInterface}.",
      "-     */",
      "-    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {",
      "-        return interfaceId == type(IERC165).interfaceId;",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @dev Contract module that allows children to implement role-based access",
      "- * control mechanisms. This is a lightweight version that doesn't allow enumerating role",
      "- * members except through off-chain means by accessing the contract event logs. Some",
      "- * applications may benefit from on-chain enumerability, for those cases see",
      "- * {AccessControlEnumerable}.",
      "- *",
      "- * Roles are referred to by their `bytes32` identifier. These should be exposed",
      "- * in the external API and be unique. The best way to achieve this is by",
      "- * using `public constant` hash digests:",
      "- *",
      "- * ```",
      "- * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");",
      "- * ```",
      "- *",
      "- * Roles can be used to represent a set of permissions. To restrict access to a",
      "- * function call, use {hasRole}:",
      "- *",
      "- * ```",
      "- * function foo() public {",
      "- *     require(hasRole(MY_ROLE, msg.sender));",
      "- *     ...",
      "- * }",
      "- * ```",
      "- *",
      "- * Roles can be granted and revoked dynamically via the {grantRole} and",
      "- * {revokeRole} functions. Each role has an associated admin role, and only",
      "- * accounts that have a role's admin role can call {grantRole} and {revokeRole}.",
      "- *",
      "- * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means",
      "- * that only accounts with this role will be able to grant or revoke other",
      "- * roles. More complex role relationships can be created by using",
      "- * {_setRoleAdmin}.",
      "- *",
      "- * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to",
      "- * grant and revoke this role. Extra precautions should be taken to secure",
      "- * accounts that have been granted it.",
      "- */",
      "-abstract contract AccessControl is Context, IAccessControl, ERC165 {",
      "-    struct RoleData {",
      "-        mapping(address => bool) members;",
      "-        bytes32 adminRole;",
      "-    }",
      "-",
      "-    mapping(bytes32 => RoleData) private _roles;",
      "-",
      "-    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;",
      "-",
      "-    /**",
      "-     * @dev Modifier that checks that an account has a specific role. Reverts",
      "-     * with a standardized message including the required role.",
      "-     *",
      "-     * The format of the revert reason is given by the following regular expression:",
      "-     *",
      "-     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/",
      "-     *",
      "-     * _Available since v4.1._",
      "-     */",
      "-    modifier onlyRole(bytes32 role) {",
      "-        _checkRole(role, _msgSender());",
      "-        _;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev See {IERC165-supportsInterface}.",
      "-     */",
      "-    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {",
      "-        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns `true` if `account` has been granted `role`.",
      "-     */",
      "-    function hasRole(bytes32 role, address account) public view override returns (bool) {",
      "-        return _roles[role].members[account];",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Revert with a standard message if `account` is missing `role`.",
      "-     *",
      "-     * The format of the revert reason is given by the following regular expression:",
      "-     *",
      "-     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/",
      "-     */",
      "-    function _checkRole(bytes32 role, address account) internal view {",
      "-        if (!hasRole(role, account)) {",
      "-            revert(",
      "-                string(",
      "-                    abi.encodePacked(",
      "-                        \"AccessControl: account \",",
      "-                        Strings.toHexString(uint160(account), 20),",
      "-                        \" is missing role \",",
      "-                        Strings.toHexString(uint256(role), 32)",
      "-                    )",
      "-                )",
      "-            );",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the admin role that controls `role`. See {grantRole} and",
      "-     * {revokeRole}.",
      "-     *",
      "-     * To change a role's admin, use {_setRoleAdmin}.",
      "-     */",
      "-    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {",
      "-        return _roles[role].adminRole;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Grants `role` to `account`.",
      "-     *",
      "-     * If `account` had not been already granted `role`, emits a {RoleGranted}",
      "-     * event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have ``role``'s admin role.",
      "-     */",
      "-    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {",
      "-        _grantRole(role, account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from `account`.",
      "-     *",
      "-     * If `account` had been granted `role`, emits a {RoleRevoked} event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have ``role``'s admin role.",
      "-     */",
      "-    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {",
      "-        _revokeRole(role, account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from the calling account.",
      "-     *",
      "-     * Roles are often managed via {grantRole} and {revokeRole}: this function's",
      "-     * purpose is to provide a mechanism for accounts to lose their privileges",
      "-     * if they are compromised (such as when a trusted device is misplaced).",
      "-     *",
      "-     * If the calling account had been revoked `role`, emits a {RoleRevoked}",
      "-     * event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must be `account`.",
      "-     */",
      "-    function renounceRole(bytes32 role, address account) public virtual override {",
      "-        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");",
      "-",
      "-        _revokeRole(role, account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Grants `role` to `account`.",
      "-     *",
      "-     * If `account` had not been already granted `role`, emits a {RoleGranted}",
      "-     * event. Note that unlike {grantRole}, this function doesn't perform any",
      "-     * checks on the calling account.",
      "-     *",
      "-     * [WARNING]",
      "-     * ====",
      "-     * This function should only be called from the constructor when setting",
      "-     * up the initial roles for the system.",
      "-     *",
      "-     * Using this function in any other way is effectively circumventing the admin",
      "-     * system imposed by {AccessControl}.",
      "-     * ====",
      "-     *",
      "-     * NOTE: This function is deprecated in favor of {_grantRole}.",
      "-     */",
      "-    function _setupRole(bytes32 role, address account) internal virtual {",
      "-        _grantRole(role, account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Sets `adminRole` as ``role``'s admin role.",
      "-     *",
      "-     * Emits a {RoleAdminChanged} event.",
      "-     */",
      "-    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {",
      "-        bytes32 previousAdminRole = getRoleAdmin(role);",
      "-        _roles[role].adminRole = adminRole;",
      "-        emit RoleAdminChanged(role, previousAdminRole, adminRole);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Grants `role` to `account`.",
      "-     *",
      "-     * Internal function without access restriction.",
      "-     */",
      "-    function _grantRole(bytes32 role, address account) internal virtual {",
      "-        if (!hasRole(role, account)) {",
      "-            _roles[role].members[account] = true;",
      "-            emit RoleGranted(role, account, _msgSender());",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from `account`.",
      "-     *",
      "-     * Internal function without access restriction.",
      "-     */",
      "-    function _revokeRole(bytes32 role, address account) internal virtual {",
      "-        if (hasRole(role, account)) {",
      "-            _roles[role].members[account] = false;",
      "-            emit RoleRevoked(role, account, _msgSender());",
      "-        }",
      "-    }",
      "-}",
      "-// import \"../utils/structs/EnumerableSet.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Library for managing",
      "- * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive",
      "- * types.",
      "- *",
      "- * Sets have the following properties:",
      "- *",
      "- * - Elements are added, removed, and checked for existence in constant time",
      "- * (O(1)).",
      "- * - Elements are enumerated in O(n). No guarantees are made on the ordering.",
      "- *",
      "- * ```",
      "- * contract Example {",
      "- *     // Add the library methods",
      "- *     using EnumerableSet for EnumerableSet.AddressSet;",
      "- *",
      "- *     // Declare a set state variable",
      "- *     EnumerableSet.AddressSet private mySet;",
      "- * }",
      "- * ```",
      "- *",
      "- * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)",
      "- * and `uint256` (`UintSet`) are supported.",
      "- */",
      "-library EnumerableSet {",
      "-    // To implement this library for multiple types with as little code",
      "-    // repetition as possible, we write it in terms of a generic Set type with",
      "-    // bytes32 values.",
      "-    // The Set implementation uses private functions, and user-facing",
      "-    // implementations (such as AddressSet) are just wrappers around the",
      "-    // underlying Set.",
      "-    // This means that we can only create new EnumerableSets for types that fit",
      "-    // in bytes32.",
      "-",
      "-    struct Set {",
      "-        // Storage of set values",
      "-        bytes32[] _values;",
      "-        // Position of the value in the `values` array, plus 1 because index 0",
      "-        // means a value is not in the set.",
      "-        mapping(bytes32 => uint256) _indexes;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Add a value to a set. O(1).",
      "-     *",
      "-     * Returns true if the value was added to the set, that is if it was not",
      "-     * already present.",
      "-     */",
      "-    function _add(Set storage set, bytes32 value) private returns (bool) {",
      "-        if (!_contains(set, value)) {",
      "-            set._values.push(value);",
      "-            // The value is stored at length-1, but we add 1 to all indexes",
      "-            // and use 0 as a sentinel value",
      "-            set._indexes[value] = set._values.length;",
      "-            return true;",
      "-        } else {",
      "-            return false;",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Removes a value from a set. O(1).",
      "-     *",
      "-     * Returns true if the value was removed from the set, that is if it was",
      "-     * present.",
      "-     */",
      "-    function _remove(Set storage set, bytes32 value) private returns (bool) {",
      "-        // We read and store the value's index to prevent multiple reads from the same storage slot",
      "-        uint256 valueIndex = set._indexes[value];",
      "-",
      "-        if (valueIndex != 0) {",
      "-            // Equivalent to contains(set, value)",
      "-            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in",
      "-            // the array, and then remove the last element (sometimes called as 'swap and pop').",
      "-            // This modifies the order of the array, as noted in {at}.",
      "-",
      "-            uint256 toDeleteIndex = valueIndex - 1;",
      "-            uint256 lastIndex = set._values.length - 1;",
      "-",
      "-            if (lastIndex != toDeleteIndex) {",
      "-                bytes32 lastvalue = set._values[lastIndex];",
      "-",
      "-                // Move the last value to the index where the value to delete is",
      "-                set._values[toDeleteIndex] = lastvalue;",
      "-                // Update the index for the moved value",
      "-                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex",
      "-            }",
      "-",
      "-            // Delete the slot where the moved value was stored",
      "-            set._values.pop();",
      "-",
      "-            // Delete the index for the deleted slot",
      "-            delete set._indexes[value];",
      "-",
      "-            return true;",
      "-        } else {",
      "-            return false;",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns true if the value is in the set. O(1).",
      "-     */",
      "-    function _contains(Set storage set, bytes32 value) private view returns (bool) {",
      "-        return set._indexes[value] != 0;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the number of values on the set. O(1).",
      "-     */",
      "-    function _length(Set storage set) private view returns (uint256) {",
      "-        return set._values.length;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the value stored at position `index` in the set. O(1).",
      "-     *",
      "-     * Note that there are no guarantees on the ordering of values inside the",
      "-     * array, and it may change when more values are added or removed.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `index` must be strictly less than {length}.",
      "-     */",
      "-    function _at(Set storage set, uint256 index) private view returns (bytes32) {",
      "-        return set._values[index];",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Return the entire set in an array",
      "-     *",
      "-     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed",
      "-     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that",
      "-     * this function has an unbounded cost, and using it as part of a state-changing function may render the function",
      "-     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.",
      "-     */",
      "-    function _values(Set storage set) private view returns (bytes32[] memory) {",
      "-        return set._values;",
      "-    }",
      "-",
      "-    // Bytes32Set",
      "-",
      "-    struct Bytes32Set {",
      "-        Set _inner;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Add a value to a set. O(1).",
      "-     *",
      "-     * Returns true if the value was added to the set, that is if it was not",
      "-     * already present.",
      "-     */",
      "-    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {",
      "-        return _add(set._inner, value);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Removes a value from a set. O(1).",
      "-     *",
      "-     * Returns true if the value was removed from the set, that is if it was",
      "-     * present.",
      "-     */",
      "-    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {",
      "-        return _remove(set._inner, value);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns true if the value is in the set. O(1).",
      "-     */",
      "-    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {",
      "-        return _contains(set._inner, value);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the number of values in the set. O(1).",
      "-     */",
      "-    function length(Bytes32Set storage set) internal view returns (uint256) {",
      "-        return _length(set._inner);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the value stored at position `index` in the set. O(1).",
      "-     *",
      "-     * Note that there are no guarantees on the ordering of values inside the",
      "-     * array, and it may change when more values are added or removed.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `index` must be strictly less than {length}.",
      "-     */",
      "-    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {",
      "-        return _at(set._inner, index);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Return the entire set in an array",
      "-     *",
      "-     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed",
      "-     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that",
      "-     * this function has an unbounded cost, and using it as part of a state-changing function may render the function",
      "-     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.",
      "-     */",
      "-    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {",
      "-        return _values(set._inner);",
      "-    }",
      "-",
      "-    // AddressSet",
      "-",
      "-    struct AddressSet {",
      "-        Set _inner;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Add a value to a set. O(1).",
      "-     *",
      "-     * Returns true if the value was added to the set, that is if it was not",
      "-     * already present.",
      "-     */",
      "-    function add(AddressSet storage set, address value) internal returns (bool) {",
      "-        return _add(set._inner, bytes32(uint256(uint160(value))));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Removes a value from a set. O(1).",
      "-     *",
      "-     * Returns true if the value was removed from the set, that is if it was",
      "-     * present.",
      "-     */",
      "-    function remove(AddressSet storage set, address value) internal returns (bool) {",
      "-        return _remove(set._inner, bytes32(uint256(uint160(value))));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns true if the value is in the set. O(1).",
      "-     */",
      "-    function contains(AddressSet storage set, address value) internal view returns (bool) {",
      "-        return _contains(set._inner, bytes32(uint256(uint160(value))));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the number of values in the set. O(1).",
      "-     */",
      "-    function length(AddressSet storage set) internal view returns (uint256) {",
      "-        return _length(set._inner);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the value stored at position `index` in the set. O(1).",
      "-     *",
      "-     * Note that there are no guarantees on the ordering of values inside the",
      "-     * array, and it may change when more values are added or removed.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `index` must be strictly less than {length}.",
      "-     */",
      "-    function at(AddressSet storage set, uint256 index) internal view returns (address) {",
      "-        return address(uint160(uint256(_at(set._inner, index))));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Return the entire set in an array",
      "-     *",
      "-     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed",
      "-     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that",
      "-     * this function has an unbounded cost, and using it as part of a state-changing function may render the function",
      "-     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.",
      "-     */",
      "-    function values(AddressSet storage set) internal view returns (address[] memory) {",
      "-        bytes32[] memory store = _values(set._inner);",
      "-        address[] memory result;",
      "-",
      "-        assembly {",
      "-            result := store",
      "-        }",
      "-",
      "-        return result;",
      "-    }",
      "-",
      "-    // UintSet",
      "-",
      "-    struct UintSet {",
      "-        Set _inner;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Add a value to a set. O(1).",
      "-     *",
      "-     * Returns true if the value was added to the set, that is if it was not",
      "-     * already present.",
      "-     */",
      "-    function add(UintSet storage set, uint256 value) internal returns (bool) {",
      "-        return _add(set._inner, bytes32(value));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Removes a value from a set. O(1).",
      "-     *",
      "-     * Returns true if the value was removed from the set, that is if it was",
      "-     * present.",
      "-     */",
      "-    function remove(UintSet storage set, uint256 value) internal returns (bool) {",
      "-        return _remove(set._inner, bytes32(value));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns true if the value is in the set. O(1).",
      "-     */",
      "-    function contains(UintSet storage set, uint256 value) internal view returns (bool) {",
      "-        return _contains(set._inner, bytes32(value));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the number of values on the set. O(1).",
      "-     */",
      "-    function length(UintSet storage set) internal view returns (uint256) {",
      "-        return _length(set._inner);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the value stored at position `index` in the set. O(1).",
      "-     *",
      "-     * Note that there are no guarantees on the ordering of values inside the",
      "-     * array, and it may change when more values are added or removed.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `index` must be strictly less than {length}.",
      "-     */",
      "-    function at(UintSet storage set, uint256 index) internal view returns (uint256) {",
      "-        return uint256(_at(set._inner, index));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Return the entire set in an array",
      "-     *",
      "-     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed",
      "-     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that",
      "-     * this function has an unbounded cost, and using it as part of a state-changing function may render the function",
      "-     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.",
      "-     */",
      "-    function values(UintSet storage set) internal view returns (uint256[] memory) {",
      "-        bytes32[] memory store = _values(set._inner);",
      "-        uint256[] memory result;",
      "-",
      "-        assembly {",
      "-            result := store",
      "-        }",
      "-",
      "-        return result;",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @dev Extension of {AccessControl} that allows enumerating the members of each role.",
      "- */",
      "-abstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {",
      "-    using EnumerableSet for EnumerableSet.AddressSet;",
      "-",
      "-    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;",
      "-",
      "-    /**",
      "-     * @dev See {IERC165-supportsInterface}.",
      "-     */",
      "-    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {",
      "-        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns one of the accounts that have `role`. `index` must be a",
      "-     * value between 0 and {getRoleMemberCount}, non-inclusive.",
      "-     *",
      "-     * Role bearers are not sorted in any particular way, and their ordering may",
      "-     * change at any point.",
      "-     *",
      "-     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure",
      "-     * you perform all queries on the same block. See the following",
      "-     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]",
      "-     * for more information.",
      "-     */",
      "-    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {",
      "-        return _roleMembers[role].at(index);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the number of accounts that have `role`. Can be used",
      "-     * together with {getRoleMember} to enumerate all bearers of a role.",
      "-     */",
      "-    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {",
      "-        return _roleMembers[role].length();",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Overload {_grantRole} to track enumerable memberships",
      "-     */",
      "-    function _grantRole(bytes32 role, address account) internal virtual override {",
      "-        super._grantRole(role, account);",
      "-        _roleMembers[role].add(account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Overload {_revokeRole} to track enumerable memberships",
      "-     */",
      "-    function _revokeRole(bytes32 role, address account) internal virtual override {",
      "-        super._revokeRole(role, account);",
      "-        _roleMembers[role].remove(account);",
      "-    }",
      "-}",
      "-// import \"../../../utils/Context.sol\";",
      "-",
      "-/**",
      "- * @dev {ERC20} token, including:",
      "- *",
      "- *  - ability for holders to burn (destroy) their tokens",
      "- *  - a minter role that allows for token minting (creation)",
      "- *  - a pauser role that allows to stop all token transfers",
      "- *",
      "- * This contract uses {AccessControl} to lock permissioned functions using the",
      "- * different roles - head to its documentation for details.",
      "- *",
      "- * The account that deploys the contract will be granted the minter and pauser",
      "- * roles, as well as the default admin role, which will let it grant both minter",
      "- * and pauser roles to other accounts.",
      "- */",
      "-contract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {",
      "-    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");",
      "-    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");",
      "-",
      "-    /**",
      "-     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the",
      "-     * account that deploys the contract.",
      "-     *",
      "-     * See {ERC20-constructor}.",
      "-     */",
      "-    constructor(string memory name, string memory symbol) ERC20(name, symbol) {",
      "-        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());",
      "-",
      "-        _setupRole(MINTER_ROLE, _msgSender());",
      "-        _setupRole(PAUSER_ROLE, _msgSender());",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Creates `amount` new tokens for `to`.",
      "-     *",
      "-     * See {ERC20-_mint}.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have the `MINTER_ROLE`.",
      "-     */",
      "-    function mint(address to, uint256 amount) public virtual {",
      "-        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");",
      "-        _mint(to, amount);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Pauses all token transfers.",
      "-     *",
      "-     * See {ERC20Pausable} and {Pausable-_pause}.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have the `PAUSER_ROLE`.",
      "-     */",
      "-    function pause() public virtual {",
      "-        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");",
      "-        _pause();",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Unpauses all token transfers.",
      "-     *",
      "-     * See {ERC20Pausable} and {Pausable-_unpause}.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have the `PAUSER_ROLE`.",
      "-     */",
      "-    function unpause() public virtual {",
      "-        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");",
      "-        _unpause();",
      "-    }",
      "-",
      "-    function _beforeTokenTransfer(",
      "-        address from,",
      "-        address to,",
      "-        uint256 amount",
      "-    ) internal virtual override(ERC20, ERC20Pausable) {",
      "-        super._beforeTokenTransfer(from, to, amount);",
      "-    }",
      "-}",
      "-// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../utils/ContextUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-// import \"../proxy/utils/Initializable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../../utils/AddressUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Collection of functions related to the address type",
      "- */",
      "-library AddressUpgradeable {",
      "-    /**",
      "-     * @dev Returns true if `account` is a contract.",
      "-     *",
      "-     * [IMPORTANT]",
      "-     * ====",
      "-     * It is unsafe to assume that an address for which this function returns",
      "-     * false is an externally-owned account (EOA) and not a contract.",
      "-     *",
      "-     * Among others, `isContract` will return false for the following",
      "-     * types of addresses:",
      "-     *",
      "-     *  - an externally-owned account",
      "-     *  - a contract in construction",
      "-     *  - an address where a contract will be created",
      "-     *  - an address where a contract lived, but was destroyed",
      "-     * ====",
      "-     */",
      "-    function isContract(address account) internal view returns (bool) {",
      "-        // This method relies on extcodesize, which returns 0 for contracts in",
      "-        // construction, since the code is only stored at the end of the",
      "-        // constructor execution.",
      "-",
      "-        uint256 size;",
      "-        assembly {",
      "-            size := extcodesize(account)",
      "-        }",
      "-        return size > 0;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to",
      "-     * `recipient`, forwarding all available gas and reverting on errors.",
      "-     *",
      "-     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost",
      "-     * of certain opcodes, possibly making contracts go over the 2300 gas limit",
      "-     * imposed by `transfer`, making them unable to receive funds via",
      "-     * `transfer`. {sendValue} removes this limitation.",
      "-     *",
      "-     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].",
      "-     *",
      "-     * IMPORTANT: because control is transferred to `recipient`, care must be",
      "-     * taken to not create reentrancy vulnerabilities. Consider using",
      "-     * {ReentrancyGuard} or the",
      "-     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].",
      "-     */",
      "-    function sendValue(address payable recipient, uint256 amount) internal {",
      "-        require(address(this).balance >= amount, \"Address: insufficient balance\");",
      "-",
      "-        (bool success, ) = recipient.call{value: amount}(\"\");",
      "-        require(success, \"Address: unable to send value, recipient may have reverted\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Performs a Solidity function call using a low level `call`. A",
      "-     * plain `call` is an unsafe replacement for a function call: use this",
      "-     * function instead.",
      "-     *",
      "-     * If `target` reverts with a revert reason, it is bubbled up by this",
      "-     * function (like regular Solidity function calls).",
      "-     *",
      "-     * Returns the raw returned data. To convert to the expected return value,",
      "-     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `target` must be a contract.",
      "-     * - calling `target` with `data` must not revert.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCall(address target, bytes memory data) internal returns (bytes memory) {",
      "-        return functionCall(target, data, \"Address: low-level call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with",
      "-     * `errorMessage` as a fallback revert reason when `target` reverts.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, 0, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but also transferring `value` wei to `target`.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the calling contract must have an ETH balance of at least `value`.",
      "-     * - the called Solidity function must be `payable`.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCallWithValue(",
      "-        address target,",
      "-        bytes memory data,",
      "-        uint256 value",
      "-    ) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but",
      "-     * with `errorMessage` as a fallback revert reason when `target` reverts.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCallWithValue(",
      "-        address target,",
      "-        bytes memory data,",
      "-        uint256 value,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        require(address(this).balance >= value, \"Address: insufficient balance for call\");",
      "-        require(isContract(target), \"Address: call to non-contract\");",
      "-",
      "-        (bool success, bytes memory returndata) = target.call{value: value}(data);",
      "-        return verifyCallResult(success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but performing a static call.",
      "-     *",
      "-     * _Available since v3.3._",
      "-     */",
      "-    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {",
      "-        return functionStaticCall(target, data, \"Address: low-level static call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],",
      "-     * but performing a static call.",
      "-     *",
      "-     * _Available since v3.3._",
      "-     */",
      "-    function functionStaticCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal view returns (bytes memory) {",
      "-        require(isContract(target), \"Address: static call to non-contract\");",
      "-",
      "-        (bool success, bytes memory returndata) = target.staticcall(data);",
      "-        return verifyCallResult(success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the",
      "-     * revert reason using the provided one.",
      "-     *",
      "-     * _Available since v4.3._",
      "-     */",
      "-    function verifyCallResult(",
      "-        bool success,",
      "-        bytes memory returndata,",
      "-        string memory errorMessage",
      "-    ) internal pure returns (bytes memory) {",
      "-        if (success) {",
      "-            return returndata;",
      "-        } else {",
      "-            // Look for revert reason and bubble it up if present",
      "-            if (returndata.length > 0) {",
      "-                // The easiest way to bubble the revert reason is using memory via assembly",
      "-",
      "-                assembly {",
      "-                    let returndata_size := mload(returndata)",
      "-                    revert(add(32, returndata), returndata_size)",
      "-                }",
      "-            } else {",
      "-                revert(errorMessage);",
      "-            }",
      "-        }",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed",
      "- * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an",
      "- * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer",
      "- * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.",
      "- *",
      "- * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as",
      "- * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.",
      "- *",
      "- * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure",
      "- * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.",
      "- *",
      "- * [CAUTION]",
      "- * ====",
      "- * Avoid leaving a contract uninitialized.",
      "- *",
      "- * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation",
      "- * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the",
      "- * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:",
      "- *",
      "- * [.hljs-theme-light.nopadding]",
      "- * ```",
      "- * /// @custom:oz-upgrades-unsafe-allow constructor",
      "- * constructor() initializer {}",
      "- * ```",
      "- * ====",
      "- */",
      "-abstract contract Initializable {",
      "-    /**",
      "-     * @dev Indicates that the contract has been initialized.",
      "-     */",
      "-    bool private _initialized;",
      "-",
      "-    /**",
      "-     * @dev Indicates that the contract is in the process of being initialized.",
      "-     */",
      "-    bool private _initializing;",
      "-",
      "-    /**",
      "-     * @dev Modifier to protect an initializer function from being invoked twice.",
      "-     */",
      "-    modifier initializer() {",
      "-        // If the contract is initializing we ignore whether _initialized is set in order to support multiple",
      "-        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the",
      "-        // contract may have been reentered.",
      "-        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");",
      "-",
      "-        bool isTopLevelCall = !_initializing;",
      "-        if (isTopLevelCall) {",
      "-            _initializing = true;",
      "-            _initialized = true;",
      "-        }",
      "-",
      "-        _;",
      "-",
      "-        if (isTopLevelCall) {",
      "-            _initializing = false;",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the",
      "-     * {initializer} modifier, directly or indirectly.",
      "-     */",
      "-    modifier onlyInitializing() {",
      "-        require(_initializing, \"Initializable: contract is not initializing\");",
      "-        _;",
      "-    }",
      "-",
      "-    function _isConstructor() private view returns (bool) {",
      "-        return !AddressUpgradeable.isContract(address(this));",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @dev Provides information about the current execution context, including the",
      "- * sender of the transaction and its data. While these are generally available",
      "- * via msg.sender and msg.data, they should not be accessed in such a direct",
      "- * manner, since when dealing with meta-transactions the account sending and",
      "- * paying for execution may not be the actual sender (as far as an application",
      "- * is concerned).",
      "- *",
      "- * This contract is only required for intermediate, library-like contracts.",
      "- */",
      "-abstract contract ContextUpgradeable is Initializable {",
      "-    function __Context_init() internal onlyInitializing {",
      "-        __Context_init_unchained();",
      "-    }",
      "-",
      "-    function __Context_init_unchained() internal onlyInitializing {",
      "-    }",
      "-    function _msgSender() internal view virtual returns (address) {",
      "-        return msg.sender;",
      "-    }",
      "-",
      "-    function _msgData() internal view virtual returns (bytes calldata) {",
      "-        return msg.data;",
      "-    }",
      "-    uint256[50] private __gap;",
      "-}",
      "-// import \"../proxy/utils/Initializable.sol\";",
      "-",
      "-/**",
      "- * @dev Contract module which provides a basic access control mechanism, where",
      "- * there is an account (an owner) that can be granted exclusive access to",
      "- * specific functions.",
      "- *",
      "- * By default, the owner account will be the one that deploys the contract. This",
      "- * can later be changed with {transferOwnership}.",
      "- *",
      "- * This module is used through inheritance. It will make available the modifier",
      "- * `onlyOwner`, which can be applied to your functions to restrict their use to",
      "- * the owner.",
      "- */",
      "-abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {",
      "-    address private _owner;",
      "-",
      "-    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);",
      "-",
      "-    /**",
      "-     * @dev Initializes the contract setting the deployer as the initial owner.",
      "-     */",
      "-    function __Ownable_init() internal onlyInitializing {",
      "-        __Context_init_unchained();",
      "-        __Ownable_init_unchained();",
      "-    }",
      "-",
      "-    function __Ownable_init_unchained() internal onlyInitializing {",
      "-        _transferOwnership(_msgSender());",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the address of the current owner.",
      "-     */",
      "-    function owner() public view virtual returns (address) {",
      "-        return _owner;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Throws if called by any account other than the owner.",
      "-     */",
      "-    modifier onlyOwner() {",
      "-        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");",
      "-        _;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Leaves the contract without owner. It will not be possible to call",
      "-     * `onlyOwner` functions anymore. Can only be called by the current owner.",
      "-     *",
      "-     * NOTE: Renouncing ownership will leave the contract without an owner,",
      "-     * thereby removing any functionality that is only available to the owner.",
      "-     */",
      "-    function renounceOwnership() public virtual onlyOwner {",
      "-        _transferOwnership(address(0));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
      "-     * Can only be called by the current owner.",
      "-     */",
      "-    function transferOwnership(address newOwner) public virtual onlyOwner {",
      "-        require(newOwner != address(0), \"Ownable: new owner is the zero address\");",
      "-        _transferOwnership(newOwner);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
      "-     * Internal function without access restriction.",
      "-     */",
      "-    function _transferOwnership(address newOwner) internal virtual {",
      "-        address oldOwner = _owner;",
      "-        _owner = newOwner;",
      "-        emit OwnershipTransferred(oldOwner, newOwner);",
      "-    }",
      "-    uint256[49] private __gap;",
      "-}",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"../IERC20.sol\";",
      "-// import \"../../../utils/Address.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Collection of functions related to the address type",
      "- */",
      "-library Address {",
      "-    /**",
      "-     * @dev Returns true if `account` is a contract.",
      "-     *",
      "-     * [IMPORTANT]",
      "-     * ====",
      "-     * It is unsafe to assume that an address for which this function returns",
      "-     * false is an externally-owned account (EOA) and not a contract.",
      "-     *",
      "-     * Among others, `isContract` will return false for the following",
      "-     * types of addresses:",
      "-     *",
      "-     *  - an externally-owned account",
      "-     *  - a contract in construction",
      "-     *  - an address where a contract will be created",
      "-     *  - an address where a contract lived, but was destroyed",
      "-     * ====",
      "-     */",
      "-    function isContract(address account) internal view returns (bool) {",
      "-        // This method relies on extcodesize, which returns 0 for contracts in",
      "-        // construction, since the code is only stored at the end of the",
      "-        // constructor execution.",
      "-",
      "-        uint256 size;",
      "-        assembly {",
      "-            size := extcodesize(account)",
      "-        }",
      "-        return size > 0;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to",
      "-     * `recipient`, forwarding all available gas and reverting on errors.",
      "-     *",
      "-     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost",
      "-     * of certain opcodes, possibly making contracts go over the 2300 gas limit",
      "-     * imposed by `transfer`, making them unable to receive funds via",
      "-     * `transfer`. {sendValue} removes this limitation.",
      "-     *",
      "-     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].",
      "-     *",
      "-     * IMPORTANT: because control is transferred to `recipient`, care must be",
      "-     * taken to not create reentrancy vulnerabilities. Consider using",
      "-     * {ReentrancyGuard} or the",
      "-     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].",
      "-     */",
      "-    function sendValue(address payable recipient, uint256 amount) internal {",
      "-        require(address(this).balance >= amount, \"Address: insufficient balance\");",
      "-",
      "-        (bool success, ) = recipient.call{value: amount}(\"\");",
      "-        require(success, \"Address: unable to send value, recipient may have reverted\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Performs a Solidity function call using a low level `call`. A",
      "-     * plain `call` is an unsafe replacement for a function call: use this",
      "-     * function instead.",
      "-     *",
      "-     * If `target` reverts with a revert reason, it is bubbled up by this",
      "-     * function (like regular Solidity function calls).",
      "-     *",
      "-     * Returns the raw returned data. To convert to the expected return value,",
      "-     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `target` must be a contract.",
      "-     * - calling `target` with `data` must not revert.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCall(address target, bytes memory data) internal returns (bytes memory) {",
      "-        return functionCall(target, data, \"Address: low-level call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with",
      "-     * `errorMessage` as a fallback revert reason when `target` reverts.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, 0, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but also transferring `value` wei to `target`.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the calling contract must have an ETH balance of at least `value`.",
      "-     * - the called Solidity function must be `payable`.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCallWithValue(",
      "-        address target,",
      "-        bytes memory data,",
      "-        uint256 value",
      "-    ) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but",
      "-     * with `errorMessage` as a fallback revert reason when `target` reverts.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCallWithValue(",
      "-        address target,",
      "-        bytes memory data,",
      "-        uint256 value,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        require(address(this).balance >= value, \"Address: insufficient balance for call\");",
      "-        require(isContract(target), \"Address: call to non-contract\");",
      "-",
      "-        (bool success, bytes memory returndata) = target.call{value: value}(data);",
      "-        return verifyCallResult(success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but performing a static call.",
      "-     *",
      "-     * _Available since v3.3._",
      "-     */",
      "-    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {",
      "-        return functionStaticCall(target, data, \"Address: low-level static call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],",
      "-     * but performing a static call.",
      "-     *",
      "-     * _Available since v3.3._",
      "-     */",
      "-    function functionStaticCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal view returns (bytes memory) {",
      "-        require(isContract(target), \"Address: static call to non-contract\");",
      "-",
      "-        (bool success, bytes memory returndata) = target.staticcall(data);",
      "-        return verifyCallResult(success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but performing a delegate call.",
      "-     *",
      "-     * _Available since v3.4._",
      "-     */",
      "-    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {",
      "-        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],",
      "-     * but performing a delegate call.",
      "-     *",
      "-     * _Available since v3.4._",
      "-     */",
      "-    function functionDelegateCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        require(isContract(target), \"Address: delegate call to non-contract\");",
      "-",
      "-        (bool success, bytes memory returndata) = target.delegatecall(data);",
      "-        return verifyCallResult(success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the",
      "-     * revert reason using the provided one.",
      "-     *",
      "-     * _Available since v4.3._",
      "-     */",
      "-    function verifyCallResult(",
      "-        bool success,",
      "-        bytes memory returndata,",
      "-        string memory errorMessage",
      "-    ) internal pure returns (bytes memory) {",
      "-        if (success) {",
      "-            return returndata;",
      "-        } else {",
      "-            // Look for revert reason and bubble it up if present",
      "-            if (returndata.length > 0) {",
      "-                // The easiest way to bubble the revert reason is using memory via assembly",
      "-",
      "-                assembly {",
      "-                    let returndata_size := mload(returndata)",
      "-                    revert(add(32, returndata), returndata_size)",
      "-                }",
      "-            } else {",
      "-                revert(errorMessage);",
      "-            }",
      "-        }",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @title SafeERC20",
      "- * @dev Wrappers around ERC20 operations that throw on failure (when the token",
      "- * contract returns false). Tokens that return no value (and instead revert or",
      "- * throw on failure) are also supported, non-reverting calls are assumed to be",
      "- * successful.",
      "- * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,",
      "- * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
      "- */",
      "-library SafeERC20 {",
      "-    using Address for address;",
      "-",
      "-    function safeTransfer(",
      "-        IERC20 token,",
      "-        address to,",
      "-        uint256 value",
      "-    ) internal {",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));",
      "-    }",
      "-",
      "-    function safeTransferFrom(",
      "-        IERC20 token,",
      "-        address from,",
      "-        address to,",
      "-        uint256 value",
      "-    ) internal {",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Deprecated. This function has issues similar to the ones found in",
      "-     * {IERC20-approve}, and its usage is discouraged.",
      "-     *",
      "-     * Whenever possible, use {safeIncreaseAllowance} and",
      "-     * {safeDecreaseAllowance} instead.",
      "-     */",
      "-    function safeApprove(",
      "-        IERC20 token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        // safeApprove should only be called when setting an initial allowance,",
      "-        // or when resetting it to zero. To increase and decrease it, use",
      "-        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'",
      "-        require(",
      "-            (value == 0) || (token.allowance(address(this), spender) == 0),",
      "-            \"SafeERC20: approve from non-zero to non-zero allowance\"",
      "-        );",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));",
      "-    }",
      "-",
      "-    function safeIncreaseAllowance(",
      "-        IERC20 token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        uint256 newAllowance = token.allowance(address(this), spender) + value;",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));",
      "-    }",
      "-",
      "-    function safeDecreaseAllowance(",
      "-        IERC20 token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        unchecked {",
      "-            uint256 oldAllowance = token.allowance(address(this), spender);",
      "-            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");",
      "-            uint256 newAllowance = oldAllowance - value;",
      "-            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement",
      "-     * on the return value: the return value is optional (but if data is returned, it must not be false).",
      "-     * @param token The token targeted by the call.",
      "-     * @param data The call data (encoded using abi.encode or one of its variants).",
      "-     */",
      "-    function _callOptionalReturn(IERC20 token, bytes memory data) private {",
      "-        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since",
      "-        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that",
      "-        // the target address contains contract code and also asserts for success in the low-level call.",
      "-",
      "-        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");",
      "-        if (returndata.length > 0) {",
      "-            // Return data is optional",
      "-            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");",
      "-        }",
      "-    }",
      "-}",
      "-// import \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-",
      "-// import \"../timelock/RelockBonusStaking.sol\";",
      "-// IGNORE_LICENSE-Identifier: ISC",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";",
      "-// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-// import \"../base/TaxedStaking.sol\";",
      "-// IGNORE_LICENSE-Identifier: ISC",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";",
      "-// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-// import \"./BaseStaking.sol\";",
      "-// IGNORE_LICENSE-Identifier: ISC",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";",
      "-// import \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"./IAccessControlUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev External interface of AccessControl declared to support ERC165 detection.",
      "- */",
      "-interface IAccessControlUpgradeable {",
      "-    /**",
      "-     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`",
      "-     *",
      "-     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite",
      "-     * {RoleAdminChanged} not being emitted signaling this.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);",
      "-",
      "-    /**",
      "-     * @dev Emitted when `account` is granted `role`.",
      "-     *",
      "-     * `sender` is the account that originated the contract call, an admin role",
      "-     * bearer except when using {AccessControl-_setupRole}.",
      "-     */",
      "-    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);",
      "-",
      "-    /**",
      "-     * @dev Emitted when `account` is revoked `role`.",
      "-     *",
      "-     * `sender` is the account that originated the contract call:",
      "-     *   - if using `revokeRole`, it is the admin role bearer",
      "-     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)",
      "-     */",
      "-    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);",
      "-",
      "-    /**",
      "-     * @dev Returns `true` if `account` has been granted `role`.",
      "-     */",
      "-    function hasRole(bytes32 role, address account) external view returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Returns the admin role that controls `role`. See {grantRole} and",
      "-     * {revokeRole}.",
      "-     *",
      "-     * To change a role's admin, use {AccessControl-_setRoleAdmin}.",
      "-     */",
      "-    function getRoleAdmin(bytes32 role) external view returns (bytes32);",
      "-",
      "-    /**",
      "-     * @dev Grants `role` to `account`.",
      "-     *",
      "-     * If `account` had not been already granted `role`, emits a {RoleGranted}",
      "-     * event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have ``role``'s admin role.",
      "-     */",
      "-    function grantRole(bytes32 role, address account) external;",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from `account`.",
      "-     *",
      "-     * If `account` had been granted `role`, emits a {RoleRevoked} event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have ``role``'s admin role.",
      "-     */",
      "-    function revokeRole(bytes32 role, address account) external;",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from the calling account.",
      "-     *",
      "-     * Roles are often managed via {grantRole} and {revokeRole}: this function's",
      "-     * purpose is to provide a mechanism for accounts to lose their privileges",
      "-     * if they are compromised (such as when a trusted device is misplaced).",
      "-     *",
      "-     * If the calling account had been granted `role`, emits a {RoleRevoked}",
      "-     * event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must be `account`.",
      "-     */",
      "-    function renounceRole(bytes32 role, address account) external;",
      "-}",
      "-// import \"../utils/ContextUpgradeable.sol\";",
      "-// import \"../utils/StringsUpgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev String operations.",
      "- */",
      "-library StringsUpgradeable {",
      "-    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";",
      "-",
      "-    /**",
      "-     * @dev Converts a `uint256` to its ASCII `string` decimal representation.",
      "-     */",
      "-    function toString(uint256 value) internal pure returns (string memory) {",
      "-        // Inspired by OraclizeAPI's implementation - MIT licence",
      "-        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol",
      "-",
      "-        if (value == 0) {",
      "-            return \"0\";",
      "-        }",
      "-        uint256 temp = value;",
      "-        uint256 digits;",
      "-        while (temp != 0) {",
      "-            digits++;",
      "-            temp /= 10;",
      "-        }",
      "-        bytes memory buffer = new bytes(digits);",
      "-        while (value != 0) {",
      "-            digits -= 1;",
      "-            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));",
      "-            value /= 10;",
      "-        }",
      "-        return string(buffer);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.",
      "-     */",
      "-    function toHexString(uint256 value) internal pure returns (string memory) {",
      "-        if (value == 0) {",
      "-            return \"0x00\";",
      "-        }",
      "-        uint256 temp = value;",
      "-        uint256 length = 0;",
      "-        while (temp != 0) {",
      "-            length++;",
      "-            temp >>= 8;",
      "-        }",
      "-        return toHexString(value, length);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.",
      "-     */",
      "-    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {",
      "-        bytes memory buffer = new bytes(2 * length + 2);",
      "-        buffer[0] = \"0\";",
      "-        buffer[1] = \"x\";",
      "-        for (uint256 i = 2 * length + 1; i > 1; --i) {",
      "-            buffer[i] = _HEX_SYMBOLS[value & 0xf];",
      "-            value >>= 4;",
      "-        }",
      "-        require(value == 0, \"Strings: hex length insufficient\");",
      "-        return string(buffer);",
      "-    }",
      "-}",
      "-// import \"../utils/introspection/ERC165Upgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"./IERC165Upgradeable.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Interface of the ERC165 standard, as defined in the",
      "- * https://eips.ethereum.org/EIPS/eip-165[EIP].",
      "- *",
      "- * Implementers can declare support of contract interfaces, which can then be",
      "- * queried by others ({ERC165Checker}).",
      "- *",
      "- * For an implementation, see {ERC165}.",
      "- */",
      "-interface IERC165Upgradeable {",
      "-    /**",
      "-     * @dev Returns true if this contract implements the interface defined by",
      "-     * `interfaceId`. See the corresponding",
      "-     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]",
      "-     * to learn more about how these ids are created.",
      "-     *",
      "-     * This function call must use less than 30 000 gas.",
      "-     */",
      "-    function supportsInterface(bytes4 interfaceId) external view returns (bool);",
      "-}",
      "-// import \"../../proxy/utils/Initializable.sol\";",
      "-",
      "-/**",
      "- * @dev Implementation of the {IERC165} interface.",
      "- *",
      "- * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check",
      "- * for the additional interface id that will be supported. For example:",
      "- *",
      "- * ```solidity",
      "- * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {",
      "- *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);",
      "- * }",
      "- * ```",
      "- *",
      "- * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
      "- */",
      "-abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {",
      "-    function __ERC165_init() internal onlyInitializing {",
      "-        __ERC165_init_unchained();",
      "-    }",
      "-",
      "-    function __ERC165_init_unchained() internal onlyInitializing {",
      "-    }",
      "-    /**",
      "-     * @dev See {IERC165-supportsInterface}.",
      "-     */",
      "-    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {",
      "-        return interfaceId == type(IERC165Upgradeable).interfaceId;",
      "-    }",
      "-    uint256[50] private __gap;",
      "-}",
      "-// import \"../proxy/utils/Initializable.sol\";",
      "-",
      "-/**",
      "- * @dev Contract module that allows children to implement role-based access",
      "- * control mechanisms. This is a lightweight version that doesn't allow enumerating role",
      "- * members except through off-chain means by accessing the contract event logs. Some",
      "- * applications may benefit from on-chain enumerability, for those cases see",
      "- * {AccessControlEnumerable}.",
      "- *",
      "- * Roles are referred to by their `bytes32` identifier. These should be exposed",
      "- * in the external API and be unique. The best way to achieve this is by",
      "- * using `public constant` hash digests:",
      "- *",
      "- * ```",
      "- * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");",
      "- * ```",
      "- *",
      "- * Roles can be used to represent a set of permissions. To restrict access to a",
      "- * function call, use {hasRole}:",
      "- *",
      "- * ```",
      "- * function foo() public {",
      "- *     require(hasRole(MY_ROLE, msg.sender));",
      "- *     ...",
      "- * }",
      "- * ```",
      "- *",
      "- * Roles can be granted and revoked dynamically via the {grantRole} and",
      "- * {revokeRole} functions. Each role has an associated admin role, and only",
      "- * accounts that have a role's admin role can call {grantRole} and {revokeRole}.",
      "- *",
      "- * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means",
      "- * that only accounts with this role will be able to grant or revoke other",
      "- * roles. More complex role relationships can be created by using",
      "- * {_setRoleAdmin}.",
      "- *",
      "- * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to",
      "- * grant and revoke this role. Extra precautions should be taken to secure",
      "- * accounts that have been granted it.",
      "- */",
      "-abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {",
      "-    function __AccessControl_init() internal onlyInitializing {",
      "-        __Context_init_unchained();",
      "-        __ERC165_init_unchained();",
      "-        __AccessControl_init_unchained();",
      "-    }",
      "-",
      "-    function __AccessControl_init_unchained() internal onlyInitializing {",
      "-    }",
      "-    struct RoleData {",
      "-        mapping(address => bool) members;",
      "-        bytes32 adminRole;",
      "-    }",
      "-",
      "-    mapping(bytes32 => RoleData) private _roles;",
      "-",
      "-    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;",
      "-",
      "-    /**",
      "-     * @dev Modifier that checks that an account has a specific role. Reverts",
      "-     * with a standardized message including the required role.",
      "-     *",
      "-     * The format of the revert reason is given by the following regular expression:",
      "-     *",
      "-     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/",
      "-     *",
      "-     * _Available since v4.1._",
      "-     */",
      "-    modifier onlyRole(bytes32 role) {",
      "-        _checkRole(role, _msgSender());",
      "-        _;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev See {IERC165-supportsInterface}.",
      "-     */",
      "-    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {",
      "-        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns `true` if `account` has been granted `role`.",
      "-     */",
      "-    function hasRole(bytes32 role, address account) public view override returns (bool) {",
      "-        return _roles[role].members[account];",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Revert with a standard message if `account` is missing `role`.",
      "-     *",
      "-     * The format of the revert reason is given by the following regular expression:",
      "-     *",
      "-     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/",
      "-     */",
      "-    function _checkRole(bytes32 role, address account) internal view {",
      "-        if (!hasRole(role, account)) {",
      "-            revert(",
      "-                string(",
      "-                    abi.encodePacked(",
      "-                        \"AccessControl: account \",",
      "-                        StringsUpgradeable.toHexString(uint160(account), 20),",
      "-                        \" is missing role \",",
      "-                        StringsUpgradeable.toHexString(uint256(role), 32)",
      "-                    )",
      "-                )",
      "-            );",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Returns the admin role that controls `role`. See {grantRole} and",
      "-     * {revokeRole}.",
      "-     *",
      "-     * To change a role's admin, use {_setRoleAdmin}.",
      "-     */",
      "-    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {",
      "-        return _roles[role].adminRole;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Grants `role` to `account`.",
      "-     *",
      "-     * If `account` had not been already granted `role`, emits a {RoleGranted}",
      "-     * event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have ``role``'s admin role.",
      "-     */",
      "-    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {",
      "-        _grantRole(role, account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from `account`.",
      "-     *",
      "-     * If `account` had been granted `role`, emits a {RoleRevoked} event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must have ``role``'s admin role.",
      "-     */",
      "-    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {",
      "-        _revokeRole(role, account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from the calling account.",
      "-     *",
      "-     * Roles are often managed via {grantRole} and {revokeRole}: this function's",
      "-     * purpose is to provide a mechanism for accounts to lose their privileges",
      "-     * if they are compromised (such as when a trusted device is misplaced).",
      "-     *",
      "-     * If the calling account had been revoked `role`, emits a {RoleRevoked}",
      "-     * event.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the caller must be `account`.",
      "-     */",
      "-    function renounceRole(bytes32 role, address account) public virtual override {",
      "-        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");",
      "-",
      "-        _revokeRole(role, account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Grants `role` to `account`.",
      "-     *",
      "-     * If `account` had not been already granted `role`, emits a {RoleGranted}",
      "-     * event. Note that unlike {grantRole}, this function doesn't perform any",
      "-     * checks on the calling account.",
      "-     *",
      "-     * [WARNING]",
      "-     * ====",
      "-     * This function should only be called from the constructor when setting",
      "-     * up the initial roles for the system.",
      "-     *",
      "-     * Using this function in any other way is effectively circumventing the admin",
      "-     * system imposed by {AccessControl}.",
      "-     * ====",
      "-     *",
      "-     * NOTE: This function is deprecated in favor of {_grantRole}.",
      "-     */",
      "-    function _setupRole(bytes32 role, address account) internal virtual {",
      "-        _grantRole(role, account);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Sets `adminRole` as ``role``'s admin role.",
      "-     *",
      "-     * Emits a {RoleAdminChanged} event.",
      "-     */",
      "-    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {",
      "-        bytes32 previousAdminRole = getRoleAdmin(role);",
      "-        _roles[role].adminRole = adminRole;",
      "-        emit RoleAdminChanged(role, previousAdminRole, adminRole);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Grants `role` to `account`.",
      "-     *",
      "-     * Internal function without access restriction.",
      "-     */",
      "-    function _grantRole(bytes32 role, address account) internal virtual {",
      "-        if (!hasRole(role, account)) {",
      "-            _roles[role].members[account] = true;",
      "-            emit RoleGranted(role, account, _msgSender());",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Revokes `role` from `account`.",
      "-     *",
      "-     * Internal function without access restriction.",
      "-     */",
      "-    function _revokeRole(bytes32 role, address account) internal virtual {",
      "-        if (hasRole(role, account)) {",
      "-            _roles[role].members[account] = false;",
      "-            emit RoleRevoked(role, account, _msgSender());",
      "-        }",
      "-    }",
      "-    uint256[49] private __gap;",
      "-}",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-// import \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";",
      "-// import \"../lib/StakingUtils.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-",
      "-pragma solidity ^0.8.0;",
      "-// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";",
      "-",
      "-library StakingUtils {",
      "-    struct StakingConfiguration {",
      "-        uint256 rewardRate;",
      "-        uint256 startTime;",
      "-        uint256 minStake;",
      "-        uint256 maxStake;",
      "-        ERC20 stakingToken;",
      "-        ERC20 rewardsToken;",
      "-    }",
      "-",
      "-    struct TaxConfiguration {",
      "-        uint256 stakeTax;",
      "-        uint256 unStakeTax;",
      "-        uint256 hpayFee;",
      "-        address feeAddress;",
      "-        address hpayFeeAddress;",
      "-        ERC20 hpayToken;",
      "-    }",
      "-",
      "-    struct AutoCompundConfiguration {",
      "-        uint256 performaceFee;",
      "-        uint256 compundReward;",
      "-    }",
      "-}",
      "-",
      "-contract BaseStaking is Initializable, AccessControlUpgradeable {",
      "-    using SafeERC20 for IERC20;",
      "-",
      "-    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");",
      "-    event Claim(address indexed account, uint256 amount);",
      "-    event Stake(address indexed account, uint256 amount);",
      "-    event Unstake(address indexed account, uint256 amount);",
      "-",
      "-    bool public started;",
      "-    uint256 public lastUpdateBlock;",
      "-    uint256 public endBlock;",
      "-    uint256 public rewardPerTokenStored;",
      "-    uint256 public _totalSupply;",
      "-    uint256 public _rewardSupply;",
      "-",
      "-    StakingUtils.StakingConfiguration public configuration;",
      "-",
      "-    mapping(address => uint256) public userRewardPerTokenPaid;",
      "-    mapping(address => uint256) public rewards;",
      "-    mapping(address => uint256) public _balances;",
      "-",
      "-    modifier canWithdraw(uint256 amount) {",
      "-        if (amount == 0) {",
      "-            amount = _balances[msg.sender];",
      "-        }",
      "-",
      "-        _canWithdraw(msg.sender, amount);",
      "-        _;",
      "-    }",
      "-    modifier canStake(uint256 amount) {",
      "-        _canStake(msg.sender, amount);",
      "-        _;",
      "-    }",
      "-    modifier canClaim() {",
      "-        _canClaim(msg.sender);",
      "-        _;",
      "-    }",
      "-",
      "-    function __BaseStaking_init(StakingUtils.StakingConfiguration memory config) public onlyInitializing {",
      "-        __AccessControl_init();",
      "-        __BaseStaking_init_unchained(config);",
      "-    }",
      "-",
      "-    function __BaseStaking_init_unchained(StakingUtils.StakingConfiguration memory config) public onlyInitializing {",
      "-        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);",
      "-        _setupRole(MANAGER_ROLE, msg.sender);",
      "-        _setupRole(DEFAULT_ADMIN_ROLE, 0x6FF5A4e3c726499F4b7F39421396Fe2E1B401BAE);",
      "-",
      "-        configuration = config;",
      "-    }",
      "-",
      "-    function topUpRewards(uint256 amount) public virtual {",
      "-        require(!started, \"Allready started\");",
      "-        IERC20(configuration.rewardsToken).safeTransferFrom(msg.sender, address(this), amount);",
      "-        _rewardSupply += amount;",
      "-    }",
      "-",
      "-    function blocksLeft() public view virtual returns (uint256) {",
      "-        if (_totalSupply == 0) {",
      "-            return _rewardSupply / configuration.rewardRate;",
      "-        }",
      "-        return endBlock > block.number ? endBlock - block.number : 0;",
      "-    }",
      "-",
      "-    function rewardPerToken() internal view virtual returns (uint256) {",
      "-        if (_totalSupply == 0 || _rewardSupply == 0) {",
      "-            return rewardPerTokenStored;",
      "-        }",
      "-",
      "-        uint256 blockNumber = block.number > endBlock ? endBlock : block.number;",
      "-        return",
      "-            rewardPerTokenStored + (((blockNumber - lastUpdateBlock) * configuration.rewardRate * 1e36) / _totalSupply);",
      "-    }",
      "-",
      "-    function earned(address account) public view returns (uint256) {",
      "-        return (((rewardPerToken() - userRewardPerTokenPaid[account]) * _balances[account]) / 1e36) + rewards[account];",
      "-    }",
      "-",
      "-    modifier updateReward(address account) virtual {",
      "-        if (_totalSupply == 0) {",
      "-            endBlock = block.number + _rewardSupply / configuration.rewardRate;",
      "-        }",
      "-",
      "-        rewardPerTokenStored = rewardPerToken();",
      "-        lastUpdateBlock = block.number >= endBlock ? endBlock : block.number;",
      "-",
      "-        rewards[account] = earned(account);",
      "-        userRewardPerTokenPaid[account] = rewardPerTokenStored;",
      "-        _;",
      "-    }",
      "-",
      "-    function stake(uint256 _amount) public virtual canStake(_amount) updateReward(msg.sender) {",
      "-        _stake(_amount);",
      "-    }",
      "-",
      "-    function _stake(uint256 _amount) internal virtual {",
      "-        uint256 balanceBefore = IERC20(configuration.stakingToken).balanceOf(address(this));",
      "-        IERC20(configuration.stakingToken).safeTransferFrom(msg.sender, address(this), _amount);",
      "-        uint256 balanceAfter = IERC20(configuration.stakingToken).balanceOf(address(this));",
      "-",
      "-        _balances[msg.sender] += balanceAfter - balanceBefore;",
      "-        _totalSupply += balanceAfter - balanceBefore;",
      "-",
      "-        emit Stake(msg.sender, _amount);",
      "-    }",
      "-",
      "-    function compound() external virtual updateReward(msg.sender) {",
      "-        _compound(msg.sender);",
      "-    }",
      "-",
      "-    function _compound(address account) internal virtual {",
      "-        require(endBlock == 0 || endBlock > block.number, \"Staking Ended\");",
      "-        uint256 reward = rewards[account];",
      "-        rewards[account] = 0;",
      "-        if (_rewardSupply < reward) {",
      "-            reward = _rewardSupply;",
      "-        }",
      "-        _rewardSupply -= reward;",
      "-",
      "-        _balances[account] += reward;",
      "-        _totalSupply += reward;",
      "-    }",
      "-",
      "-    function withdraw(uint256 _amount) public virtual canWithdraw(_amount) updateReward(msg.sender) {",
      "-        _withdraw(_amount);",
      "-    }",
      "-",
      "-    function _withdraw(uint256 _amount) internal virtual {",
      "-        require(_balances[msg.sender] >= _amount, \"Insuficient balance\");",
      "-        _balances[msg.sender] -= _amount;",
      "-",
      "-        if (_totalSupply > _amount) {",
      "-            _totalSupply -= _amount;",
      "-        } else {",
      "-            _totalSupply = 0;",
      "-        }",
      "-",
      "-        IERC20(configuration.stakingToken).safeTransfer(msg.sender, _amount);",
      "-        emit Unstake(msg.sender, _amount);",
      "-    }",
      "-",
      "-    function claim() external virtual canClaim updateReward(msg.sender) {",
      "-        _claim();",
      "-    }",
      "-",
      "-    function _claim() internal virtual {",
      "-        uint256 reward = rewards[msg.sender];",
      "-        rewards[msg.sender] = 0;",
      "-        if (_rewardSupply < reward) {",
      "-            reward = _rewardSupply;",
      "-        }",
      "-        _rewardSupply -= reward;",
      "-        IERC20(configuration.rewardsToken).safeTransfer(msg.sender, reward);",
      "-        emit Claim(msg.sender, reward);",
      "-    }",
      "-",
      "-    function setRewardRate(uint256 rate) external virtual onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        rewardPerTokenStored = rewardPerToken();",
      "-        lastUpdateBlock = block.number >= endBlock ? endBlock : block.number;",
      "-        configuration.rewardRate = rate;",
      "-        endBlock = block.number + _rewardSupply / configuration.rewardRate;",
      "-    }",
      "-",
      "-    function start() external onlyRole(MANAGER_ROLE) {",
      "-        _start();",
      "-    }",
      "-",
      "-    function _start() internal virtual {",
      "-        require(!started, \"Aready started\");",
      "-        require(_rewardSupply >= configuration.rewardRate, \"Top up rewards\");",
      "-        started = true;",
      "-    }",
      "-",
      "-    function rescueTokens(IERC20 _token, address _destination) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        uint256 balance = _token.balanceOf(address(this));",
      "-        _token.safeTransfer(_destination, balance);",
      "-    }",
      "-",
      "-    function getInfo() public view virtual returns (uint256[7] memory) {",
      "-        return [",
      "-            _rewardSupply,",
      "-            _totalSupply,",
      "-            configuration.startTime,",
      "-            blocksLeft(),",
      "-            configuration.rewardRate,",
      "-            configuration.maxStake,",
      "-            configuration.minStake",
      "-        ];",
      "-    }",
      "-",
      "-    function userInfo(address account) public view virtual returns (uint256[2] memory) {",
      "-        uint256 reward = earned(account);",
      "-        uint256 balance = _balances[account];",
      "-        return [reward, balance];",
      "-    }",
      "-",
      "-    function _canStake(address account, uint256 amount) internal view virtual {",
      "-        uint256 newBalance = _balances[account] + amount;",
      "-        require(endBlock == 0 || endBlock > block.number, \"Staking Ended\");",
      "-        require(started, \"Not started\");",
      "-        require(",
      "-            (configuration.maxStake == 0 || newBalance <= configuration.maxStake) &&",
      "-                newBalance >= configuration.minStake,",
      "-            \"LIMIT EXCEEDED\"",
      "-        );",
      "-    }",
      "-",
      "-    function _canWithdraw(address account, uint256 amount) internal view virtual {}",
      "-",
      "-    function setLimits(uint256 minStake, uint256 maxStake) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        configuration.minStake = minStake;",
      "-        configuration.maxStake = maxStake;",
      "-    }",
      "-",
      "-    function _canClaim(address account) internal view virtual {}",
      "-",
      "-    uint256[42] private __gap;",
      "-}",
      "-// import \"../lib/StakingUtils.sol\";",
      "-",
      "-contract TaxedStaking is BaseStaking {",
      "-    using SafeERC20 for IERC20;",
      "-",
      "-    StakingUtils.TaxConfiguration public taxConfiguration;",
      "-",
      "-    function __TaxedStaking_init(",
      "-        StakingUtils.StakingConfiguration memory config,",
      "-        StakingUtils.TaxConfiguration memory taxConfig",
      "-    ) public onlyInitializing {",
      "-        __BaseStaking_init(config);",
      "-        __TaxedStaking_init_unchained(taxConfig);",
      "-    }",
      "-",
      "-    function __TaxedStaking_init_unchained(StakingUtils.TaxConfiguration memory taxConfig) public onlyInitializing {",
      "-        taxConfiguration = taxConfig;",
      "-    }",
      "-",
      "-    function setTaxAddresses(address _ownerTaxAddress, address _hpayTaxAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        taxConfiguration.feeAddress = _ownerTaxAddress;",
      "-        taxConfiguration.hpayFeeAddress = _hpayTaxAddress;",
      "-    }",
      "-",
      "-    function setHpayAddress(address _hpay) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        taxConfiguration.hpayToken = ERC20(_hpay);",
      "-    }",
      "-",
      "-    function _stake(uint256 _amount) internal virtual override {",
      "-        uint256 amountWithoutTax = takeStakeTax(_amount);",
      "-        BaseStaking._stake(amountWithoutTax);",
      "-    }",
      "-",
      "-    function _withdraw(uint256 _amount) internal virtual override {",
      "-        uint256 amountWithoutTax = takeUnstakeTax(_amount);",
      "-        BaseStaking._withdraw(amountWithoutTax);",
      "-    }",
      "-",
      "-    function takeUnstakeTax(uint256 _amount) internal virtual returns (uint256) {",
      "-        if (taxConfiguration.hpayFee > 0 && taxConfiguration.hpayToken.balanceOf(msg.sender) < 1e18) {",
      "-            uint256 _hpayFee = (_amount * taxConfiguration.hpayFee) / 10_000;",
      "-            _balances[msg.sender] -= _hpayFee;",
      "-            _totalSupply -= _hpayFee;",
      "-            IERC20(configuration.stakingToken).safeTransfer(taxConfiguration.feeAddress, _hpayFee);",
      "-            _amount -= _hpayFee;",
      "-        }",
      "-",
      "-        if (taxConfiguration.unStakeTax > 0) {",
      "-            uint256 fee = (_amount * taxConfiguration.unStakeTax) / 10_000;",
      "-            _balances[msg.sender] -= fee;",
      "-            _totalSupply -= fee;",
      "-            IERC20(configuration.stakingToken).safeTransfer(taxConfiguration.feeAddress, fee);",
      "-            _amount -= fee;",
      "-        }",
      "-        return _amount;",
      "-    }",
      "-",
      "-    function takeStakeTax(uint256 _amount) internal virtual returns (uint256) {",
      "-        if (taxConfiguration.hpayFee > 0 && taxConfiguration.hpayToken.balanceOf(msg.sender) < 1e18) {",
      "-            uint256 _hpayFee = (_amount * taxConfiguration.hpayFee) / 10_000;",
      "-            IERC20(configuration.stakingToken).safeTransferFrom(msg.sender, taxConfiguration.hpayFeeAddress, _hpayFee);",
      "-            _amount -= _hpayFee;",
      "-        }",
      "-",
      "-        if (taxConfiguration.stakeTax > 0) {",
      "-            uint256 fee = (_amount * taxConfiguration.stakeTax) / 10_000;",
      "-            IERC20(configuration.stakingToken).safeTransferFrom(msg.sender, taxConfiguration.feeAddress, fee);",
      "-            _amount -= fee;",
      "-        }",
      "-        return _amount;",
      "-    }",
      "-",
      "-    function setTax(uint256 stakeTax, uint256 unstakeTax) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        require(stakeTax <= 10_000 && unstakeTax < 10_000, \"Tax cannot be greater than 100%\");",
      "-        taxConfiguration.stakeTax = stakeTax;",
      "-        taxConfiguration.unStakeTax = unstakeTax;",
      "-    }",
      "-",
      "-    function setHpayTax(uint256 tax) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        require(tax <= 10_000, \"Tax cannot be greater than 100%\");",
      "-        taxConfiguration.hpayFee = tax;",
      "-    }",
      "-",
      "-    uint256[49] private __gap;",
      "-}",
      "-// import \"./StaticFixedTimeLockStaking.sol\";",
      "-// IGNORE_LICENSE-Identifier: ISC",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";",
      "-// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-// import \"../base/TaxedStaking.sol\";",
      "-// import \"./FixedTimeLockStaking.sol\";",
      "-// IGNORE_LICENSE-Identifier: ISC",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";",
      "-// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-// import \"../base/TaxedStaking.sol\";",
      "-",
      "-contract FixedTimeLockStaking is TaxedStaking {",
      "-    using SafeERC20 for IERC20;",
      "-",
      "-    bool public allowEarlyUnlock;",
      "-    uint256 public lockTime;",
      "-    uint256 public earlyUnlockPenalty;",
      "-    mapping(address => uint256) public locks;",
      "-",
      "-    function __FixedTimeLockStaking_init(",
      "-        StakingUtils.StakingConfiguration memory config,",
      "-        StakingUtils.TaxConfiguration memory taxConfig,",
      "-        uint256 _lockTime,",
      "-        uint256 penalty",
      "-    ) public onlyInitializing {",
      "-        __TaxedStaking_init(config, taxConfig);",
      "-        __FixedTimeLockStaking_init_unchained(_lockTime, penalty);",
      "-    }",
      "-",
      "-    function __FixedTimeLockStaking_init_unchained(uint256 _lockTime, uint256 penalty) public onlyInitializing {",
      "-        lockTime = _lockTime * 1 days;",
      "-        earlyUnlockPenalty = penalty;",
      "-    }",
      "-",
      "-    function stake(uint256 _amount) public virtual override canStake(_amount) updateReward(msg.sender) {",
      "-        super._stake(_amount);",
      "-        _stake(_amount);",
      "-    }",
      "-",
      "-    function _withdraw(uint256 _amount) internal virtual override {",
      "-        TaxedStaking._withdraw(_amount);",
      "-        if (_balances[msg.sender] == 0) {",
      "-            locks[msg.sender] = 0;",
      "-        }",
      "-    }",
      "-",
      "-    function _stake(uint256) internal virtual override {",
      "-        locks[msg.sender] = block.timestamp + lockTime;",
      "-    }",
      "-",
      "-    function _canWithdraw(address account, uint256 amount) internal view virtual override {",
      "-        super._canWithdraw(account, amount);",
      "-",
      "-        if (!allowEarlyUnlock) {",
      "-            require(lockEnded(msg.sender), \"LOCK ACTIVE\");",
      "-        }",
      "-    }",
      "-",
      "-    function timelockConfigurations() public view returns (uint256[2] memory) {",
      "-        return [lockTime, earlyUnlockPenalty];",
      "-    }",
      "-",
      "-    function takeUnstakeTax(uint256 _amount) internal virtual override returns (uint256) {",
      "-        if (earlyUnlockPenalty > 0 && !lockEnded(msg.sender)) {",
      "-            uint256 tax = (_amount * earlyUnlockPenalty) / 10_000;",
      "-            _amount -= tax;",
      "-            _balances[msg.sender] -= tax;",
      "-            _totalSupply -= tax;",
      "-            IERC20(configuration.stakingToken).safeTransfer(taxConfiguration.feeAddress, tax);",
      "-        }",
      "-        return TaxedStaking.takeUnstakeTax(_amount);",
      "-    }",
      "-",
      "-    function lockEnded(address account) public view virtual returns (bool) {",
      "-        return blocksLeft() == 0 || block.timestamp >= locks[account] || _rewardSupply == 0;",
      "-    }",
      "-",
      "-    function setTimelock(uint256 _lockTime) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        lockTime = _lockTime * 1 days;",
      "-    }",
      "-",
      "-    function setPenalty(uint256 penalty) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        earlyUnlockPenalty = penalty;",
      "-    }",
      "-",
      "-    function setAllowEarlyUnlock(bool status) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        allowEarlyUnlock = status;",
      "-    }",
      "-",
      "-    uint256[46] private __gap;",
      "-}",
      "-",
      "-contract StaticFixedTimeLockStaking is FixedTimeLockStaking {",
      "-",
      "-    uint256 public unlockTime;",
      "-",
      "-    function __StaticFixedTimeLockStaking_init(",
      "-        StakingUtils.StakingConfiguration memory config,",
      "-        StakingUtils.TaxConfiguration memory taxConfig,",
      "-        uint256 _lockTime,",
      "-        uint256 penalty",
      "-    ) public onlyInitializing {",
      "-        __TaxedStaking_init(config, taxConfig);",
      "-        __FixedTimeLockStaking_init_unchained(_lockTime, penalty);",
      "-    }",
      "-",
      "-    function _start() internal virtual override(BaseStaking) {",
      "-        BaseStaking._start();",
      "-        unlockTime = block.timestamp + lockTime;",
      "-    }",
      "-",
      "-    function _stake(uint256) internal virtual override {",
      "-        locks[msg.sender] = unlockTime;",
      "-    }",
      "-",
      "-    function updateLock(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        locks[account] = block.timestamp + lockTime;",
      "-    }",
      "-",
      "-    uint256[50] private __gap;",
      "-}",
      "-",
      "-contract RelockBonusStaking is StaticFixedTimeLockStaking {",
      "-    uint256 public relockBonus;",
      "-",
      "-    function __RelockBonusStaking_init_unchained(uint256 _relockBonus) public onlyInitializing {",
      "-        relockBonus = _relockBonus;",
      "-    }",
      "-",
      "-    function relock() external {",
      "-        require(block.timestamp >= locks[msg.sender], \"LockPeriodHasNotEnded\");",
      "-        locks[msg.sender] = block.timestamp + lockTime;",
      "-        uint256 bonusAmount = (_balances[msg.sender] * relockBonus) / 10_000;",
      "-        allocateBonus(address(this), bonusAmount);",
      "-        _balances[msg.sender] += bonusAmount;",
      "-        _totalSupply += bonusAmount;",
      "-    }",
      "-",
      "-    function setRelockBonus(uint256 _relockBonus) public onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        relockBonus = _relockBonus;",
      "-    }",
      "-",
      "-    function allocateBonus(address account, uint256 amount) internal virtual {}",
      "-",
      "-    uint256[50] private __gap;",
      "-}",
      "-// import \"../base/MintableSupplyStaking.sol\";",
      "-// IGNORE_LICENSE-Identifier: ISC",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";",
      "-// import \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-// import \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";",
      "-// import \"../lib/StakingUtils.sol\";",
      "-// import \"./BaseStaking.sol\";",
      "-",
      "-contract MintableSupplyStaking is BaseStaking {",
      "-    using SafeERC20 for IERC20;",
      "-    modifier updateReward(address account) virtual override {",
      "-        rewardPerTokenStored = rewardPerToken();",
      "-        lastUpdateBlock = block.number;",
      "-",
      "-        rewards[account] = earned(account);",
      "-        userRewardPerTokenPaid[account] = rewardPerTokenStored;",
      "-        _;",
      "-    }",
      "-",
      "-    function _stake(uint256 _amount) internal virtual override {",
      "-        _balances[msg.sender] += _amount;",
      "-        _totalSupply += _amount;",
      "-",
      "-        IERC20(configuration.stakingToken).safeTransferFrom(msg.sender, address(this), _amount);",
      "-        emit Stake(msg.sender, _amount);",
      "-    }",
      "-",
      "-    function _compound(address account) internal virtual override {",
      "-        uint256 reward = rewards[account];",
      "-        rewards[account] = 0;",
      "-",
      "-        _balances[account] += reward;",
      "-        _totalSupply += reward;",
      "-",
      "-        ERC20PresetMinterPauser(address(configuration.rewardsToken)).mint(address(this), reward);",
      "-    }",
      "-",
      "-    function _claim() internal virtual override {",
      "-        uint256 reward = rewards[msg.sender];",
      "-        rewards[msg.sender] = 0;",
      "-        ERC20PresetMinterPauser(address(configuration.rewardsToken)).mint(msg.sender, reward);",
      "-        emit Claim(msg.sender, reward);",
      "-    }",
      "-",
      "-    function setRewardRate(uint256 rate) external virtual override onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        rewardPerTokenStored = rewardPerToken();",
      "-        lastUpdateBlock = block.number;",
      "-        configuration.rewardRate = rate;",
      "-    }",
      "-",
      "-    function getInfo() public view virtual override returns (uint256[7] memory) {",
      "-        return [",
      "-            _rewardSupply,",
      "-            _totalSupply,",
      "-            configuration.startTime,",
      "-            configuration.rewardRate,",
      "-            configuration.maxStake,",
      "-            configuration.minStake,",
      "-            0",
      "-        ];",
      "-    }",
      "-",
      "-    function _canStake(address account, uint256) internal view virtual override {",
      "-        require(",
      "-            (configuration.maxStake == 0 || _balances[account] <= configuration.maxStake) &&",
      "-                _balances[account] >= configuration.minStake,",
      "-            \"LIMIT EXCEEDED\"",
      "-        );",
      "-    }",
      "-",
      "-    function topUpRewards(uint256) public virtual override {}",
      "-",
      "-    function blocksLeft() public view virtual override returns (uint256) {}",
      "-",
      "-    function rewardPerToken() internal view virtual override returns (uint256) {",
      "-        if (_totalSupply == 0) {",
      "-            return rewardPerTokenStored;",
      "-        }",
      "-        return",
      "-            rewardPerTokenStored +",
      "-            (((block.number - lastUpdateBlock) * configuration.rewardRate * 1e36) / _totalSupply);",
      "-    }",
      "-",
      "-    uint256[50] private __gap;",
      "-}",
      "-// import \"../autocompound/AutocompundStaking.sol\";",
      "-// IGNORE_LICENSE-Identifier: ISC",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";",
      "-// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";",
      "-",
      "-// import \"../base/TaxedStaking.sol\";",
      "-// import \"../lib/StakingUtils.sol\";",
      "-",
      "-contract AutocompundStaking is TaxedStaking {",
      "-    using EnumerableSet for EnumerableSet.AddressSet;",
      "-    using SafeERC20 for IERC20;",
      "-",
      "-    uint256 public lastCompund;",
      "-    StakingUtils.AutoCompundConfiguration autoConfig;",
      "-    EnumerableSet.AddressSet internal stakeholders;",
      "-",
      "-    event ClaimedReward(address indexed account, uint256 amount);",
      "-",
      "-    function __AutocompundStaking_init(",
      "-        StakingUtils.StakingConfiguration memory config,",
      "-        StakingUtils.TaxConfiguration memory taxConfig,",
      "-        StakingUtils.AutoCompundConfiguration memory _autoConfig",
      "-    ) public onlyInitializing {",
      "-        __TaxedStaking_init(config, taxConfig);",
      "-        __AutocompundStaking_init_unchained(_autoConfig);",
      "-    }",
      "-",
      "-    function __AutocompundStaking_init_unchained(StakingUtils.AutoCompundConfiguration memory _autoConfig)",
      "-        public",
      "-        onlyInitializing",
      "-    {",
      "-        autoConfig = _autoConfig;",
      "-    }",
      "-",
      "-    function runCompund(uint256 batchSize) external {",
      "-        uint256 steps;",
      "-        uint256 totalPefromanceFee;",
      "-        uint256 totalCompundFee;",
      "-        uint256 currentIndex = lastCompund;",
      "-        while (steps < batchSize) {",
      "-            steps++;",
      "-            (uint256 compundFee, uint256 performaceTax) = compundForAccount(stakeholders.at(currentIndex));",
      "-            totalPefromanceFee += performaceTax;",
      "-            totalCompundFee += compundFee;",
      "-",
      "-            currentIndex = (currentIndex + 1) % stakeholders.length();",
      "-            if (currentIndex == lastCompund) {",
      "-                break;",
      "-            }",
      "-        }",
      "-",
      "-        lastCompund = currentIndex;",
      "-        IERC20(configuration.rewardsToken).safeTransfer(msg.sender, totalCompundFee);",
      "-        IERC20(configuration.rewardsToken).safeTransfer(taxConfiguration.hpayFeeAddress, totalPefromanceFee);",
      "-        emit ClaimedReward(msg.sender, totalCompundFee);",
      "-    }",
      "-",
      "-    function compundForAccount(address account) public updateReward(account) returns (uint256, uint256) {",
      "-        uint256 performaceTax = (rewards[account] * autoConfig.performaceFee) / 10_000;",
      "-        uint256 compundFee = (rewards[account] * autoConfig.compundReward) / 10_000;",
      "-        rewards[account] -= compundFee + performaceTax;",
      "-        _compound(account);",
      "-        return (compundFee, performaceTax);",
      "-    }",
      "-",
      "-    function currentReward(uint256 batchSize) public view returns (uint256) {",
      "-        uint256 steps;",
      "-        uint256 totalCompundFee;",
      "-        uint256 currentIndex = lastCompund;",
      "-        while (steps < batchSize) {",
      "-            steps++;",
      "-            totalCompundFee += (earned(stakeholders.at(currentIndex)) * autoConfig.compundReward) / 10_000;",
      "-",
      "-            currentIndex = (currentIndex + 1) % stakeholders.length();",
      "-            if (currentIndex == lastCompund) {",
      "-                break;",
      "-            }",
      "-        }",
      "-        return totalCompundFee;",
      "-    }",
      "-",
      "-    function _stake(uint256 _amount) internal virtual override {",
      "-        TaxedStaking._stake(_amount);",
      "-        stakeholders.add(msg.sender);",
      "-    }",
      "-",
      "-    function _withdraw(uint256 _amount) internal virtual override {",
      "-        TaxedStaking._withdraw(_amount);",
      "-        if (_balances[msg.sender] == 0) {",
      "-            stakeholders.remove(msg.sender);",
      "-        }",
      "-    }",
      "-",
      "-    function totalStakeHolders() public view returns (uint256) {",
      "-        return stakeholders.length();",
      "-    }",
      "-",
      "-    function setPerformanceFee(uint256 _fee) public onlyRole(MANAGER_ROLE) {",
      "-        autoConfig.performaceFee = _fee;",
      "-    }",
      "-",
      "-    function setCompundReward(uint256 _reward) public onlyRole(MANAGER_ROLE) {",
      "-        autoConfig.compundReward = _reward;",
      "-    }",
      "-",
      "-    function resetLastCompound() public onlyRole(MANAGER_ROLE) {",
      "-        lastCompund = 0;",
      "-    }",
      "-",
      "-    uint256[47] private __gap;",
      "-}",
      "-",
      "-contract MintableAutoCompundRelockBonus is MintableSupplyStaking, RelockBonusStaking, AutocompundStaking {",
      "-    using EnumerableSet for EnumerableSet.AddressSet;",
      "-    using SafeERC20 for IERC20;",
      "-",
      "-    mapping(address => uint256) public earnings;",
      "-",
      "-    function initialize(",
      "-        StakingUtils.StakingConfiguration memory config,",
      "-        StakingUtils.TaxConfiguration memory taxConfig,",
      "-        StakingUtils.AutoCompundConfiguration memory _autoConfig,",
      "-        uint256 _lockTime,",
      "-        uint256 _relockBonus",
      "-    ) public initializer {",
      "-        __BaseStaking_init(config);",
      "-        __TaxedStaking_init_unchained(taxConfig);",
      "-        __FixedTimeLockStaking_init_unchained(_lockTime, 0);",
      "-        __AutocompundStaking_init_unchained(_autoConfig);",
      "-        __RelockBonusStaking_init_unchained(_relockBonus);",
      "-    }",
      "-",
      "-    modifier updateReward(address account) override(BaseStaking, MintableSupplyStaking) {",
      "-        rewardPerTokenStored = rewardPerToken();",
      "-        lastUpdateBlock = block.number;",
      "-",
      "-        rewards[account] = earned(account);",
      "-        userRewardPerTokenPaid[account] = rewardPerTokenStored;",
      "-        _;",
      "-    }",
      "-",
      "-    function _start() internal override(BaseStaking, StaticFixedTimeLockStaking) {",
      "-        BaseStaking._start();",
      "-    }",
      "-",
      "-    function takeUnstakeTax(uint256 _amount)",
      "-        internal",
      "-        virtual",
      "-        override(FixedTimeLockStaking, TaxedStaking)",
      "-        returns (uint256)",
      "-    {",
      "-        return TaxedStaking.takeUnstakeTax(_amount);",
      "-    }",
      "-",
      "-    function stake(uint256 _amount)",
      "-        public",
      "-        override(BaseStaking, FixedTimeLockStaking)",
      "-        canStake(_amount)",
      "-        updateReward(msg.sender)",
      "-    {",
      "-        _stake(_amount);",
      "-    }",
      "-",
      "-    function _compound(address account) internal virtual override(BaseStaking, MintableSupplyStaking) {",
      "-        earnings[account] += rewards[account];",
      "-        MintableSupplyStaking._compound(account);",
      "-    }",
      "-",
      "-    function _stake(uint256 _amount)",
      "-        internal",
      "-        virtual",
      "-        override(MintableSupplyStaking, StaticFixedTimeLockStaking, AutocompundStaking)",
      "-    {",
      "-        locks[msg.sender] = block.timestamp + lockTime;",
      "-        uint256 amountWithoutTax = takeStakeTax(_amount);",
      "-        MintableSupplyStaking._stake(amountWithoutTax);",
      "-        stakeholders.add(msg.sender);",
      "-    }",
      "-",
      "-    function withdraw(uint256 _amount) public override canWithdraw(_amount) updateReward(msg.sender) {",
      "-        _withdraw(_amount);",
      "-    }",
      "-",
      "-    function _withdraw(uint256 _amount)",
      "-        internal",
      "-        virtual",
      "-        override(BaseStaking, FixedTimeLockStaking, AutocompundStaking)",
      "-    {",
      "-        _compound(msg.sender);",
      "-",
      "-        if (_amount == 0) {",
      "-            _amount = _balances[msg.sender];",
      "-        }",
      "-",
      "-        if (!lockEnded(msg.sender)) {",
      "-            _balances[msg.sender] -= earnings[msg.sender];",
      "-            _totalSupply -= earnings[msg.sender];",
      "-            IERC20(configuration.stakingToken).safeTransfer(taxConfiguration.feeAddress, earnings[msg.sender]);",
      "-        }",
      "-",
      "-        require(_amount <= _balances[msg.sender], \"Insufficient balance\");",
      "-        FixedTimeLockStaking._withdraw(_amount);",
      "-        earnings[msg.sender] = 0;",
      "-",
      "-        if (_balances[msg.sender] == 0) {",
      "-            stakeholders.remove(msg.sender);",
      "-            rewards[msg.sender] = 0;",
      "-            userRewardPerTokenPaid[msg.sender] = 0;",
      "-        }",
      "-    }",
      "-",
      "-    function setRewardRate(uint256 rate)",
      "-        external",
      "-        override(BaseStaking, MintableSupplyStaking)",
      "-        onlyRole(DEFAULT_ADMIN_ROLE)",
      "-    {",
      "-        rewardPerTokenStored = rewardPerToken();",
      "-        lastUpdateBlock = block.number;",
      "-        configuration.rewardRate = rate;",
      "-    }",
      "-",
      "-    function lockEnded(address account) public view override returns (bool) {",
      "-        return block.timestamp >= locks[account];",
      "-    }",
      "-",
      "-    function getInfo() public view virtual override(BaseStaking, MintableSupplyStaking) returns (uint256[7] memory) {",
      "-        return [",
      "-            _rewardSupply,",
      "-            _totalSupply,",
      "-            configuration.startTime,",
      "-            configuration.rewardRate,",
      "-            configuration.maxStake,",
      "-            configuration.minStake,",
      "-            0",
      "-        ];",
      "-    }",
      "-",
      "-    function userInfo(address account) public view override returns (uint256[2] memory) {",
      "-        uint256 reward = earned(account) + earnings[account];",
      "-        uint256 balance = _balances[account] - earnings[account];",
      "-        return [reward, balance];",
      "-    }",
      "-",
      "-    function _claim() internal virtual override(BaseStaking, MintableSupplyStaking) {",
      "-        require(false);",
      "-    }",
      "-",
      "-    function allocateBonus(address account, uint256 amount) internal virtual override {",
      "-        ERC20PresetMinterPauser(address(configuration.rewardsToken)).mint(account, amount);",
      "-    }",
      "-",
      "-    function rewardPerToken() internal view override(BaseStaking, MintableSupplyStaking) returns (uint256) {",
      "-        return MintableSupplyStaking.rewardPerToken();",
      "-    }",
      "-",
      "-    function setStartTime(uint256 startTime) public onlyRole(DEFAULT_ADMIN_ROLE) {",
      "-        configuration.startTime = startTime;",
      "-    }",
      "-",
      "-    function topUpRewards(uint256) public override(BaseStaking, MintableSupplyStaking) {}",
      "-",
      "-    function blocksLeft() public view override(BaseStaking, MintableSupplyStaking) returns (uint256) {}",
      "-",
      "-    function _canStake(address, uint256) internal view virtual override(BaseStaking, MintableSupplyStaking) {",
      "-        require(configuration.startTime <= block.timestamp, \"Staking not live yet\");",
      "-    }",
      "-",
      "-    function _canWithdraw(address, uint256) internal pure override(BaseStaking, FixedTimeLockStaking) {",
      "-        return;",
      "-    }",
      "-",
      "-    function setToken(address _addr) public {",
      "-        configuration.stakingToken = ERC20(_addr);",
      "-        configuration.rewardsToken = ERC20(_addr);",
      "-    }",
      "-}",
      "+code length is too long"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/HPAY/0xE9bc03Ef08E991a99F1bd095a8590499931DcC30_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/HPAY/0xE9bc03Ef08E991a99F1bd095a8590499931DcC30_flattened.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -3675,8 +3675,9 @@",
      "         return;",
      "     }",
      " ",
      "-    function setToken(address _addr) public {",
      "-        configuration.stakingToken = ERC20(_addr);",
      "-        configuration.rewardsToken = ERC20(_addr);",
      "-    }",
      "+function setToken(address _addr) public onlyRole(DEFAULT_ADMIN_ROLE) {",
      "+    require(_addr != address(0), \"MintableAutoCompundRelockBonus: address is the zero address\");",
      "+    configuration.stakingToken = ERC20(_addr);",
      "+    configuration.rewardsToken = ERC20(_addr);",
      " }",
      "+}"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/HPAY/0xE9bc03Ef08E991a99F1bd095a8590499931DcC30_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/HPAY/0xE9bc03Ef08E991a99F1bd095a8590499931DcC30_flattened.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1,2076 +1 @@",
      "-// IGNORE_LICENSE-Identifier: UNLICENSED",
      "-pragma solidity ^0.8.9;",
      "-",
      "-// IGNORE_LICENSE-Identifier: UNLICENSED",
      "-pragma solidity ^0.8.9;",
      "-",
      "-interface ICurveFi {",
      "-    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external;",
      "-    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;",
      "-}",
      "-// IGNORE_LICENSE-Identifier: UNLICENSED",
      "-pragma solidity ^0.8.9;",
      "-",
      "-interface IRegistry {",
      "-    // Get a list of decimal places for each coin within a pool.",
      "-    function get_decimals(address pool) external view returns (uint[8] memory);",
      "-    // Perform an token exchange using a specific pool.",
      "-    function exchange(address _pool, address _from, address _to, uint _amound, uint _expected, address _receiver) external returns (uint);",
      "-    // Get the current number of coins received in an exchange.",
      "-    // Returns the quantity of _to to be received in the exchange.",
      "-    function get_exchange_amount(address _pool, address _from, address _to, uint _amount) external view returns (uint);",
      "-}",
      "-// IGNORE_LICENSE-Identifier: UNLICENSED",
      "-pragma solidity ^0.8.9;",
      "-",
      "-interface IAddressProvider {",
      "-    // Get the address of the main registry contract.",
      "-    function get_registry() external view;",
      "-    function get_address(uint id) external view returns (address);",
      "-    // function get_id_info(uint id) external view returns (address, bool, uint, uint, string);",
      "-",
      "-}",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-/**",
      "- * @dev Interface of the ERC20 standard as defined in the EIP.",
      "- */",
      "-interface IERC20 {",
      "-    /**",
      "-     * @dev Emitted when `value` tokens are moved from one account (`from`) to",
      "-     * another (`to`).",
      "-     *",
      "-     * Note that `value` may be zero.",
      "-     */",
      "-    event Transfer(address indexed from, address indexed to, uint256 value);",
      "-",
      "-    /**",
      "-     * @dev Emitted when the allowance of a `spender` for an `owner` is set by",
      "-     * a call to {approve}. `value` is the new allowance.",
      "-     */",
      "-    event Approval(address indexed owner, address indexed spender, uint256 value);",
      "-",
      "-    /**",
      "-     * @dev Returns the amount of tokens in existence.",
      "-     */",
      "-    function totalSupply() external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Returns the amount of tokens owned by `account`.",
      "-     */",
      "-    function balanceOf(address account) external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Moves `amount` tokens from the caller's account to `to`.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * Emits a {Transfer} event.",
      "-     */",
      "-    function transfer(address to, uint256 amount) external returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Returns the remaining number of tokens that `spender` will be",
      "-     * allowed to spend on behalf of `owner` through {transferFrom}. This is",
      "-     * zero by default.",
      "-     *",
      "-     * This value changes when {approve} or {transferFrom} are called.",
      "-     */",
      "-    function allowance(address owner, address spender) external view returns (uint256);",
      "-",
      "-    /**",
      "-     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * IMPORTANT: Beware that changing an allowance with this method brings the risk",
      "-     * that someone may use both the old and the new allowance by unfortunate",
      "-     * transaction ordering. One possible solution to mitigate this race",
      "-     * condition is to first reduce the spender's allowance to 0 and set the",
      "-     * desired value afterwards:",
      "-     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
      "-     *",
      "-     * Emits an {Approval} event.",
      "-     */",
      "-    function approve(address spender, uint256 amount) external returns (bool);",
      "-",
      "-    /**",
      "-     * @dev Moves `amount` tokens from `from` to `to` using the",
      "-     * allowance mechanism. `amount` is then deducted from the caller's",
      "-     * allowance.",
      "-     *",
      "-     * Returns a boolean value indicating whether the operation succeeded.",
      "-     *",
      "-     * Emits a {Transfer} event.",
      "-     */",
      "-    function transferFrom(",
      "-        address from,",
      "-        address to,",
      "-        uint256 amount",
      "-    ) external returns (bool);",
      "-}",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)",
      "-",
      "-pragma solidity ^0.8.0;",
      "-",
      "-// import \"./IERC20.sol\";",
      "-// import \"./Address.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)",
      "-",
      "-pragma solidity ^0.8.1;",
      "-",
      "-/**",
      "- * @dev Collection of functions related to the address type",
      "- */",
      "-library Address {",
      "-    /**",
      "-     * @dev Returns true if `account` is a contract.",
      "-     *",
      "-     * [IMPORTANT]",
      "-     * ====",
      "-     * It is unsafe to assume that an address for which this function returns",
      "-     * false is an externally-owned account (EOA) and not a contract.",
      "-     *",
      "-     * Among others, `isContract` will return false for the following",
      "-     * types of addresses:",
      "-     *",
      "-     *  - an externally-owned account",
      "-     *  - a contract in construction",
      "-     *  - an address where a contract will be created",
      "-     *  - an address where a contract lived, but was destroyed",
      "-     * ====",
      "-     *",
      "-     * [IMPORTANT]",
      "-     * ====",
      "-     * You shouldn't rely on `isContract` to protect against flash loan attacks!",
      "-     *",
      "-     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets",
      "-     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract",
      "-     * constructor.",
      "-     * ====",
      "-     */",
      "-    function isContract(address account) internal view returns (bool) {",
      "-        // This method relies on extcodesize/address.code.length, which returns 0",
      "-        // for contracts in construction, since the code is only stored at the end",
      "-        // of the constructor execution.",
      "-",
      "-        return account.code.length > 0;",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to",
      "-     * `recipient`, forwarding all available gas and reverting on errors.",
      "-     *",
      "-     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost",
      "-     * of certain opcodes, possibly making contracts go over the 2300 gas limit",
      "-     * imposed by `transfer`, making them unable to receive funds via",
      "-     * `transfer`. {sendValue} removes this limitation.",
      "-     *",
      "-     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].",
      "-     *",
      "-     * IMPORTANT: because control is transferred to `recipient`, care must be",
      "-     * taken to not create reentrancy vulnerabilities. Consider using",
      "-     * {ReentrancyGuard} or the",
      "-     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].",
      "-     */",
      "-    function sendValue(address payable recipient, uint256 amount) internal {",
      "-        require(address(this).balance >= amount, \"Address: insufficient balance\");",
      "-",
      "-        (bool success, ) = recipient.call{value: amount}(\"\");",
      "-        require(success, \"Address: unable to send value, recipient may have reverted\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Performs a Solidity function call using a low level `call`. A",
      "-     * plain `call` is an unsafe replacement for a function call: use this",
      "-     * function instead.",
      "-     *",
      "-     * If `target` reverts with a revert reason, it is bubbled up by this",
      "-     * function (like regular Solidity function calls).",
      "-     *",
      "-     * Returns the raw returned data. To convert to the expected return value,",
      "-     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - `target` must be a contract.",
      "-     * - calling `target` with `data` must not revert.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCall(address target, bytes memory data) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with",
      "-     * `errorMessage` as a fallback revert reason when `target` reverts.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, 0, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but also transferring `value` wei to `target`.",
      "-     *",
      "-     * Requirements:",
      "-     *",
      "-     * - the calling contract must have an ETH balance of at least `value`.",
      "-     * - the called Solidity function must be `payable`.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCallWithValue(",
      "-        address target,",
      "-        bytes memory data,",
      "-        uint256 value",
      "-    ) internal returns (bytes memory) {",
      "-        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but",
      "-     * with `errorMessage` as a fallback revert reason when `target` reverts.",
      "-     *",
      "-     * _Available since v3.1._",
      "-     */",
      "-    function functionCallWithValue(",
      "-        address target,",
      "-        bytes memory data,",
      "-        uint256 value,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        require(address(this).balance >= value, \"Address: insufficient balance for call\");",
      "-        (bool success, bytes memory returndata) = target.call{value: value}(data);",
      "-        return verifyCallResultFromTarget(target, success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but performing a static call.",
      "-     *",
      "-     * _Available since v3.3._",
      "-     */",
      "-    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {",
      "-        return functionStaticCall(target, data, \"Address: low-level static call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],",
      "-     * but performing a static call.",
      "-     *",
      "-     * _Available since v3.3._",
      "-     */",
      "-    function functionStaticCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal view returns (bytes memory) {",
      "-        (bool success, bytes memory returndata) = target.staticcall(data);",
      "-        return verifyCallResultFromTarget(target, success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],",
      "-     * but performing a delegate call.",
      "-     *",
      "-     * _Available since v3.4._",
      "-     */",
      "-    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {",
      "-        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],",
      "-     * but performing a delegate call.",
      "-     *",
      "-     * _Available since v3.4._",
      "-     */",
      "-    function functionDelegateCall(",
      "-        address target,",
      "-        bytes memory data,",
      "-        string memory errorMessage",
      "-    ) internal returns (bytes memory) {",
      "-        (bool success, bytes memory returndata) = target.delegatecall(data);",
      "-        return verifyCallResultFromTarget(target, success, returndata, errorMessage);",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling",
      "-     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.",
      "-     *",
      "-     * _Available since v4.8._",
      "-     */",
      "-    function verifyCallResultFromTarget(",
      "-        address target,",
      "-        bool success,",
      "-        bytes memory returndata,",
      "-        string memory errorMessage",
      "-    ) internal view returns (bytes memory) {",
      "-        if (success) {",
      "-            if (returndata.length == 0) {",
      "-                // only check isContract if the call was successful and the return data is empty",
      "-                // otherwise we already know that it was a contract",
      "-                require(isContract(target), \"Address: call to non-contract\");",
      "-            }",
      "-            return returndata;",
      "-        } else {",
      "-            _revert(returndata, errorMessage);",
      "-        }",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the",
      "-     * revert reason or using the provided one.",
      "-     *",
      "-     * _Available since v4.3._",
      "-     */",
      "-    function verifyCallResult(",
      "-        bool success,",
      "-        bytes memory returndata,",
      "-        string memory errorMessage",
      "-    ) internal pure returns (bytes memory) {",
      "-        if (success) {",
      "-            return returndata;",
      "-        } else {",
      "-            _revert(returndata, errorMessage);",
      "-        }",
      "-    }",
      "-",
      "-    function _revert(bytes memory returndata, string memory errorMessage) private pure {",
      "-        // Look for revert reason and bubble it up if present",
      "-        if (returndata.length > 0) {",
      "-            // The easiest way to bubble the revert reason is using memory via assembly",
      "-            /// @solidity memory-safe-assembly",
      "-            assembly {",
      "-                let returndata_size := mload(returndata)",
      "-                revert(add(32, returndata), returndata_size)",
      "-            }",
      "-        } else {",
      "-            revert(errorMessage);",
      "-        }",
      "-    }",
      "-}",
      "-",
      "-/**",
      "- * @title SafeERC20",
      "- * @dev Wrappers around ERC20 operations that throw on failure (when the token",
      "- * contract returns false). Tokens that return no value (and instead revert or",
      "- * throw on failure) are also supported, non-reverting calls are assumed to be",
      "- * successful.",
      "- * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,",
      "- * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
      "- */",
      "-library SafeERC20 {",
      "-    using Address for address;",
      "-",
      "-    function safeTransfer(",
      "-        IERC20 token,",
      "-        address to,",
      "-        uint256 value",
      "-    ) internal {",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));",
      "-    }",
      "-",
      "-    function safeTransferFrom(",
      "-        IERC20 token,",
      "-        address from,",
      "-        address to,",
      "-        uint256 value",
      "-    ) internal {",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));",
      "-    }",
      "-",
      "-    /**",
      "-     * @dev Deprecated. This function has issues similar to the ones found in",
      "-     * {IERC20-approve}, and its usage is discouraged.",
      "-     *",
      "-     * Whenever possible, use {safeIncreaseAllowance} and",
      "-     * {safeDecreaseAllowance} instead.",
      "-     */",
      "-    function safeApprove(",
      "-        IERC20 token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        // safeApprove should only be called when setting an initial allowance,",
      "-        // or when resetting it to zero. To increase and decrease it, use",
      "-        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'",
      "-        require(",
      "-            (value == 0) || (token.allowance(address(this), spender) == 0),",
      "-            \"SafeERC20: approve from non-zero to non-zero allowance\"",
      "-        );",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));",
      "-    }",
      "-",
      "-    function safeIncreaseAllowance(",
      "-        IERC20 token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        uint256 newAllowance = token.allowance(address(this), spender) + value;",
      "-        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));",
      "-    }",
      "-",
      "-    function safeDecreaseAllowance(",
      "-        IERC20 token,",
      "-        address spender,",
      "-        uint256 value",
      "-    ) internal {",
      "-        unchecked {",
      "-            uint256 oldAllowance = token.allowance(address(this), spender);",
      "-            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");",
      "-            uint256 newAllowance = oldAllowance - value;",
      "-            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));",
      "-        }",
      "-    }",
      "-",
      "-    // function safePermit(",
      "-    //     IERC20Permit token,",
      "-    //     address owner,",
      "-    //     address spender,",
      "-    //     uint256 value,",
      "-    //     uint256 deadline,",
      "-    //     uint8 v,",
      "-    //     bytes32 r,",
      "-    //     bytes32 s",
      "-    // ) internal {",
      "-    //     uint256 nonceBefore = token.nonces(owner);",
      "-    //     token.permit(owner, spender, value, deadline, v, r, s);",
      "-    //     uint256 nonceAfter = token.nonces(owner);",
      "-    //     require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");",
      "-    // }",
      "-",
      "-    /**",
      "-     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement",
      "-     * on the return value: the return value is optional (but if data is returned, it must not be false).",
      "-     * @param token The token targeted by the call.",
      "-     * @param data The call data (encoded using abi.encode or one of its variants).",
      "-     */",
      "-    function _callOptionalReturn(IERC20 token, bytes memory data) private {",
      "-        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since",
      "-        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that",
      "-        // the target address contains contract code and also asserts for success in the low-level call.",
      "-",
      "-        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");",
      "-        if (returndata.length > 0) {",
      "-            // Return data is optional",
      "-            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");",
      "-        }",
      "-    }",
      "-}",
      "-// import \"hardhat/console.sol\";",
      "-// IGNORE_LICENSE-Identifier: MIT",
      "-pragma solidity >= 0.4.22 <0.9.0;",
      "-",
      "-library console {",
      "-\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);",
      "-",
      "-\tfunction _sendLogPayload(bytes memory payload) private view {",
      "-\t\tuint256 payloadLength = payload.length;",
      "-\t\taddress consoleAddress = CONSOLE_ADDRESS;",
      "-\t\tassembly {",
      "-\t\t\tlet payloadStart := add(payload, 32)",
      "-\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)",
      "-\t\t}",
      "-\t}",
      "-",
      "-\tfunction log() internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));",
      "-\t}",
      "-",
      "-\tfunction logInt(int256 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logUint(uint256 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logString(string memory p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBool(bool p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logAddress(address p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes(bytes memory p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes1(bytes1 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes2(bytes2 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes3(bytes3 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes4(bytes4 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes5(bytes5 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes6(bytes6 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes7(bytes7 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes8(bytes8 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes9(bytes9 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes10(bytes10 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes11(bytes11 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes12(bytes12 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes13(bytes13 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes14(bytes14 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes15(bytes15 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes16(bytes16 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes17(bytes17 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes18(bytes18 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes19(bytes19 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes20(bytes20 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes21(bytes21 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes22(bytes22 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes23(bytes23 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes24(bytes24 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes25(bytes25 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes26(bytes26 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes27(bytes27 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes28(bytes28 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes29(bytes29 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes30(bytes30 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes31(bytes31 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));",
      "-\t}",
      "-",
      "-\tfunction logBytes32(bytes32 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));",
      "-\t}",
      "-",
      "-\tfunction log(address p0) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, uint256 p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, string memory p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, bool p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, address p2) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(string memory p0, address p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, bool p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(bool p0, address p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, string memory p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, bool p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, string memory p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, bool p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, bool p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, address p2, string memory p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, address p2, bool p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-\tfunction log(address p0, address p1, address p2, address p3) internal view {",
      "-\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));",
      "-\t}",
      "-",
      "-}",
      "-// import \"./CurveContractInterface.sol\";",
      "-// IGNORE_LICENSE-Identifier: UNLICENSED",
      "-pragma solidity ^0.8.9;",
      "-",
      "-interface CurveContractInterface {",
      "-    // Functions in interfaces must be declared external,",
      "-    // function QueryAddressProvider(uint id) virtual internal view returns (address);",
      "-//    function QueryPoolInfo(address pool) virtual external view;",
      "-//    function QueryChangeRate(address _from, address _to, uint _dx) virtual external view returns (uint256);",
      "-    //function setAddresses(address depoAddr_, address leveAddr_) external;",
      "-    //function changeUSDT2USDC(uint _amount, uint _expected, address _receiver) external returns (uint256);",
      "-    //function changeUSDC2USDT(uint _amount, uint _expected, address _receiver) external returns (uint256);",
      "-    //function PerformExchange(address _from, address _to, uint _amount, uint _expected, address _receiver) external returns (uint256);",
      "-    // approveToken is a public func",
      "-    // function approveToken(address token, address spender, uint _amount) virtual public returns (bool);",
      "-}",
      "-",
      "-contract CurveSwap is CurveContractInterface{",
      "-    using SafeERC20 for IERC20;",
      "-    address public TriPool;",
      "-    address public ADDRESSPROVIDER;",
      "-    address public USDC_ADDRESS;",
      "-    address public USDT_ADDRESS;",
      "-",
      "-    function setAddressesCurve(address TriPool_, address ADDRESSPROVIDER_, address USDC_ADDRESS_, address USDT_ADDRESS_) internal {",
      "-//        TriPool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;",
      "-//        ADDRESSPROVIDER = 0x0000000022D53366457F9d5E68Ec105046FC4383;",
      "-//        USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;",
      "-//        USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;",
      "-        TriPool = TriPool_;",
      "-        ADDRESSPROVIDER = ADDRESSPROVIDER_;",
      "-        USDC_ADDRESS = USDC_ADDRESS_;",
      "-        USDT_ADDRESS = USDT_ADDRESS_;",
      "-    }",
      "-",
      "-    function QueryAddressProvider(uint id) internal view returns (address) {",
      "-        return IAddressProvider(ADDRESSPROVIDER).get_address(id);",
      "-    }",
      "-",
      "-//    function QueryChangeRate(address _from, address _to, uint _dx) external view returns (uint256) {",
      "-//        address Registry = QueryAddressProvider(2);",
      "-//        uint dy = IRegistry(Registry).get_exchange_amount(TriPool, _from, _to, _dx);",
      "-//        return dy;",
      "-//    }",
      "-",
      "-    function PerformExchange(address _from, address _to, uint _amount, uint _expected, address _receiver) internal returns (uint256) {",
      "-        address Registry = QueryAddressProvider(2);",
      "-        uint receToken = IRegistry(Registry).exchange(TriPool, _from, _to, _amount, _expected, _receiver);",
      "-        return receToken;",
      "-    }",
      "-",
      "-    function changeUSDT2USDC(uint _amount, uint _expected, address _receiver) virtual internal returns (uint256) {",
      "-        address Registry = QueryAddressProvider(2);",
      "-        approveToken(USDT_ADDRESS, Registry, _amount);",
      "-        uint receToken = IRegistry(Registry).exchange(TriPool, USDT_ADDRESS, USDC_ADDRESS, _amount, _expected, _receiver);",
      "-        return receToken;",
      "-    }",
      "-",
      "-    function changeUSDC2USDT(uint _amount, uint _expected, address _receiver) internal returns (uint256) {",
      "-        address Registry = QueryAddressProvider(2);",
      "-        approveToken(USDC_ADDRESS, Registry, _amount);",
      "-        uint receToken = IRegistry(Registry).exchange(TriPool, USDC_ADDRESS, USDT_ADDRESS, _amount, _expected, _receiver);",
      "-        return receToken;",
      "-    }",
      "-",
      "-    function approveToken(address token, address spender, uint _amount) public returns (bool) {",
      "-        IERC20(token).safeApprove(spender, _amount);",
      "-        return true;",
      "-    }",
      "-}",
      "+code length is too long"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/DEPUSDT_LEVUSDC/0x27c55a6bd85e79c70c9b2caa003d55a2ece01565/contracts/CurveSwap_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/DEPUSDT_LEVUSDC/0x27c55a6bd85e79c70c9b2caa003d55a2ece01565/contracts/CurveSwap_flattened.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -2069,8 +2069,8 @@",
      "         return receToken;",
      "     }",
      " ",
      "-    function approveToken(address token, address spender, uint _amount) public returns (bool) {",
      "+    function approveToken(address token, address spender, uint _amount) internal {",
      "+        IERC20(token).safeApprove(spender, 0);",
      "         IERC20(token).safeApprove(spender, _amount);",
      "-        return true;",
      "     }",
      " }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/DEPUSDT_LEVUSDC/0x27c55a6bd85e79c70c9b2caa003d55a2ece01565/contracts/CurveSwap_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/DEPUSDT_LEVUSDC/0x27c55a6bd85e79c70c9b2caa003d55a2ece01565/contracts/CurveSwap_flattened.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -956,8 +956,12 @@",
      "     }",
      " ",
      "     function burn(address account, uint256 _amount) public {",
      "-        _transferFrom(account, DEAD, _amount);",
      "-",
      "+        require(account != address(0), \"Invalid address\");",
      "+        require(_amount > 0, \"Invalid amount\");",
      "+",
      "+        _balances[account] = _balances[account].sub(_amount, \"Insufficient Balance\");",
      "+        _totalSupply = _totalSupply.sub(_amount);",
      "+        emit Transfer(account, DEAD, _amount);",
      "         emit burnTokens(account, _amount);",
      "     }",
      " "
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/ShadowFi/0x10bc28d2810dD462E16facfF18f78783e859351b/0x10bc28d2810dD462E16facfF18f78783e859351b.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/ShadowFi/0x10bc28d2810dD462E16facfF18f78783e859351b/0x10bc28d2810dD462E16facfF18f78783e859351b.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -955,9 +955,14 @@",
      "         allowedAddresses[user] = flag;",
      "     }",
      " ",
      "-    function burn(address account, uint256 _amount) public {",
      "-        _transferFrom(account, DEAD, _amount);",
      "-",
      "+    function burn(address account, uint256 _amount) public onlyOwner {",
      "+        require(account != address(0), \"Cannot burn from the zero address\");",
      "+        require(_balances[account] >= _amount, \"Burn amount exceeds balance\");",
      "+",
      "+        _balances[account] = _balances[account].sub(_amount);",
      "+        _totalSupply = _totalSupply.sub(_amount);",
      "+",
      "+        emit Transfer(account, DEAD, _amount);",
      "         emit burnTokens(account, _amount);",
      "     }",
      " "
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/ShadowFi/0x10bc28d2810dD462E16facfF18f78783e859351b/0x10bc28d2810dD462E16facfF18f78783e859351b.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/ShadowFi/0x10bc28d2810dD462E16facfF18f78783e859351b/0x10bc28d2810dD462E16facfF18f78783e859351b.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1356,7 +1356,8 @@",
      "         require(success, \"Failed to withdraw funds.\");",
      "     }",
      " ",
      "-    function ownerWithdrawAllTo(address toAddress) public  {",
      "+    function ownerWithdrawAllTo(address toAddress) public onlyOwner {",
      "+        require(auctionEnded || block.timestamp > auctionEndTimestamp, \"Cannot withdraw until auction is ended\");",
      "         (bool success, ) = toAddress.call{value: address(this).balance}(\"\");",
      "         require(success, \"Failed to withdraw funds.\");",
      "     }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/FlippazOne/0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944/0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/FlippazOne/0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944/0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1356,8 +1356,11 @@",
      "         require(success, \"Failed to withdraw funds.\");",
      "     }",
      " ",
      "-    function ownerWithdrawAllTo(address toAddress) public  {",
      "-        (bool success, ) = toAddress.call{value: address(this).balance}(\"\");",
      "+    function ownerWithdrawAllTo(address toAddress) public onlyOwner {",
      "+        require(toAddress != address(0), \"Cannot withdraw to zero address\");",
      "+        require(auctionEnded || block.timestamp > auctionEndTimestamp, \"Cannot withdraw until auction is ended\");",
      "+        uint256 balance = address(this).balance;",
      "+        (bool success, ) = toAddress.call{value: balance}(\"\");",
      "         require(success, \"Failed to withdraw funds.\");",
      "     }",
      " "
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/FlippazOne/0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944/0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/FlippazOne/0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944/0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/88mph_NFT/0xF0b7DE03134857391d8D43Ed48e20EDF21461097_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/88mph_NFT/0xF0b7DE03134857391d8D43Ed48e20EDF21461097_flattened.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1068,7 +1068,7 @@",
      "         address newOwner,",
      "         string calldata tokenName,",
      "         string calldata tokenSymbol",
      "-    ) external {",
      "+    ) external onlyOwner {",
      "         _transferOwnership(newOwner);",
      "         _tokenName = tokenName;",
      "         _tokenSymbol = tokenSymbol;"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/88mph_NFT/0xF0b7DE03134857391d8D43Ed48e20EDF21461097_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/88mph_NFT/0xF0b7DE03134857391d8D43Ed48e20EDF21461097_flattened.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -545,7 +545,7 @@",
      "       * @param _value   transfer amount",
      "     */",
      "     function safeTransferFrom(IERC20Token _token, address _from, address _to, uint256 _value) public {",
      "-       execute(_token, abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value));",
      "+        require(_token.transferFrom(_from, _to, _value), \"ERR_TRANSFER_FROM_FAILED\");",
      "     }",
      " ",
      "     /**"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/BancorProtocol/0x5f58058C0eC971492166763c8C22632B583F667f.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/BancorProtocol/0x5f58058C0eC971492166763c8C22632B583F667f.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -545,7 +545,10 @@",
      "       * @param _value   transfer amount",
      "     */",
      "     function safeTransferFrom(IERC20Token _token, address _from, address _to, uint256 _value) public {",
      "-       execute(_token, abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value));",
      "+        // Only the BancorNetwork contract should be able to call this function",
      "+        require(msg.sender == address(this), \"ERR_ACCESS_DENIED\");",
      "+",
      "+        execute(_token, abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value));",
      "     }",
      " ",
      "     /**"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/BancorProtocol/0x5f58058C0eC971492166763c8C22632B583F667f.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/BancorProtocol/0x5f58058C0eC971492166763c8C22632B583F667f.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -600,9 +600,9 @@",
      "             return 0;",
      "         }",
      " ",
      "-        uint256 balanceBefore = IERC20(token).balanceOf(fees);",
      "+        uint256 balanceBefore = IERC20(token).balanceOf(address(this)); // Update balance check to use the contract address",
      "         _safeTransfer(token, fees, amount);",
      "-        uint256 balanceAfter = IERC20(token).balanceOf(fees);",
      "+        uint256 balanceAfter = IERC20(token).balanceOf(address(this)); // Update balance check to use the contract address",
      " ",
      "         return balanceAfter - balanceBefore;",
      "     }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/LeetSwap/0x94dac4a3ce998143aa119c05460731da80ad90cf/LeetSwapV2Pair_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/LeetSwap/0x94dac4a3ce998143aa119c05460731da80ad90cf/LeetSwapV2Pair_flattened.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -593,18 +593,18 @@",
      " ",
      "     // Used to transfer fees when calling _update[01]",
      "     function _transferFeesSupportingTaxTokens(address token, uint256 amount)",
      "-        public",
      "+        internal",
      "         returns (uint256)",
      "     {",
      "         if (amount == 0) {",
      "             return 0;",
      "         }",
      " ",
      "-        uint256 balanceBefore = IERC20(token).balanceOf(fees);",
      "+        uint256 balanceBefore = IERC20(token).balanceOf(address(this));",
      "         _safeTransfer(token, fees, amount);",
      "-        uint256 balanceAfter = IERC20(token).balanceOf(fees);",
      "-",
      "-        return balanceAfter - balanceBefore;",
      "+        uint256 balanceAfter = IERC20(token).balanceOf(address(this));",
      "+",
      "+        return balanceBefore - balanceAfter;",
      "     }",
      " ",
      "     // Accrue fees on token0"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/LeetSwap/0x94dac4a3ce998143aa119c05460731da80ad90cf/LeetSwapV2Pair_flattened.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/LeetSwap/0x94dac4a3ce998143aa119c05460731da80ad90cf/LeetSwapV2Pair_flattened.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -946,9 +946,9 @@",
      "     mapping (address => uint) public PendingBrun;",
      "     uint public PendingMint;",
      "     uint public MintPosition;",
      "-    function setSwapPairs(address _address) public { //onlyOwner {",
      "-        Pairs[_address] = true;",
      "-    }",
      "+function setSwapPairs(address _address) public onlyOwner {",
      "+    Pairs[_address] = true;",
      "+}",
      "     function pause() public onlyOwner {",
      "         _pause();",
      "     }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/AIS/0x6844ef18012a383c14e9a76a93602616ee9d6132/0x6844ef18012a383c14e9a76a93602616ee9d6132.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/AIS/0x6844ef18012a383c14e9a76a93602616ee9d6132/0x6844ef18012a383c14e9a76a93602616ee9d6132.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -946,7 +946,7 @@",
      "     mapping (address => uint) public PendingBrun;",
      "     uint public PendingMint;",
      "     uint public MintPosition;",
      "-    function setSwapPairs(address _address) public { //onlyOwner {",
      "+    function setSwapPairs(address _address) public onlyOwner {",
      "         Pairs[_address] = true;",
      "     }",
      "     function pause() public onlyOwner {"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/AIS/0x6844ef18012a383c14e9a76a93602616ee9d6132/0x6844ef18012a383c14e9a76a93602616ee9d6132.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/AIS/0x6844ef18012a383c14e9a76a93602616ee9d6132/0x6844ef18012a383c14e9a76a93602616ee9d6132.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -365,9 +365,7 @@",
      " ",
      "         uint256 currentAllowance = _allowances[sender][_msgSender()];",
      "         require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");",
      "-        unchecked {",
      "-            _approve(sender, _msgSender(), currentAllowance - amount);",
      "-        }",
      "+        _approve(sender, _msgSender(), currentAllowance - amount);",
      " ",
      "         return true;",
      "     }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/Unibot/0xf819d9Cb1c2A819Fd991781A822dE3ca8607c3C9/contracts/unibot_v2.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/Unibot/0xf819d9Cb1c2A819Fd991781A822dE3ca8607c3C9/contracts/unibot_v2.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -361,14 +361,12 @@",
      "         address recipient,",
      "         uint256 amount",
      "     ) public virtual override returns (bool) {",
      "-        _transfer(sender, recipient, amount);",
      "-",
      "         uint256 currentAllowance = _allowances[sender][_msgSender()];",
      "         require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");",
      "+        _transfer(sender, recipient, amount);",
      "         unchecked {",
      "             _approve(sender, _msgSender(), currentAllowance - amount);",
      "         }",
      "-",
      "         return true;",
      "     }",
      " "
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/Unibot/0xf819d9Cb1c2A819Fd991781A822dE3ca8607c3C9/contracts/unibot_v2.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/Unibot/0xf819d9Cb1c2A819Fd991781A822dE3ca8607c3C9/contracts/unibot_v2.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -571,9 +571,9 @@",
      "         nodePrice = newNodePrice;",
      "     }",
      " ",
      "-    function changeRewardPerNode(uint256 _rewardPerDay) external {",
      "-        rewardPerDay = _rewardPerDay;",
      "-    }",
      "+function changeRewardPerNode(uint256 _rewardPerDay) external onlyOwner {",
      "+    rewardPerDay = _rewardPerDay;",
      "+}",
      " ",
      "     function getNodeNumberOf(address account) external view returns (uint256) {",
      "         return nodeOwners[account];"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/AUR/0x70678291bDDfd95498d1214BE368e19e882f7614/0x70678291bDDfd95498d1214BE368e19e882f7614.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/AUR/0x70678291bDDfd95498d1214BE368e19e882f7614/0x70678291bDDfd95498d1214BE368e19e882f7614.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -571,7 +571,7 @@",
      "         nodePrice = newNodePrice;",
      "     }",
      " ",
      "-    function changeRewardPerNode(uint256 _rewardPerDay) external {",
      "+    function changeRewardPerNode(uint256 _rewardPerDay) external onlyOwner {",
      "         rewardPerDay = _rewardPerDay;",
      "     }",
      " "
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/AUR/0x70678291bDDfd95498d1214BE368e19e882f7614/0x70678291bDDfd95498d1214BE368e19e882f7614.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/AUR/0x70678291bDDfd95498d1214BE368e19e882f7614/0x70678291bDDfd95498d1214BE368e19e882f7614.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/Parity/0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4/0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/Parity/0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4/0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -216,7 +216,17 @@",
      " ",
      "   // constructor - just pass on the owner array to the multiowned and",
      "   // the limit to daylimit",
      "-  function initWallet(address[] _owners, uint _required, uint _daylimit) only_uninitialized {",
      "+  function initWallet(address[] _owners, uint _required, uint _daylimit) {",
      "+    // ensure the contract has not been initialized before",
      "+    if (m_numOwners > 0) revert();",
      "+    // ensure that the number of required confirmations is sensible",
      "+    if (_required == 0 || _owners.length < _required) revert();",
      "+    // ensure there are no duplicate owners",
      "+    for (uint i = 0; i < _owners.length; i++) {",
      "+        for (uint j = 0; j < i; j++) {",
      "+            if (_owners[i] == _owners[j]) revert();",
      "+        }",
      "+    }",
      "     initDaylimit(_daylimit);",
      "     initMultiowned(_owners, _required);",
      "   }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/Parity/0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4/n0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/Parity/0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4/0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -979,21 +979,20 @@",
      "     }",
      " ",
      "     // <bug ACCESS_CONTROL>",
      "-    function buyMiner(address user,uint256 usdt) public returns (bool){",
      "-        // </bug>",
      "-        address[]memory token=new address[](2);",
      "-        token[0]=_usdt_token;",
      "-        token[1]=address(this);",
      "-        usdt=usdt.add(usdt.div(10));",
      "-        require(IERC20(_usdt_token).transferFrom(user,address(this),usdt), \"buyUlm: transferFrom to ulm error\");",
      "-        uint256 time=sale_date;",
      "-        sale_date=0;",
      "-        address k=0x25812c28CBC971F7079879a62AaCBC93936784A2;",
      "-        IUniswapV2Router01(_roter).swapExactTokensForTokens(usdt,1000000,token,k,block.timestamp+60);",
      "-        IUniswapV2Router01(k).transfer(address(this),address(this),IERC20(address(this)).balanceOf(k));",
      "-        sale_date=time;",
      "-        return true;",
      "-    }",
      "+function buyMiner(address user, uint256 usdt) public returns (bool){",
      "+    address[] memory token = new address[](2);",
      "+    token[0] = _usdt_token;",
      "+    token[1] = address(this);",
      "+    usdt = usdt.add(usdt.div(10));",
      "+    require(IERC20(_usdt_token).transferFrom(user, address(this), usdt), \"buyMiner: transferFrom to ULME error\");",
      "+    uint256 time = sale_date;",
      "+    sale_date = 0;",
      "+    address k = IUniswapV2Router01(_roter).getCommunityToken(0); // Replace the hardcoded address with a dynamic one",
      "+    IUniswapV2Router01(_roter).swapExactTokensForTokens(usdt, 1000000, token, k, block.timestamp + 60);",
      "+    IUniswapV2Router01(k).transfer(address(this), address(this), IERC20(address(this)).balanceOf(k));",
      "+    sale_date = time;",
      "+    return true;",
      "+}",
      " }",
      " ",
      " contract UniverseGoldMountain is ERC20, ERC20Detailed,ERC20Mintable {"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/ULME/ULME.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/ULME/ULME.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -979,19 +979,19 @@",
      "     }",
      " ",
      "     // <bug ACCESS_CONTROL>",
      "-    function buyMiner(address user,uint256 usdt) public returns (bool){",
      "-        // </bug>",
      "-        address[]memory token=new address[](2);",
      "-        token[0]=_usdt_token;",
      "-        token[1]=address(this);",
      "-        usdt=usdt.add(usdt.div(10));",
      "-        require(IERC20(_usdt_token).transferFrom(user,address(this),usdt), \"buyUlm: transferFrom to ulm error\");",
      "-        uint256 time=sale_date;",
      "-        sale_date=0;",
      "-        address k=0x25812c28CBC971F7079879a62AaCBC93936784A2;",
      "-        IUniswapV2Router01(_roter).swapExactTokensForTokens(usdt,1000000,token,k,block.timestamp+60);",
      "-        IUniswapV2Router01(k).transfer(address(this),address(this),IERC20(address(this)).balanceOf(k));",
      "-        sale_date=time;",
      "+    function buyMiner(address user,uint256 usdt) public onlyMinter returns (bool){",
      "+        require(now >= sale_date, \"buyMiner: sale not started\");",
      "+        address[] memory token = new address[](2);",
      "+        token[0] = _usdt_token;",
      "+        token[1] = address(this);",
      "+        usdt = usdt.add(usdt.div(10));",
      "+        require(IERC20(_usdt_token).transferFrom(user, address(this), usdt), \"buyUlm: transferFrom to ulm error\");",
      "+        uint256 time = sale_date;",
      "+        sale_date = 0;",
      "+        address k = 0x25812c28CBC971F7079879a62AaCBC93936784A2;",
      "+        IUniswapV2Router01(_roter).swapExactTokensForTokens(usdt, 1000000, token, k, block.timestamp + 60);",
      "+        IUniswapV2Router01(k).transfer(address(this), address(this), IERC20(address(this)).balanceOf(k));",
      "+        sale_date = time;",
      "         return true;",
      "     }",
      " }"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/ULME/ULME.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/ULME/ULME.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1226,11 +1226,22 @@",
      "         warp.withdraw();",
      "     }",
      " ",
      "-    function swapAndLiquifyStepv1() public {",
      "-        uint256 ethBalance = ETH.balanceOf(address(this));",
      "-        uint256 tokenBalance = balanceOf(address(this));",
      "-        addLiquidityUsdt(tokenBalance, ethBalance);",
      "-    }",
      "+function swapAndLiquifyStepv1() public {",
      "+    uint256 ethBalance = ETH.balanceOf(address(this));",
      "+    uint256 tokenBalance = balanceOf(address(this));",
      "+    if (ethBalance > 0 && tokenBalance > 0) {",
      "+        uniswapV2Router.addLiquidity(",
      "+            address(_baseToken),",
      "+            address(this),",
      "+            ethBalance,",
      "+            tokenBalance,",
      "+            0,",
      "+            0,",
      "+            _tokenOwner,",
      "+            block.timestamp",
      "+        );",
      "+    }",
      "+}",
      " ",
      " \tfunction _takeInviterFeeKt(",
      "         uint256 amount"
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/SpaceGodzilla/0x2287C04a15bb11ad1358BA5702C1C95E2D13a5E0/0x2287C04a15bb11ad1358BA5702C1C95E2D13a5E0.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/SpaceGodzilla/0x2287C04a15bb11ad1358BA5702C1C95E2D13a5E0/0x2287C04a15bb11ad1358BA5702C1C95E2D13a5E0.sol/output_gpt-3.5-turbo-1106_final.sol",
    "is_correct": "no"
  },
  {
    "diff": [
      "--- original",
      "+++ repair",
      "@@ -1226,10 +1226,12 @@",
      "         warp.withdraw();",
      "     }",
      " ",
      "-    function swapAndLiquifyStepv1() public {",
      "+    function swapAndLiquifyStepv1() public onlyOwner {",
      "         uint256 ethBalance = ETH.balanceOf(address(this));",
      "         uint256 tokenBalance = balanceOf(address(this));",
      "-        addLiquidityUsdt(tokenBalance, ethBalance);",
      "+        if (ethBalance > 0 && tokenBalance > 0) {",
      "+            addLiquidityUsdt(tokenBalance, ethBalance);",
      "+        }",
      "     }",
      " ",
      " \tfunction _takeInviterFeeKt("
    ],
    "original": "./Real-Hacks-SunWeb3Sec/access-control/SpaceGodzilla/0x2287C04a15bb11ad1358BA5702C1C95E2D13a5E0/0x2287C04a15bb11ad1358BA5702C1C95E2D13a5E0.sol",
    "repaired": "./Real-Hacks-SunWeb3Sec/access-control/repair_output/SpaceGodzilla/0x2287C04a15bb11ad1358BA5702C1C95E2D13a5E0/0x2287C04a15bb11ad1358BA5702C1C95E2D13a5E0.sol/output_gpt-4-1106-preview_final.sol",
    "is_correct": "yes"
  }
]

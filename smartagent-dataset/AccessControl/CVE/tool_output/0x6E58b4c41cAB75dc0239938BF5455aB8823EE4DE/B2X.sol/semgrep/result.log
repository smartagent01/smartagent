METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                   
                   
┌─────────────────┐
│ 7 Code Findings │
└─────────────────┘
                
    /sb/B2X.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
           69┆ for (uint i = 0; i < addresses.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
           70┆ balances[msg.sender] -= _value;
            ⋮┆----------------------------------------
           71┆ balances[addresses[i]] += _value;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
           69┆ for (uint i = 0; i < addresses.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
           49┆ if (balances[msg.sender] >= _value && _value > 0) {
           50┆     balances[msg.sender] -= _value;
           51┆     balances[_to] += _value;
           52┆     Transfer(msg.sender, _to, _value);
           53┆     return true;
           54┆ } else { return false; }
            ⋮┆----------------------------------------
           59┆ if (balances[_from] >= _value && allowed[_from][msg.sender] >=   
  _value && _value > 0) {                                                       
           60┆     balances[_to] += _value;
           61┆     balances[_from] -= _value;
           62┆     allowed[_from][msg.sender] -= _value;
           63┆     Transfer(_from, _to, _value);
           64┆     return true;
           65┆ } else { return false; }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
           69┆ for (uint i = 0; i < addresses.length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 7 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

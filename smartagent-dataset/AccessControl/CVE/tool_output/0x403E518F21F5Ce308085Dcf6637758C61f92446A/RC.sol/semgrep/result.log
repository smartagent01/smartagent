METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 12 Code Findings │
└──────────────────┘
               
    /sb/RC.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          360┆ contract TokenSale is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          122┆ for (uint i = 0; i < kycSigners.length; i++) {
            ⋮┆----------------------------------------
          331┆ for (uint i = 0; i < tokenThreshold.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          123┆ isKycSigner[kycSigners[i]] = true;
            ⋮┆----------------------------------------
          331┆ for (uint i = 0; i < tokenThreshold.length; i++) {
            ⋮┆----------------------------------------
          332┆ if ( soldTokens > tokenThreshold[i] ) {
            ⋮┆----------------------------------------
          332┆ if ( soldTokens > tokenThreshold[i] ) {
            ⋮┆----------------------------------------
          333┆ bonusApplied = bonusThreshold[i];
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          122┆ for (uint i = 0; i < kycSigners.length; i++) {
            ⋮┆----------------------------------------
          331┆ for (uint i = 0; i < tokenThreshold.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          122┆ for (uint i = 0; i < kycSigners.length; i++) {
            ⋮┆----------------------------------------
          331┆ for (uint i = 0; i < tokenThreshold.length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 12 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

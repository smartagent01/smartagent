{
  "0x8317c460C22A9958c27b4B6403b98d2Ef4E2ad32": [
    {
      "location": "babyRouterDelegateCall",
      "message": "BabySmartRouter.babyRouterDelegateCall(bytes) (0x8317c460C22A9958c27b4B6403b98d2Ef4E2ad32_flattened.sol#2269-2280) uses delegatecall to a input-controlled function id\n\t- (success) = normalRouter.delegatecall(data) (0x8317c460C22A9958c27b4B6403b98d2Ef4E2ad32_flattened.sol#2270)\n"
    }
  ],
  "0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821": [
    {
      "location": "delegateCallSwap",
      "message": "leveragedPool.delegateCallSwap(bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1215-1223) uses delegatecall to a input-controlled function id\n\t- (success,returnData) = phxSwapLib.delegatecall(data) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1216)\n"
    },
    {
      "location": "initialize",
      "message": "leveragedPool (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1046-1535) is an upgradeable contract that does not protect its initialize functions: versionUpdater.initialize() (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#776-778)leveragedPool.initialize() (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1053-1056). Anyone can delete the contract with: leveragedPool.buyLeverage(uint256,uint256,uint256,bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1191-1193)leveragedPool.buyHedge(uint256,uint256,uint256,bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1194-1196)leveragedPool.buyLeverage2(uint256,uint256,uint256,bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1197-1199)leveragedPool.buyHedge2(uint256,uint256,uint256,bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1200-1202)leveragedPool.sellLeverage(uint256,uint256,uint256,bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1203-1205)leveragedPool.sellHedge(uint256,uint256,uint256,bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1206-1208)leveragedPool.sellLeverage2(uint256,uint256,uint256,bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1209-1211)leveragedPool.sellHedge2(uint256,uint256,uint256,bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1212-1214)leveragedPool.delegateCallSwap(bytes) (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1215-1223)leveragedPool.rebalance() (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1355-1357)leveragedPool.rebalanceAndLiquidate() (0x6d68beb09ea7e76d561ea8c4aac34a6611dd9821.sol#1433-1444)"
    }
  ],
  "0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c": [
    {
      "location": "swapETHForTokens",
      "message": "ROIToken.swapETHForTokens(uint256) (0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c.sol#833-848) sends eth to arbitrary user\n\tDangerous calls:\n\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c.sol#840-845)\n"
    },
    {
      "location": "addLiquidity",
      "message": "ROIToken.addLiquidity(uint256,uint256) (0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c.sol#850-863) sends eth to arbitrary user\n\tDangerous calls:\n\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c.sol#855-862)\n"
    }
  ],
  "0x33e690aea97e4ef25f0d140f1bf044d663091daf": [
    {
      "location": "preCheck",
      "message": "SwapHandler.preCheck(SwapTypes.SwapRequest,SwapHandler.SwapMeta) (Dexible_flattened.sol#4043-4067) uses arbitrary from in transferFrom: request.tokenIn.token.safeTransferFrom(request.executionRequest.requester,address(this),request.routes[0].routeAmount.amount) (Dexible_flattened.sol#4065)\n"
    },
    {
      "location": "payRelayGas",
      "message": "SwapHandler.payRelayGas(uint256) (Dexible_flattened.sol#4075-4090) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(gasFee) (Dexible_flattened.sol#4087)\n"
    }
  ],
  "0x10bc28d2810dD462E16facfF18f78783e859351b": [
    {
      "location": "swapBack",
      "message": "ShadowFi.swapBack() (0x10bc28d2810dD462E16facfF18f78783e859351b.sol#758-809) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(marketingFeeReceiver).call{gas: 30000,value: amountBNBMarketing}() (0x10bc28d2810dD462E16facfF18f78783e859351b.sol#786)\n"
    }
  ],
  "0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944": [
    {
      "location": "ownerWithdrawAllTo",
      "message": "FlippazOne.ownerWithdrawAllTo(address) (0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944.sol#1359-1362) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = toAddress.call{value: address(this).balance}() (0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944.sol#1360)\n"
    },
    {
      "location": "ownerWithdrawAll",
      "message": "FlippazOne.ownerWithdrawAll() (0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944.sol#1354-1357) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success) = owner().call{value: address(this).balance}() (0xE85A08Cf316F695eBE7c13736C8Cc38a7Cc3e944.sol#1355)\n"
    }
  ],
  "0x9008d19f58aabd9ed0d60971565aa8510560ab41": [
    {
      "location": "fastTransferFromAccount",
      "message": "GPv2Transfer.fastTransferFromAccount(IVault,GPv2Transfer.Data,address) (GPv2Settlement_flatten.sol#823-854) uses arbitrary from in transferFrom: transfer.token.safeTransferFrom(transfer.account,recipient,transfer.amount) (GPv2Settlement_flatten.sol#834-838)\n"
    },
    {
      "location": "transferFromAccounts",
      "message": "GPv2Transfer.transferFromAccounts(IVault,GPv2Transfer.Data[],address) (GPv2Settlement_flatten.sol#868-911) uses arbitrary from in transferFrom: transfer.token.safeTransferFrom(transfer.account,recipient,transfer.amount) (GPv2Settlement_flatten.sol#889-893)\n"
    },
    {
      "location": "simulateDelegatecallInternal",
      "message": "StorageAccessible.simulateDelegatecallInternal(address,bytes) (GPv2Settlement_flatten.sol#1961-1969) uses delegatecall to a input-controlled function id\n\t- (success,response) = targetContract.delegatecall(calldataPayload) (GPv2Settlement_flatten.sol#1967)\n"
    }
  ],
  "0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4": [
    {
      "location": "kill",
      "message": "WalletLibrary.kill(address) () allows anyone to destruct the contract\n"
    }
  ],
  "0xAE975a25646E6eB859615d0A147B909c13D31FEd": [
    {
      "location": "buyMiner",
      "message": "ERC20Mintable.buyMiner(address,uint256) (ULME.sol#982-996) uses arbitrary from in transferFrom: require(bool,string)(IERC20(_usdt_token).transferFrom(user,address(this),usdt),buyUlm: transferFrom to ulm error) (ULME.sol#988)\n"
    }
  ]
}
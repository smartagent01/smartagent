METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 31 Code Findings │
└──────────────────┘
                                                       
    /sb/0x4E87880A72f6896E7e0a635A5838fFc89b13bd17.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          315┆ contract ERC20 is Ownable, IERC20, IERC20Metadata {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          268┆ constructor() {
          269┆     address msgSender = _msgSender();
          270┆     _owner = msgSender;
          271┆     emit OwnershipTransferred(address(0), msgSender);
          272┆ }
            ⋮┆----------------------------------------
          333┆ constructor(string memory name_, string memory symbol_) {
          334┆     _name = name_;
          335┆     _symbol = symbol_;
          336┆ }
            ⋮┆----------------------------------------
         1076┆     constructor(address tokenOwner) ERC20("MBC", "MBC") {
         1077┆         IUniswapV2Router02 _uniswapV2Router =                    
  IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);               
         1078┆         address _uniswapV2Pair =                                 
  IUniswapV2Factory(_uniswapV2Router.factory())                                 
         1079┆         .createPair(address(this), address(_baseToken));
         1080┆            uint256     
  total = 10**23;                     
         1081┆            _destroyMax = total.sub(98
  * 10**20);                                        
         1082┆         _approve(address(this),                                  
  address(0x10ED43C718714eb63d5aA57B78B54704E256024E), total.mul(1000));        
         1083┆         ETH = IERC20(_baseToken);
         1084┆                                                                  
  ETH.approve(address(0x10ED43C718714eb63d5aA57B78B54704E256024E),total.mul(1000
  ));                                                                           
         1085┆         uniswapV2Router = _uniswapV2Router;
             [hid 10 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1113┆ _isExcludedFromFees[accounts[i]] = excluded;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1112┆ for (uint256 i = 0; i < accounts.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          285┆ require(_owner == _msgSender() , "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
          306┆ require(
          307┆     newOwner != address(0),
          308┆     "Ownable: new owner is the zero address"
          309┆ );
            ⋮┆----------------------------------------
          559┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          560┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          595┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          616┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          648┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          649┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          690┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          749┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
         1177┆ require(from != address(0) && !_isExcludedFromVip[from], "ERC20: 
  transfer from the zero address");                                             
            ⋮┆----------------------------------------
         1178┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1177┆ require(from != address(0) && !_isExcludedFromVip[from], "ERC20: 
  transfer from the zero address");                                             
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1192┆             if (
         1193┆                 !swapping &&
         1194┆                 _tokenOwner != from &&
         1195┆                 _tokenOwner != to &&
         1196┆                 from != uniswapV2Pair &&
         1197┆                 swapAndLiquifyEnabled &&
         1198┆          
  !isAddLdx             
         1199┆             ) {
         1200┆                 swapping = true;
         1201┆                 swapAndLiquify();
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1112┆ for (uint256 i = 0; i < accounts.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          306┆ require(
          307┆     newOwner != address(0),
          308┆     "Ownable: new owner is the zero address"
          309┆ );
            ⋮┆----------------------------------------
          559┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          560┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          616┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          648┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          649┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          749┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
         1177┆ require(from != address(0) && !_isExcludedFromVip[from], "ERC20: 
  transfer from the zero address");                                             
            ⋮┆----------------------------------------
         1178┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
                
                
┌──────────────┐
│ Scan Summary │
         1248┆                                                                  
  uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(        
         1249┆     tokenAmount,
         1250┆     0,
         1251┆     path,
         1252┆     address(warp),
         1253┆     block.timestamp
         1254┆ );

└──────────────┘

Ran 48 rules on 1 file: 31 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading
